
AI-Sine_Model2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b15c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  0800b400  0800b400  0001b400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be64  0800be64  0001be64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000874  24000000  0800be74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000210  24000874  0800c6e8  00020874  2**2
                  ALLOC
  8 ._user_heap_stack 00002800  20000000  20000000  00030000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020874  2**0
                  CONTENTS, READONLY
 10 .debug_info   000184bf  00000000  00000000  000208a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b39  00000000  00000000  00038d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001118  00000000  00000000  0003b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ff8  00000000  00000000  0003c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000393a6  00000000  00000000  0003d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017091  00000000  00000000  00076d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016e760  00000000  00000000  0008dde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fc547  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005838  00000000  00000000  001fc598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  00201dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  00201e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000874 	.word	0x24000874
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b3e4 	.word	0x0800b3e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000878 	.word	0x24000878
 80002dc:	0800b3e4 	.word	0x0800b3e4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b0ed      	sub	sp, #436	; 0x1b4
 8000698:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char buf[100];
	int buf_len = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle sine_model = AI_HANDLE_NULL;
 80006a0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80006a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 80006ac:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80006b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006b4:	4ab9      	ldr	r2, [pc, #740]	; (800099c <main+0x308>)
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80006bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80006c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80006d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80006e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006e4:	2201      	movs	r2, #1
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80006ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006f0:	2201      	movs	r2, #1
 80006f2:	751a      	strb	r2, [r3, #20]
 80006f4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80006f8:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 80006fc:	6953      	ldr	r3, [r2, #20]
 80006fe:	2104      	movs	r1, #4
 8000700:	f361 231f 	bfi	r3, r1, #8, #24
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800070a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800070e:	4aa4      	ldr	r2, [pc, #656]	; (80009a0 <main+0x30c>)
 8000710:	461c      	mov	r4, r3
 8000712:	4613      	mov	r3, r2
 8000714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800071a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800071e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000722:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000726:	619a      	str	r2, [r3, #24]
	ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000728:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800072c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000730:	4a9a      	ldr	r2, [pc, #616]	; (800099c <main+0x308>)
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000738:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000744:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000750:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800075c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000760:	2201      	movs	r2, #1
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000768:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800076c:	2201      	movs	r2, #1
 800076e:	751a      	strb	r2, [r3, #20]
 8000770:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000774:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8000778:	6953      	ldr	r3, [r2, #20]
 800077a:	2104      	movs	r1, #4
 800077c:	f361 231f 	bfi	r3, r1, #8, #24
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000786:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800078a:	4a85      	ldr	r2, [pc, #532]	; (80009a0 <main+0x30c>)
 800078c:	461c      	mov	r4, r3
 800078e:	4613      	mov	r3, r2
 8000790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000796:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800079a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800079e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007a2:	619a      	str	r2, [r3, #24]

	// Set working memory and get weights/biases from model
	ai_network_params ai_params =
					AI_NETWORK_PARAMS_INIT(AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()), AI_SINE_MODEL_DATA_ACTIVATIONS(activations));
 80007a4:	f005 ff14 	bl	80065d0 <ai_sine_model_data_weights_get>
 80007a8:	4602      	mov	r2, r0
 80007aa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80007ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f005 fed7 	bl	8006568 <ai_sine_model_data_weights_buffer_get>
 80007ba:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80007be:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80007c2:	331c      	adds	r3, #28
 80007c4:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f005 fe98 	bl	8006500 <ai_sine_model_data_activations_buffer_get>

	// Set pointers wrapper structs to our data buffers
//	ai_input[0].n_batches = 1;
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 80007d0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80007d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80007d8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80007dc:	605a      	str	r2, [r3, #4]
//	ai_output[0].n_batches = 1;
//	ai_i32 batch=1;


	ai_output[0].data = AI_HANDLE_PTR(out_data);
 80007de:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80007e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80007e6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80007ea:	605a      	str	r2, [r3, #4]
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ec:	4b6d      	ldr	r3, [pc, #436]	; (80009a4 <main+0x310>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d11b      	bne.n	8000830 <main+0x19c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007f8:	f3bf 8f4f 	dsb	sy
}
 80007fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007fe:	f3bf 8f6f 	isb	sy
}
 8000802:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000804:	4b67      	ldr	r3, [pc, #412]	; (80009a4 <main+0x310>)
 8000806:	2200      	movs	r2, #0
 8000808:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800080c:	f3bf 8f4f 	dsb	sy
}
 8000810:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000812:	f3bf 8f6f 	isb	sy
}
 8000816:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000818:	4b62      	ldr	r3, [pc, #392]	; (80009a4 <main+0x310>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a61      	ldr	r2, [pc, #388]	; (80009a4 <main+0x310>)
 800081e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000822:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
}
 8000828:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800082a:	f3bf 8f6f 	isb	sy
}
 800082e:	e000      	b.n	8000832 <main+0x19e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000830:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000832:	4b5c      	ldr	r3, [pc, #368]	; (80009a4 <main+0x310>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d143      	bne.n	80008c6 <main+0x232>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800083e:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <main+0x310>)
 8000840:	2200      	movs	r2, #0
 8000842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000846:	f3bf 8f4f 	dsb	sy
}
 800084a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800084c:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <main+0x310>)
 800084e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000852:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000856:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800085a:	0b5b      	lsrs	r3, r3, #13
 800085c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000860:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000864:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000868:	08db      	lsrs	r3, r3, #3
 800086a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800086e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000872:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000876:	015a      	lsls	r2, r3, #5
 8000878:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800087c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800087e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000882:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000884:	4947      	ldr	r1, [pc, #284]	; (80009a4 <main+0x310>)
 8000886:	4313      	orrs	r3, r2
 8000888:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800088c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1eb      	bne.n	8000872 <main+0x1de>
    } while(sets-- != 0U);
 800089a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1dd      	bne.n	8000864 <main+0x1d0>
  __ASM volatile ("dsb 0xF":::"memory");
 80008a8:	f3bf 8f4f 	dsb	sy
}
 80008ac:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008ae:	4b3d      	ldr	r3, [pc, #244]	; (80009a4 <main+0x310>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a3c      	ldr	r2, [pc, #240]	; (80009a4 <main+0x310>)
 80008b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008c0:	f3bf 8f6f 	isb	sy
}
 80008c4:	e000      	b.n	80008c8 <main+0x234>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008c6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 fd1e 	bl	8001308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f8f6 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 fa8a 	bl	8000de8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008d4:	f000 fa3c 	bl	8000d50 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80008d8:	f000 f9a0 	bl	8000c1c <MX_CRC_Init>
  MX_TIM16_Init();
 80008dc:	f000 fa12 	bl	8000d04 <MX_TIM16_Init>
  MX_TIM1_Init();
 80008e0:	f000 f9be 	bl	8000c60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	// Start timer/counter
  	HAL_TIM_Base_Init(&htim1);
 80008e4:	4830      	ldr	r0, [pc, #192]	; (80009a8 <main+0x314>)
 80008e6:	f003 ffd7 	bl	8004898 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim16);
 80008ea:	4830      	ldr	r0, [pc, #192]	; (80009ac <main+0x318>)
 80008ec:	f004 f82c 	bl	8004948 <HAL_TIM_Base_Start>

	// Greetings!
	buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test KCPAUL\r\n");
 80008f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008f4:	492e      	ldr	r1, [pc, #184]	; (80009b0 <main+0x31c>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f008 fc40 	bl	800917c <siprintf>
 80008fc:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
	HAL_UART_Transmit(&huart3, (uint8_t*) buf, buf_len, 100);
 8000900:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000904:	b29a      	uxth	r2, r3
 8000906:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	4829      	ldr	r0, [pc, #164]	; (80009b4 <main+0x320>)
 800090e:	f004 fb99 	bl	8005044 <HAL_UART_Transmit>

	// Create instance of neural network
	ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000912:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fd8f 	bl	800643c <ai_sine_model_create>
 800091e:	4603      	mov	r3, r0
 8000920:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if (ai_err.type != AI_ERROR_NONE) {
 8000924:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000928:	2b00      	cmp	r3, #0
 800092a:	d011      	beq.n	8000950 <main+0x2bc>
		buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 800092c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000930:	4921      	ldr	r1, [pc, #132]	; (80009b8 <main+0x324>)
 8000932:	4618      	mov	r0, r3
 8000934:	f008 fc22 	bl	800917c <siprintf>
 8000938:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
		HAL_UART_Transmit(&huart3, (uint8_t*) buf, buf_len, 100);
 800093c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000940:	b29a      	uxth	r2, r3
 8000942:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000946:	2364      	movs	r3, #100	; 0x64
 8000948:	481a      	ldr	r0, [pc, #104]	; (80009b4 <main+0x320>)
 800094a:	f004 fb7b 	bl	8005044 <HAL_UART_Transmit>
		while (1)
 800094e:	e7fe      	b.n	800094e <main+0x2ba>
			;
	}

	// Initialize neural network
	if (!ai_sine_model_init(sine_model, &ai_params)) {
 8000950:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000954:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	463a      	mov	r2, r7
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fd82 	bl	8006468 <ai_sine_model_init>
 8000964:	4603      	mov	r3, r0
 8000966:	f083 0301 	eor.w	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d011      	beq.n	8000994 <main+0x300>
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000970:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000974:	4911      	ldr	r1, [pc, #68]	; (80009bc <main+0x328>)
 8000976:	4618      	mov	r0, r3
 8000978:	f008 fc00 	bl	800917c <siprintf>
 800097c:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
		HAL_UART_Transmit(&huart3, (uint8_t*) buf, buf_len, 100);
 8000980:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000984:	b29a      	uxth	r2, r3
 8000986:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <main+0x320>)
 800098e:	f004 fb59 	bl	8005044 <HAL_UART_Transmit>
		while (1)
 8000992:	e7fe      	b.n	8000992 <main+0x2fe>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// Fill input buffer (use test value)
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++) {
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800099a:	e01f      	b.n	80009dc <main+0x348>
 800099c:	01821040 	.word	0x01821040
 80009a0:	0800b4c8 	.word	0x0800b4c8
 80009a4:	e000ed00 	.word	0xe000ed00
 80009a8:	240008b4 	.word	0x240008b4
 80009ac:	24000900 	.word	0x24000900
 80009b0:	0800b400 	.word	0x0800b400
 80009b4:	2400094c 	.word	0x2400094c
 80009b8:	0800b424 	.word	0x0800b424
 80009bc:	0800b44c 	.word	0x0800b44c
			((ai_float*) in_data)[i] = (ai_float) 2.f;
 80009c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80009ca:	4413      	add	r3, r2
 80009cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d0:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++) {
 80009d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80009d6:	3301      	adds	r3, #1
 80009d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80009dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0ed      	beq.n	80009c0 <main+0x32c>
		}

		// Get current timestamp
		timestamp1= htim1.Instance->CNT;
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <main+0x410>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		timestamp = htim16.Instance->CNT;
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <main+0x414>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

		// Perform inference
		batch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 80009f8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80009fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000a06:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f005 fd68 	bl	80064e0 <ai_sine_model_run>
 8000a10:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
		if (batch != 1) {
 8000a14:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d010      	beq.n	8000a3e <main+0x3aa>
			buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000a1c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a20:	4922      	ldr	r1, [pc, #136]	; (8000aac <main+0x418>)
 8000a22:	4618      	mov	r0, r3
 8000a24:	f008 fbaa 	bl	800917c <siprintf>
 8000a28:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
			HAL_UART_Transmit(&huart3, (uint8_t*) buf, buf_len, 100);
 8000a2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000a36:	2364      	movs	r3, #100	; 0x64
 8000a38:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <main+0x41c>)
 8000a3a:	f004 fb03 	bl	8005044 <HAL_UART_Transmit>
		}

		// Read output (predicted y) of neural network
		y_val = ((float*) out_data)[0];
 8000a3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

		// Print output of neural network along with inference time (microseconds)
		buf_len = sprintf(buf, "Prediction: %f | Duration1: %lu |Duration16: %lu\r\n", y_val,
 8000a48:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8000a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				htim1.Instance->CNT - timestamp, htim16.Instance->CNT-timestamp);
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <main+0x410>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		buf_len = sprintf(buf, "Prediction: %f | Duration1: %lu |Duration16: %lu\r\n", y_val,
 8000a56:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000a5a:	1ad3      	subs	r3, r2, r3
				htim1.Instance->CNT - timestamp, htim16.Instance->CNT-timestamp);
 8000a5c:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <main+0x414>)
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	6a51      	ldr	r1, [r2, #36]	; 0x24
		buf_len = sprintf(buf, "Prediction: %f | Duration1: %lu |Duration16: %lu\r\n", y_val,
 8000a62:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a66:	1a8a      	subs	r2, r1, r2
 8000a68:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8000a6c:	9201      	str	r2, [sp, #4]
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	ec53 2b17 	vmov	r2, r3, d7
 8000a74:	490f      	ldr	r1, [pc, #60]	; (8000ab4 <main+0x420>)
 8000a76:	f008 fb81 	bl	800917c <siprintf>
 8000a7a:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
		HAL_UART_Transmit(&huart3, (uint8_t*) buf, buf_len, 100);
 8000a7e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <main+0x41c>)
 8000a8c:	f004 fada 	bl	8005044 <HAL_UART_Transmit>

		// Wait before doing it again
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000a90:	2101      	movs	r1, #1
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <main+0x424>)
 8000a94:	f001 f899 	bl	8001bca <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a9c:	f000 fcc6 	bl	800142c <HAL_Delay>
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++) {
 8000aa0:	e778      	b.n	8000994 <main+0x300>
 8000aa2:	bf00      	nop
 8000aa4:	240008b4 	.word	0x240008b4
 8000aa8:	24000900 	.word	0x24000900
 8000aac:	0800b470 	.word	0x0800b470
 8000ab0:	2400094c 	.word	0x2400094c
 8000ab4:	0800b494 	.word	0x0800b494
 8000ab8:	58020400 	.word	0x58020400

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09e      	sub	sp, #120	; 0x78
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	224c      	movs	r2, #76	; 0x4c
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 fe1c 	bl	8008708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2220      	movs	r2, #32
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f007 fe15 	bl	8008708 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f001 f88e 	bl	8001c00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <SystemClock_Config+0x154>)
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	4a48      	ldr	r2, [pc, #288]	; (8000c10 <SystemClock_Config+0x154>)
 8000aee:	f023 0301 	bic.w	r3, r3, #1
 8000af2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000af4:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <SystemClock_Config+0x154>)
 8000af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <SystemClock_Config+0x158>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a44      	ldr	r2, [pc, #272]	; (8000c14 <SystemClock_Config+0x158>)
 8000b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <SystemClock_Config+0x158>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b16:	bf00      	nop
 8000b18:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <SystemClock_Config+0x158>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b24:	d1f8      	bne.n	8000b18 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b3c      	ldr	r3, [pc, #240]	; (8000c18 <SystemClock_Config+0x15c>)
 8000b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b2c:	4a3a      	ldr	r2, [pc, #232]	; (8000c18 <SystemClock_Config+0x15c>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b36:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <SystemClock_Config+0x15c>)
 8000b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <SystemClock_Config+0x158>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <SystemClock_Config+0x158>)
 8000b4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <SystemClock_Config+0x158>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <SystemClock_Config+0x154>)
 8000b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b62:	4a2b      	ldr	r2, [pc, #172]	; (8000c10 <SystemClock_Config+0x154>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b6a:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <SystemClock_Config+0x154>)
 8000b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b76:	bf00      	nop
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <SystemClock_Config+0x158>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b84:	d1f8      	bne.n	8000b78 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b86:	2301      	movs	r3, #1
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b8a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b90:	2302      	movs	r3, #2
 8000b92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b94:	2302      	movs	r3, #2
 8000b96:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 480;
 8000b9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000ba6:	2314      	movs	r3, #20
 8000ba8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 f858 	bl	8001c74 <HAL_RCC_OscConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000bca:	f000 f9a5 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bce:	233f      	movs	r3, #63	; 0x3f
 8000bd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bde:	2340      	movs	r3, #64	; 0x40
 8000be0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bec:	2340      	movs	r3, #64	; 0x40
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fc96 	bl	8002528 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000c02:	f000 f989 	bl	8000f18 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3778      	adds	r7, #120	; 0x78
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	58000400 	.word	0x58000400
 8000c14:	58024800 	.word	0x58024800
 8000c18:	58024400 	.word	0x58024400

08000c1c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_CRC_Init+0x3c>)
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <MX_CRC_Init+0x40>)
 8000c24:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_CRC_Init+0x3c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_CRC_Init+0x3c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_CRC_Init+0x3c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_CRC_Init+0x3c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_CRC_Init+0x3c>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_CRC_Init+0x3c>)
 8000c46:	f000 fd05 	bl	8001654 <HAL_CRC_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c50:	f000 f962 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000890 	.word	0x24000890
 8000c5c:	58024c00 	.word	0x58024c00

08000c60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000c80:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <MX_TIM1_Init+0xa0>)
 8000c82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000c86:	22ef      	movs	r2, #239	; 0xef
 8000c88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ca8:	4814      	ldr	r0, [pc, #80]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000caa:	f003 fdf5 	bl	8004898 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cb4:	f000 f930 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000cc6:	f003 feaf 	bl	8004a28 <HAL_TIM_ConfigClockSource>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cd0:	f000 f922 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_TIM1_Init+0x9c>)
 8000ce6:	f004 f8cf 	bl	8004e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000cf0:	f000 f912 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	240008b4 	.word	0x240008b4
 8000d00:	40010000 	.word	0x40010000

08000d04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_TIM16_Init+0x44>)
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <MX_TIM16_Init+0x48>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_TIM16_Init+0x44>)
 8000d10:	22ef      	movs	r2, #239	; 0xef
 8000d12:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_TIM16_Init+0x44>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_TIM16_Init+0x44>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_TIM16_Init+0x44>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_TIM16_Init+0x44>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_TIM16_Init+0x44>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_TIM16_Init+0x44>)
 8000d34:	f003 fdb0 	bl	8004898 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000d3e:	f000 f8eb 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000900 	.word	0x24000900
 8000d4c:	40014400 	.word	0x40014400

08000d50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d56:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <MX_USART3_UART_Init+0x94>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d9a:	f004 f903 	bl	8004fa4 <HAL_UART_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000da4:	f000 f8b8 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da8:	2100      	movs	r1, #0
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000dac:	f005 f993 	bl	80060d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000db6:	f000 f8af 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000dbe:	f005 f9c8 	bl	8006152 <HAL_UARTEx_SetRxFifoThreshold>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc8:	f000 f8a6 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000dce:	f005 f949 	bl	8006064 <HAL_UARTEx_DisableFifoMode>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd8:	f000 f89e 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	2400094c 	.word	0x2400094c
 8000de4:	40004800 	.word	0x40004800

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4a40      	ldr	r2, [pc, #256]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b3e      	ldr	r3, [pc, #248]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a39      	ldr	r2, [pc, #228]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	4a2a      	ldr	r2, [pc, #168]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e76:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e86:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e9a:	481c      	ldr	r0, [pc, #112]	; (8000f0c <MX_GPIO_Init+0x124>)
 8000e9c:	f000 fe7c 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	481a      	ldr	r0, [pc, #104]	; (8000f10 <MX_GPIO_Init+0x128>)
 8000ea6:	f000 fe77 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4815      	ldr	r0, [pc, #84]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000ec0:	f000 fcba 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ec4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <MX_GPIO_Init+0x124>)
 8000ede:	f000 fcab 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_GPIO_Init+0x128>)
 8000efa:	f000 fc9d 	bl	8001838 <HAL_GPIO_Init>

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	; 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58021000 	.word	0x58021000
 8000f14:	58020800 	.word	0x58020800

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_MspInit+0x30>)
 8000f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f30:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x30>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x30>)
 8000f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	58024400 	.word	0x58024400

08000f58 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_CRC_MspInit+0x3c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10e      	bne.n	8000f88 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	58024c00 	.word	0x58024c00
 8000f98:	58024400 	.word	0x58024400

08000f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <HAL_TIM_Base_MspInit+0x68>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10f      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fb4:	4a14      	ldr	r2, [pc, #80]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000fcc:	e013      	b.n	8000ff6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM16)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_TIM_Base_MspInit+0x70>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d10e      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_TIM_Base_MspInit+0x6c>)
 8000fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40010000 	.word	0x40010000
 8001008:	58024400 	.word	0x58024400
 800100c:	40014400 	.word	0x40014400

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0ba      	sub	sp, #232	; 0xe8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	22c0      	movs	r2, #192	; 0xc0
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f007 fb69 	bl	8008708 <memset>
  if(huart->Instance==USART3)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <HAL_UART_MspInit+0xc8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d146      	bne.n	80010ce <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001040:	f04f 0202 	mov.w	r2, #2
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fdf2 	bl	8002c40 <HAL_RCCEx_PeriphCLKConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001062:	f7ff ff59 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_UART_MspInit+0xcc>)
 8001068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_UART_MspInit+0xcc>)
 800106e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001072:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_UART_MspInit+0xcc>)
 8001078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800107c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_UART_MspInit+0xcc>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <HAL_UART_MspInit+0xcc>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_UART_MspInit+0xcc>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010bc:	2307      	movs	r3, #7
 80010be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_UART_MspInit+0xd0>)
 80010ca:	f000 fbb5 	bl	8001838 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	37e8      	adds	r7, #232	; 0xe8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004800 	.word	0x40004800
 80010dc:	58024400 	.word	0x58024400
 80010e0:	58020c00 	.word	0x58020c00

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f95c 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f007 fa8e 	bl	8008688 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24080000 	.word	0x24080000
 8001198:	00000800 	.word	0x00000800
 800119c:	240009e0 	.word	0x240009e0
 80011a0:	20000000 	.word	0x20000000

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011a8:	4b37      	ldr	r3, [pc, #220]	; (8001288 <SystemInit+0xe4>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a36      	ldr	r2, [pc, #216]	; (8001288 <SystemInit+0xe4>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <SystemInit+0xe8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	2b06      	cmp	r3, #6
 80011c2:	d807      	bhi.n	80011d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <SystemInit+0xe8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 030f 	bic.w	r3, r3, #15
 80011cc:	4a2f      	ldr	r2, [pc, #188]	; (800128c <SystemInit+0xe8>)
 80011ce:	f043 0307 	orr.w	r3, r3, #7
 80011d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <SystemInit+0xec>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <SystemInit+0xec>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <SystemInit+0xec>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <SystemInit+0xec>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4929      	ldr	r1, [pc, #164]	; (8001290 <SystemInit+0xec>)
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <SystemInit+0xf0>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <SystemInit+0xe8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <SystemInit+0xe8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 030f 	bic.w	r3, r3, #15
 8001206:	4a21      	ldr	r2, [pc, #132]	; (800128c <SystemInit+0xe8>)
 8001208:	f043 0307 	orr.w	r3, r3, #7
 800120c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <SystemInit+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <SystemInit+0xec>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <SystemInit+0xec>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <SystemInit+0xec>)
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <SystemInit+0xf4>)
 8001224:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <SystemInit+0xec>)
 8001228:	4a1c      	ldr	r2, [pc, #112]	; (800129c <SystemInit+0xf8>)
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <SystemInit+0xec>)
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <SystemInit+0xfc>)
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <SystemInit+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <SystemInit+0xec>)
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <SystemInit+0xfc>)
 800123c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <SystemInit+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <SystemInit+0xec>)
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <SystemInit+0xfc>)
 8001248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <SystemInit+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <SystemInit+0xec>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <SystemInit+0xec>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <SystemInit+0xec>)
 800125e:	2200      	movs	r2, #0
 8001260:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <SystemInit+0x100>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <SystemInit+0x104>)
 8001268:	4013      	ands	r3, r2
 800126a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800126e:	d202      	bcs.n	8001276 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <SystemInit+0x108>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <SystemInit+0x10c>)
 8001278:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800127c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00
 800128c:	52002000 	.word	0x52002000
 8001290:	58024400 	.word	0x58024400
 8001294:	eaf6ed7f 	.word	0xeaf6ed7f
 8001298:	02020200 	.word	0x02020200
 800129c:	01ff0000 	.word	0x01ff0000
 80012a0:	01010280 	.word	0x01010280
 80012a4:	5c001000 	.word	0x5c001000
 80012a8:	ffff0000 	.word	0xffff0000
 80012ac:	51008108 	.word	0x51008108
 80012b0:	52004000 	.word	0x52004000

080012b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b8:	f7ff ff74 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	; (8001300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f007 f9d7 	bl	8008694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff f9d5 	bl	8000694 <main>
  bx  lr
 80012ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012f4:	24000874 	.word	0x24000874
  ldr r2, =_sidata
 80012f8:	0800be74 	.word	0x0800be74
  ldr r2, =_sbss
 80012fc:	24000874 	.word	0x24000874
  ldr r4, =_ebss
 8001300:	24000a84 	.word	0x24000a84

08001304 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC3_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130e:	2003      	movs	r0, #3
 8001310:	f000 f96e 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001314:	f001 fabe 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8001318:	4602      	mov	r2, r0
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_Init+0x68>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	4913      	ldr	r1, [pc, #76]	; (8001374 <HAL_Init+0x6c>)
 8001326:	5ccb      	ldrb	r3, [r1, r3]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_Init+0x68>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_Init+0x6c>)
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <HAL_Init+0x70>)
 800134a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_Init+0x74>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f814 	bl	8001380 <HAL_InitTick>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e002      	b.n	8001368 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001362:	f7ff fddf 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	58024400 	.word	0x58024400
 8001374:	0800b508 	.word	0x0800b508
 8001378:	24000004 	.word	0x24000004
 800137c:	24000000 	.word	0x24000000

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_InitTick+0x60>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e021      	b.n	80013d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_InitTick+0x64>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_InitTick+0x60>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f945 	bl	800163a <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f91d 	bl	8001606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_InitTick+0x68>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2400000c 	.word	0x2400000c
 80013e4:	24000000 	.word	0x24000000
 80013e8:	24000008 	.word	0x24000008

080013ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2400000c 	.word	0x2400000c
 8001410:	240009e4 	.word	0x240009e4

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	240009e4 	.word	0x240009e4

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffde 	bl	8001414 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2400000c 	.word	0x2400000c

08001474 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetREVID+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0c1b      	lsrs	r3, r3, #16
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	5c001000 	.word	0x5c001000

0800148c <__NVIC_SetPriorityGrouping>:
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <__NVIC_SetPriorityGrouping+0x40>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x40>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	05fa0000 	.word	0x05fa0000

080014d4 <__NVIC_GetPriorityGrouping>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_SetPriority>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f7ff ff8e 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff47 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff5e 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff90 	bl	8001544 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5f 	bl	80014f0 <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffb2 	bl	80015ac <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e054      	b.n	8001710 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7f5b      	ldrb	r3, [r3, #29]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fc6e 	bl	8000f58 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	791b      	ldrb	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a22      	ldr	r2, [pc, #136]	; (8001718 <HAL_CRC_Init+0xc4>)
 8001690:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0218 	bic.w	r2, r2, #24
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	e00c      	b.n	80016be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6899      	ldr	r1, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	461a      	mov	r2, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f834 	bl	800171c <HAL_CRCEx_Polynomial_Set>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e028      	b.n	8001710 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	795b      	ldrb	r3, [r3, #5]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d105      	bne.n	80016d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	e004      	b.n	80016dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6912      	ldr	r2, [r2, #16]
 80016da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	04c11db7 	.word	0x04c11db7

0800171c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800172c:	231f      	movs	r3, #31
 800172e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
 800173e:	e063      	b.n	8001808 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001740:	bf00      	nop
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	613a      	str	r2, [r7, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d009      	beq.n	8001760 <HAL_CRCEx_Polynomial_Set+0x44>
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b18      	cmp	r3, #24
 8001764:	d846      	bhi.n	80017f4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	080017fb 	.word	0x080017fb
 8001770:	080017f5 	.word	0x080017f5
 8001774:	080017f5 	.word	0x080017f5
 8001778:	080017f5 	.word	0x080017f5
 800177c:	080017f5 	.word	0x080017f5
 8001780:	080017f5 	.word	0x080017f5
 8001784:	080017f5 	.word	0x080017f5
 8001788:	080017f5 	.word	0x080017f5
 800178c:	080017e9 	.word	0x080017e9
 8001790:	080017f5 	.word	0x080017f5
 8001794:	080017f5 	.word	0x080017f5
 8001798:	080017f5 	.word	0x080017f5
 800179c:	080017f5 	.word	0x080017f5
 80017a0:	080017f5 	.word	0x080017f5
 80017a4:	080017f5 	.word	0x080017f5
 80017a8:	080017f5 	.word	0x080017f5
 80017ac:	080017dd 	.word	0x080017dd
 80017b0:	080017f5 	.word	0x080017f5
 80017b4:	080017f5 	.word	0x080017f5
 80017b8:	080017f5 	.word	0x080017f5
 80017bc:	080017f5 	.word	0x080017f5
 80017c0:	080017f5 	.word	0x080017f5
 80017c4:	080017f5 	.word	0x080017f5
 80017c8:	080017f5 	.word	0x080017f5
 80017cc:	080017d1 	.word	0x080017d1
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d913      	bls.n	80017fe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017da:	e010      	b.n	80017fe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b07      	cmp	r3, #7
 80017e0:	d90f      	bls.n	8001802 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017e6:	e00c      	b.n	8001802 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	d90b      	bls.n	8001806 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017f2:	e008      	b.n	8001806 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	75fb      	strb	r3, [r7, #23]
        break;
 80017f8:	e006      	b.n	8001808 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017fa:	bf00      	nop
 80017fc:	e004      	b.n	8001808 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017fe:	bf00      	nop
 8001800:	e002      	b.n	8001808 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001802:	bf00      	nop
 8001804:	e000      	b.n	8001808 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001806:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f023 0118 	bic.w	r1, r3, #24
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	430a      	orrs	r2, r1
 8001828:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800182a:	7dfb      	ldrb	r3, [r7, #23]
}
 800182c:	4618      	mov	r0, r3
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001846:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <HAL_GPIO_Init+0x234>)
 8001848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800184a:	e194      	b.n	8001b76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8186 	beq.w	8001b70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d005      	beq.n	800187c <HAL_GPIO_Init+0x44>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d130      	bne.n	80018de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018b2:	2201      	movs	r2, #1
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	f003 0201 	and.w	r2, r3, #1
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d017      	beq.n	800191a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d123      	bne.n	800196e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	69b9      	ldr	r1, [r7, #24]
 800196a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0203 	and.w	r2, r3, #3
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80e0 	beq.w	8001b70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_GPIO_Init+0x238>)
 80019b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019b6:	4a2e      	ldr	r2, [pc, #184]	; (8001a70 <HAL_GPIO_Init+0x238>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_GPIO_Init+0x238>)
 80019c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ce:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <HAL_GPIO_Init+0x23c>)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <HAL_GPIO_Init+0x240>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d052      	beq.n	8001aa0 <HAL_GPIO_Init+0x268>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <HAL_GPIO_Init+0x244>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_GPIO_Init+0x22e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <HAL_GPIO_Init+0x248>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d02b      	beq.n	8001a62 <HAL_GPIO_Init+0x22a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x24c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d025      	beq.n	8001a5e <HAL_GPIO_Init+0x226>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <HAL_GPIO_Init+0x250>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <HAL_GPIO_Init+0x222>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_GPIO_Init+0x254>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_GPIO_Init+0x21e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <HAL_GPIO_Init+0x258>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x21a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_GPIO_Init+0x25c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x216>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_GPIO_Init+0x260>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x212>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_GPIO_Init+0x264>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x20e>
 8001a42:	2309      	movs	r3, #9
 8001a44:	e02d      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a46:	230a      	movs	r3, #10
 8001a48:	e02b      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	e029      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e027      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e025      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e023      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e021      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e01f      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e01d      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e01b      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a6a:	bf00      	nop
 8001a6c:	58000080 	.word	0x58000080
 8001a70:	58024400 	.word	0x58024400
 8001a74:	58000400 	.word	0x58000400
 8001a78:	58020000 	.word	0x58020000
 8001a7c:	58020400 	.word	0x58020400
 8001a80:	58020800 	.word	0x58020800
 8001a84:	58020c00 	.word	0x58020c00
 8001a88:	58021000 	.word	0x58021000
 8001a8c:	58021400 	.word	0x58021400
 8001a90:	58021800 	.word	0x58021800
 8001a94:	58021c00 	.word	0x58021c00
 8001a98:	58022000 	.word	0x58022000
 8001a9c:	58022400 	.word	0x58022400
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab2:	4938      	ldr	r1, [pc, #224]	; (8001b94 <HAL_GPIO_Init+0x35c>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f47f ae63 	bne.w	800184c <HAL_GPIO_Init+0x14>
  }
}
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
 8001b8a:	3724      	adds	r7, #36	; 0x24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	58000400 	.word	0x58000400

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bdc:	887a      	ldrh	r2, [r7, #2]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4013      	ands	r3, r2
 8001be2:	041a      	lsls	r2, r3, #16
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	400b      	ands	r3, r1
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_PWREx_ConfigSupply+0x70>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00a      	beq.n	8001c2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_PWREx_ConfigSupply+0x70>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e01f      	b.n	8001c66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e01d      	b.n	8001c66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_PWREx_ConfigSupply+0x70>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	490f      	ldr	r1, [pc, #60]	; (8001c70 <HAL_PWREx_ConfigSupply+0x70>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c3a:	f7ff fbeb 	bl	8001414 <HAL_GetTick>
 8001c3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c40:	e009      	b.n	8001c56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c42:	f7ff fbe7 	bl	8001414 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c50:	d901      	bls.n	8001c56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e007      	b.n	8001c66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_PWREx_ConfigSupply+0x70>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c62:	d1ee      	bne.n	8001c42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	58024800 	.word	0x58024800

08001c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f000 bc48 	b.w	8002518 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8088 	beq.w	8001da6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4b99      	ldr	r3, [pc, #612]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ca0:	4b96      	ldr	r3, [pc, #600]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	d007      	beq.n	8001cbc <HAL_RCC_OscConfig+0x48>
 8001cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cae:	2b18      	cmp	r3, #24
 8001cb0:	d111      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x62>
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	4b8f      	ldr	r3, [pc, #572]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d06d      	beq.n	8001da4 <HAL_RCC_OscConfig+0x130>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d169      	bne.n	8001da4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f000 bc21 	b.w	8002518 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x7a>
 8001ce0:	4b86      	ldr	r3, [pc, #536]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a85      	ldr	r2, [pc, #532]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e02e      	b.n	8001d4c <HAL_RCC_OscConfig+0xd8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x9c>
 8001cf6:	4b81      	ldr	r3, [pc, #516]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a80      	ldr	r2, [pc, #512]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b7e      	ldr	r3, [pc, #504]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7d      	ldr	r2, [pc, #500]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xd8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0xc0>
 8001d1a:	4b78      	ldr	r3, [pc, #480]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a77      	ldr	r2, [pc, #476]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b75      	ldr	r3, [pc, #468]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a74      	ldr	r2, [pc, #464]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xd8>
 8001d34:	4b71      	ldr	r3, [pc, #452]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a70      	ldr	r2, [pc, #448]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a6d      	ldr	r2, [pc, #436]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fb5e 	bl	8001414 <HAL_GetTick>
 8001d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fb5a 	bl	8001414 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e3d4      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d6e:	4b63      	ldr	r3, [pc, #396]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xe8>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fb4a 	bl	8001414 <HAL_GetTick>
 8001d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fb46 	bl	8001414 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e3c0      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d96:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x110>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80ca 	beq.w	8001f48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db4:	4b51      	ldr	r3, [pc, #324]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dbe:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_RCC_OscConfig+0x166>
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	2b18      	cmp	r3, #24
 8001dce:	d156      	bne.n	8001e7e <HAL_RCC_OscConfig+0x20a>
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d151      	bne.n	8001e7e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dda:	4b48      	ldr	r3, [pc, #288]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x17e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e392      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001df2:	4b42      	ldr	r3, [pc, #264]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0219 	bic.w	r2, r3, #25
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	493f      	ldr	r1, [pc, #252]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb06 	bl	8001414 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fb02 	bl	8001414 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e37c      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e1e:	4b37      	ldr	r3, [pc, #220]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	f7ff fb23 	bl	8001474 <HAL_GetREVID>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d817      	bhi.n	8001e68 <HAL_RCC_OscConfig+0x1f4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	2b40      	cmp	r3, #64	; 0x40
 8001e3e:	d108      	bne.n	8001e52 <HAL_RCC_OscConfig+0x1de>
 8001e40:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e48:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e50:	e07a      	b.n	8001f48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	031b      	lsls	r3, r3, #12
 8001e60:	4926      	ldr	r1, [pc, #152]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e66:	e06f      	b.n	8001f48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	4921      	ldr	r1, [pc, #132]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7c:	e064      	b.n	8001f48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d047      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0219 	bic.w	r2, r3, #25
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	491a      	ldr	r1, [pc, #104]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff fabc 	bl	8001414 <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fab8 	bl	8001414 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e332      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	f7ff fad9 	bl	8001474 <HAL_GetREVID>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d819      	bhi.n	8001f00 <HAL_RCC_OscConfig+0x28c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	2b40      	cmp	r3, #64	; 0x40
 8001ed2:	d108      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x272>
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee2:	6053      	str	r3, [r2, #4]
 8001ee4:	e030      	b.n	8001f48 <HAL_RCC_OscConfig+0x2d4>
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	031b      	lsls	r3, r3, #12
 8001ef4:	4901      	ldr	r1, [pc, #4]	; (8001efc <HAL_RCC_OscConfig+0x288>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
 8001efa:	e025      	b.n	8001f48 <HAL_RCC_OscConfig+0x2d4>
 8001efc:	58024400 	.word	0x58024400
 8001f00:	4b9a      	ldr	r3, [pc, #616]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	061b      	lsls	r3, r3, #24
 8001f0e:	4997      	ldr	r1, [pc, #604]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	e018      	b.n	8001f48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b95      	ldr	r3, [pc, #596]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a94      	ldr	r2, [pc, #592]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa77 	bl	8001414 <HAL_GetTick>
 8001f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fa73 	bl	8001414 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e2ed      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f3c:	4b8b      	ldr	r3, [pc, #556]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a9 	beq.w	80020a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4b85      	ldr	r3, [pc, #532]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f60:	4b82      	ldr	r3, [pc, #520]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d007      	beq.n	8001f7c <HAL_RCC_OscConfig+0x308>
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b18      	cmp	r3, #24
 8001f70:	d13a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x374>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d135      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_OscConfig+0x320>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e2c1      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f94:	f7ff fa6e 	bl	8001474 <HAL_GetREVID>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d817      	bhi.n	8001fd2 <HAL_RCC_OscConfig+0x35e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_OscConfig+0x348>
 8001faa:	4b70      	ldr	r3, [pc, #448]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fb2:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fb8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fba:	e075      	b.n	80020a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fbc:	4b6b      	ldr	r3, [pc, #428]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	069b      	lsls	r3, r3, #26
 8001fca:	4968      	ldr	r1, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fd0:	e06a      	b.n	80020a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fd2:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	061b      	lsls	r3, r3, #24
 8001fe0:	4962      	ldr	r1, [pc, #392]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fe6:	e05f      	b.n	80020a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d042      	beq.n	8002076 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ff0:	4b5e      	ldr	r3, [pc, #376]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a5d      	ldr	r2, [pc, #372]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fa0a 	bl	8001414 <HAL_GetTick>
 8002000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002004:	f7ff fa06 	bl	8001414 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e280      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002016:	4b55      	ldr	r3, [pc, #340]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002022:	f7ff fa27 	bl	8001474 <HAL_GetREVID>
 8002026:	4603      	mov	r3, r0
 8002028:	f241 0203 	movw	r2, #4099	; 0x1003
 800202c:	4293      	cmp	r3, r2
 800202e:	d817      	bhi.n	8002060 <HAL_RCC_OscConfig+0x3ec>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	2b20      	cmp	r3, #32
 8002036:	d108      	bne.n	800204a <HAL_RCC_OscConfig+0x3d6>
 8002038:	4b4c      	ldr	r3, [pc, #304]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002040:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8002042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002046:	6053      	str	r3, [r2, #4]
 8002048:	e02e      	b.n	80020a8 <HAL_RCC_OscConfig+0x434>
 800204a:	4b48      	ldr	r3, [pc, #288]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	069b      	lsls	r3, r3, #26
 8002058:	4944      	ldr	r1, [pc, #272]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
 800205e:	e023      	b.n	80020a8 <HAL_RCC_OscConfig+0x434>
 8002060:	4b42      	ldr	r3, [pc, #264]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	493f      	ldr	r1, [pc, #252]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8002070:	4313      	orrs	r3, r2
 8002072:	60cb      	str	r3, [r1, #12]
 8002074:	e018      	b.n	80020a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a3c      	ldr	r2, [pc, #240]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 800207c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7ff f9c7 	bl	8001414 <HAL_GetTick>
 8002086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800208a:	f7ff f9c3 	bl	8001414 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e23d      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d036      	beq.n	8002122 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d019      	beq.n	80020f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 80020be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c0:	4a2a      	ldr	r2, [pc, #168]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff f9a4 	bl	8001414 <HAL_GetTick>
 80020cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff f9a0 	bl	8001414 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e21a      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x45c>
 80020ee:	e018      	b.n	8002122 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7ff f98a 	bl	8001414 <HAL_GetTick>
 8002100:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002104:	f7ff f986 	bl	8001414 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e200      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8002118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d039      	beq.n	80021a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d01c      	beq.n	8002170 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 800213c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002140:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002142:	f7ff f967 	bl	8001414 <HAL_GetTick>
 8002146:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214a:	f7ff f963 	bl	8001414 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1dd      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x4d6>
 8002168:	e01b      	b.n	80021a2 <HAL_RCC_OscConfig+0x52e>
 800216a:	bf00      	nop
 800216c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002170:	4b9b      	ldr	r3, [pc, #620]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a9a      	ldr	r2, [pc, #616]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800217a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800217c:	f7ff f94a 	bl	8001414 <HAL_GetTick>
 8002180:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002184:	f7ff f946 	bl	8001414 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1c0      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002196:	4b92      	ldr	r3, [pc, #584]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8081 	beq.w	80022b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021b0:	4b8c      	ldr	r3, [pc, #560]	; (80023e4 <HAL_RCC_OscConfig+0x770>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a8b      	ldr	r2, [pc, #556]	; (80023e4 <HAL_RCC_OscConfig+0x770>)
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021bc:	f7ff f92a 	bl	8001414 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7ff f926 	bl	8001414 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1a0      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d6:	4b83      	ldr	r3, [pc, #524]	; (80023e4 <HAL_RCC_OscConfig+0x770>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x584>
 80021ea:	4b7d      	ldr	r3, [pc, #500]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a7c      	ldr	r2, [pc, #496]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
 80021f6:	e02d      	b.n	8002254 <HAL_RCC_OscConfig+0x5e0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10c      	bne.n	800221a <HAL_RCC_OscConfig+0x5a6>
 8002200:	4b77      	ldr	r3, [pc, #476]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a76      	ldr	r2, [pc, #472]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	4b74      	ldr	r3, [pc, #464]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a73      	ldr	r2, [pc, #460]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002212:	f023 0304 	bic.w	r3, r3, #4
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	e01c      	b.n	8002254 <HAL_RCC_OscConfig+0x5e0>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x5c8>
 8002222:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	4a6e      	ldr	r2, [pc, #440]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	6713      	str	r3, [r2, #112]	; 0x70
 800222e:	4b6c      	ldr	r3, [pc, #432]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a6b      	ldr	r2, [pc, #428]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0x5e0>
 800223c:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a67      	ldr	r2, [pc, #412]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224c:	4a64      	ldr	r2, [pc, #400]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 800224e:	f023 0304 	bic.w	r3, r3, #4
 8002252:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d015      	beq.n	8002288 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7ff f8da 	bl	8001414 <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002262:	e00a      	b.n	800227a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7ff f8d6 	bl	8001414 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e14e      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800227a:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0ee      	beq.n	8002264 <HAL_RCC_OscConfig+0x5f0>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7ff f8c4 	bl	8001414 <HAL_GetTick>
 800228c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002290:	f7ff f8c0 	bl	8001414 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	; 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e138      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022a6:	4b4e      	ldr	r3, [pc, #312]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ee      	bne.n	8002290 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 812d 	beq.w	8002516 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022bc:	4b48      	ldr	r3, [pc, #288]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022c4:	2b18      	cmp	r3, #24
 80022c6:	f000 80bd 	beq.w	8002444 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	f040 809e 	bne.w	8002410 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b42      	ldr	r3, [pc, #264]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a41      	ldr	r2, [pc, #260]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80022da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff f898 	bl	8001414 <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff f894 	bl	8001414 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e10e      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_OscConfig+0x774>)
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	430a      	orrs	r2, r1
 800231a:	4931      	ldr	r1, [pc, #196]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 800231c:	4313      	orrs	r3, r2
 800231e:	628b      	str	r3, [r1, #40]	; 0x28
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	3b01      	subs	r3, #1
 8002326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	3b01      	subs	r3, #1
 8002330:	025b      	lsls	r3, r3, #9
 8002332:	b29b      	uxth	r3, r3
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	3b01      	subs	r3, #1
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	3b01      	subs	r3, #1
 800234a:	061b      	lsls	r3, r3, #24
 800234c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002350:	4923      	ldr	r1, [pc, #140]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002352:	4313      	orrs	r3, r2
 8002354:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_RCC_OscConfig+0x778>)
 8002368:	4013      	ands	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800236e:	00d2      	lsls	r2, r2, #3
 8002370:	491b      	ldr	r1, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002372:	4313      	orrs	r3, r2
 8002374:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f023 020c 	bic.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4917      	ldr	r1, [pc, #92]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f023 0202 	bic.w	r2, r3, #2
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	4912      	ldr	r1, [pc, #72]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_RCC_OscConfig+0x76c>)
 80023d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7ff f81d 	bl	8001414 <HAL_GetTick>
 80023da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023dc:	e011      	b.n	8002402 <HAL_RCC_OscConfig+0x78e>
 80023de:	bf00      	nop
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58024800 	.word	0x58024800
 80023e8:	fffffc0c 	.word	0xfffffc0c
 80023ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff f810 	bl	8001414 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e08a      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x77c>
 800240e:	e082      	b.n	8002516 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a42      	ldr	r2, [pc, #264]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 8002416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800241a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fffa 	bl	8001414 <HAL_GetTick>
 8002420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe fff6 	bl	8001414 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e070      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x7b0>
 8002442:	e068      	b.n	8002516 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002444:	4b36      	ldr	r3, [pc, #216]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800244a:	4b35      	ldr	r3, [pc, #212]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	2b01      	cmp	r3, #1
 8002456:	d031      	beq.n	80024bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d12a      	bne.n	80024bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d122      	bne.n	80024bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d11a      	bne.n	80024bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	0a5b      	lsrs	r3, r3, #9
 800248a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d111      	bne.n	80024bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d108      	bne.n	80024bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	0e1b      	lsrs	r3, r3, #24
 80024ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e02b      	b.n	8002518 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	08db      	lsrs	r3, r3, #3
 80024c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d01f      	beq.n	8002516 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	4a11      	ldr	r2, [pc, #68]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024e2:	f7fe ff97 	bl	8001414 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80024e8:	bf00      	nop
 80024ea:	f7fe ff93 	bl	8001414 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d0f9      	beq.n	80024ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 80024f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_RCC_OscConfig+0x8b0>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002502:	00d2      	lsls	r2, r2, #3
 8002504:	4906      	ldr	r1, [pc, #24]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 8002506:	4313      	orrs	r3, r2
 8002508:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_RCC_OscConfig+0x8ac>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3730      	adds	r7, #48	; 0x30
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	58024400 	.word	0x58024400
 8002524:	ffff0007 	.word	0xffff0007

08002528 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e19c      	b.n	8002876 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b8a      	ldr	r3, [pc, #552]	; (8002768 <HAL_RCC_ClockConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d910      	bls.n	800256c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b87      	ldr	r3, [pc, #540]	; (8002768 <HAL_RCC_ClockConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 020f 	bic.w	r2, r3, #15
 8002552:	4985      	ldr	r1, [pc, #532]	; (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b83      	ldr	r3, [pc, #524]	; (8002768 <HAL_RCC_ClockConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e184      	b.n	8002876 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	4b7b      	ldr	r3, [pc, #492]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002584:	429a      	cmp	r2, r3
 8002586:	d908      	bls.n	800259a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002588:	4b78      	ldr	r3, [pc, #480]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	4975      	ldr	r1, [pc, #468]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002596:	4313      	orrs	r3, r2
 8002598:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d010      	beq.n	80025c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	4b70      	ldr	r3, [pc, #448]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d908      	bls.n	80025c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025b6:	4b6d      	ldr	r3, [pc, #436]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	496a      	ldr	r1, [pc, #424]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d010      	beq.n	80025f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	4b64      	ldr	r3, [pc, #400]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d908      	bls.n	80025f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025e4:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	495e      	ldr	r1, [pc, #376]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d010      	beq.n	8002624 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800260e:	429a      	cmp	r2, r3
 8002610:	d908      	bls.n	8002624 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002612:	4b56      	ldr	r3, [pc, #344]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4953      	ldr	r1, [pc, #332]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002620:	4313      	orrs	r3, r2
 8002622:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d010      	beq.n	8002652 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b4d      	ldr	r3, [pc, #308]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	429a      	cmp	r2, r3
 800263e:	d908      	bls.n	8002652 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b4a      	ldr	r3, [pc, #296]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f023 020f 	bic.w	r2, r3, #15
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4947      	ldr	r1, [pc, #284]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 800264e:	4313      	orrs	r3, r2
 8002650:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d055      	beq.n	800270a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800265e:	4b43      	ldr	r3, [pc, #268]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4940      	ldr	r1, [pc, #256]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 800266c:	4313      	orrs	r3, r2
 800266e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d107      	bne.n	8002688 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002678:	4b3c      	ldr	r3, [pc, #240]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d121      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0f6      	b.n	8002876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d115      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0ea      	b.n	8002876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0de      	b.n	8002876 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b8:	4b2c      	ldr	r3, [pc, #176]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d6      	b.n	8002876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c8:	4b28      	ldr	r3, [pc, #160]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f023 0207 	bic.w	r2, r3, #7
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4925      	ldr	r1, [pc, #148]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026da:	f7fe fe9b 	bl	8001414 <HAL_GetTick>
 80026de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e2:	f7fe fe97 	bl	8001414 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0be      	b.n	8002876 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	429a      	cmp	r2, r3
 8002708:	d1eb      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d010      	beq.n	8002738 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	429a      	cmp	r2, r3
 8002724:	d208      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f023 020f 	bic.w	r2, r3, #15
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	490e      	ldr	r1, [pc, #56]	; (800276c <HAL_RCC_ClockConfig+0x244>)
 8002734:	4313      	orrs	r3, r2
 8002736:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d214      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 020f 	bic.w	r2, r3, #15
 800274e:	4906      	ldr	r1, [pc, #24]	; (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e086      	b.n	8002876 <HAL_RCC_ClockConfig+0x34e>
 8002768:	52002000 	.word	0x52002000
 800276c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d010      	beq.n	800279e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002788:	429a      	cmp	r2, r3
 800278a:	d208      	bcs.n	800279e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	4939      	ldr	r1, [pc, #228]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 800279a:	4313      	orrs	r3, r2
 800279c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d010      	beq.n	80027cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d208      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	492e      	ldr	r1, [pc, #184]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d010      	beq.n	80027fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d208      	bcs.n	80027fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4922      	ldr	r1, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d010      	beq.n	8002828 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002812:	429a      	cmp	r2, r3
 8002814:	d208      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	4917      	ldr	r1, [pc, #92]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 8002824:	4313      	orrs	r3, r2
 8002826:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002828:	f000 f834 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	4912      	ldr	r1, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x35c>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
 8002844:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x358>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_RCC_ClockConfig+0x35c>)
 8002850:	5cd3      	ldrb	r3, [r2, r3]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x360>)
 800285e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x364>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x368>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fd88 	bl	8001380 <HAL_InitTick>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	58024400 	.word	0x58024400
 8002884:	0800b508 	.word	0x0800b508
 8002888:	24000004 	.word	0x24000004
 800288c:	24000000 	.word	0x24000000
 8002890:	24000008 	.word	0x24000008

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800289a:	4bb3      	ldr	r3, [pc, #716]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028a2:	2b18      	cmp	r3, #24
 80028a4:	f200 8155 	bhi.w	8002b52 <HAL_RCC_GetSysClockFreq+0x2be>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	08002915 	.word	0x08002915
 80028b4:	08002b53 	.word	0x08002b53
 80028b8:	08002b53 	.word	0x08002b53
 80028bc:	08002b53 	.word	0x08002b53
 80028c0:	08002b53 	.word	0x08002b53
 80028c4:	08002b53 	.word	0x08002b53
 80028c8:	08002b53 	.word	0x08002b53
 80028cc:	08002b53 	.word	0x08002b53
 80028d0:	0800293b 	.word	0x0800293b
 80028d4:	08002b53 	.word	0x08002b53
 80028d8:	08002b53 	.word	0x08002b53
 80028dc:	08002b53 	.word	0x08002b53
 80028e0:	08002b53 	.word	0x08002b53
 80028e4:	08002b53 	.word	0x08002b53
 80028e8:	08002b53 	.word	0x08002b53
 80028ec:	08002b53 	.word	0x08002b53
 80028f0:	08002941 	.word	0x08002941
 80028f4:	08002b53 	.word	0x08002b53
 80028f8:	08002b53 	.word	0x08002b53
 80028fc:	08002b53 	.word	0x08002b53
 8002900:	08002b53 	.word	0x08002b53
 8002904:	08002b53 	.word	0x08002b53
 8002908:	08002b53 	.word	0x08002b53
 800290c:	08002b53 	.word	0x08002b53
 8002910:	08002947 	.word	0x08002947
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002914:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002920:	4b91      	ldr	r3, [pc, #580]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	4a90      	ldr	r2, [pc, #576]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
 8002930:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002932:	e111      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002934:	4b8d      	ldr	r3, [pc, #564]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002936:	61bb      	str	r3, [r7, #24]
      break;
 8002938:	e10e      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800293a:	4b8d      	ldr	r3, [pc, #564]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800293c:	61bb      	str	r3, [r7, #24]
      break;
 800293e:	e10b      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002940:	4b8c      	ldr	r3, [pc, #560]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002942:	61bb      	str	r3, [r7, #24]
      break;
 8002944:	e108      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002946:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002950:	4b85      	ldr	r3, [pc, #532]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800295a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800295c:	4b82      	ldr	r3, [pc, #520]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002966:	4b80      	ldr	r3, [pc, #512]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	08db      	lsrs	r3, r3, #3
 800296c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80e1 	beq.w	8002b4c <HAL_RCC_GetSysClockFreq+0x2b8>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b02      	cmp	r3, #2
 800298e:	f000 8083 	beq.w	8002a98 <HAL_RCC_GetSysClockFreq+0x204>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b02      	cmp	r3, #2
 8002996:	f200 80a1 	bhi.w	8002adc <HAL_RCC_GetSysClockFreq+0x248>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x114>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d056      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029a6:	e099      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029a8:	4b6f      	ldr	r3, [pc, #444]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d02d      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029b4:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	08db      	lsrs	r3, r3, #3
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	4a6b      	ldr	r2, [pc, #428]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
 80029c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029de:	4b62      	ldr	r3, [pc, #392]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80029f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a0e:	e087      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a22:	4b51      	ldr	r3, [pc, #324]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a52:	e065      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a66:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a96:	e043      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aaa:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002abe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ada:	e021      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	0a5b      	lsrs	r3, r3, #9
 8002b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b44:	ee17 3a90 	vmov	r3, s15
 8002b48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b4a:	e005      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
      break;
 8002b50:	e002      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b54:	61bb      	str	r3, [r7, #24]
      break;
 8002b56:	bf00      	nop
  }

  return sysclockfreq;
 8002b58:	69bb      	ldr	r3, [r7, #24]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	03d09000 	.word	0x03d09000
 8002b70:	003d0900 	.word	0x003d0900
 8002b74:	007a1200 	.word	0x007a1200
 8002b78:	46000000 	.word	0x46000000
 8002b7c:	4c742400 	.word	0x4c742400
 8002b80:	4a742400 	.word	0x4a742400
 8002b84:	4af42400 	.word	0x4af42400

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b8e:	f7ff fe81 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	490f      	ldr	r1, [pc, #60]	; (8002bdc <HAL_RCC_GetHCLKFreq+0x54>)
 8002ba0:	5ccb      	ldrb	r3, [r1, r3]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_RCC_GetHCLKFreq+0x54>)
 8002bb6:	5cd3      	ldrb	r3, [r2, r3]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc2:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002bc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	0800b508 	.word	0x0800b508
 8002be0:	24000004 	.word	0x24000004
 8002be4:	24000000 	.word	0x24000000

08002be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002bec:	f7ff ffcc 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4904      	ldr	r1, [pc, #16]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	0800b508 	.word	0x0800b508

08002c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c18:	f7ff ffb6 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4904      	ldr	r1, [pc, #16]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	58024400 	.word	0x58024400
 8002c3c:	0800b508 	.word	0x0800b508

08002c40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b0ca      	sub	sp, #296	; 0x128
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002c64:	2500      	movs	r5, #0
 8002c66:	ea54 0305 	orrs.w	r3, r4, r5
 8002c6a:	d049      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c76:	d02f      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c7c:	d828      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c82:	d01a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c88:	d822      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c92:	d007      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c94:	e01c      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c96:	4bb8      	ldr	r3, [pc, #736]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	4ab7      	ldr	r2, [pc, #732]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ca2:	e01a      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ca8:	3308      	adds	r3, #8
 8002caa:	2102      	movs	r1, #2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 fc8f 	bl	80045d0 <RCCEx_PLL2_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cb8:	e00f      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cbe:	3328      	adds	r3, #40	; 0x28
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 fd36 	bl	8004734 <RCCEx_PLL3_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cce:	e004      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cd6:	e000      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ce2:	4ba5      	ldr	r3, [pc, #660]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf0:	4aa1      	ldr	r2, [pc, #644]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	6513      	str	r3, [r2, #80]	; 0x50
 8002cf6:	e003      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002d0c:	f04f 0900 	mov.w	r9, #0
 8002d10:	ea58 0309 	orrs.w	r3, r8, r9
 8002d14:	d047      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d82a      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d20:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d3d 	.word	0x08002d3d
 8002d2c:	08002d4b 	.word	0x08002d4b
 8002d30:	08002d61 	.word	0x08002d61
 8002d34:	08002d7f 	.word	0x08002d7f
 8002d38:	08002d7f 	.word	0x08002d7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d3c:	4b8e      	ldr	r3, [pc, #568]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	4a8d      	ldr	r2, [pc, #564]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d48:	e01a      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d4e:	3308      	adds	r3, #8
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fc3c 	bl	80045d0 <RCCEx_PLL2_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d5e:	e00f      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d64:	3328      	adds	r3, #40	; 0x28
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 fce3 	bl	8004734 <RCCEx_PLL3_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d74:	e004      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d7c:	e000      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d88:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8c:	f023 0107 	bic.w	r1, r3, #7
 8002d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	4a78      	ldr	r2, [pc, #480]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6513      	str	r3, [r2, #80]	; 0x50
 8002d9c:	e003      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002da2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002db2:	f04f 0b00 	mov.w	fp, #0
 8002db6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002dba:	d04c      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc6:	d030      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dcc:	d829      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dce:	2bc0      	cmp	r3, #192	; 0xc0
 8002dd0:	d02d      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8002dd4:	d825      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dd6:	2b80      	cmp	r3, #128	; 0x80
 8002dd8:	d018      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	d821      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d007      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002de6:	e01c      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de8:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	4a62      	ldr	r2, [pc, #392]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002df4:	e01c      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dfa:	3308      	adds	r3, #8
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f001 fbe6 	bl	80045d0 <RCCEx_PLL2_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e0a:	e011      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e10:	3328      	adds	r3, #40	; 0x28
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 fc8d 	bl	8004734 <RCCEx_PLL3_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e20:	e006      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e28:	e002      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e38:	4b4f      	ldr	r3, [pc, #316]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	4a4c      	ldr	r2, [pc, #304]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6513      	str	r3, [r2, #80]	; 0x50
 8002e4c:	e003      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002e6c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002e70:	460b      	mov	r3, r1
 8002e72:	4313      	orrs	r3, r2
 8002e74:	d053      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e82:	d035      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002e84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e88:	d82e      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e8e:	d031      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002e90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e94:	d828      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9a:	d01a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea0:	d822      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eaa:	d007      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002eac:	e01c      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eae:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002eba:	e01c      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 fb83 	bl	80045d0 <RCCEx_PLL2_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ed0:	e011      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ed6:	3328      	adds	r3, #40	; 0x28
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 fc2a 	bl	8004734 <RCCEx_PLL3_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ee6:	e006      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ef0:	bf00      	nop
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6593      	str	r3, [r2, #88]	; 0x58
 8002f14:	e003      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002f2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f34:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	d056      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f4a:	d038      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f50:	d831      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f56:	d034      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f5c:	d82b      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f62:	d01d      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f68:	d825      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d006      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002f6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002f74:	e01f      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f76:	bf00      	nop
 8002f78:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f7c:	4ba2      	ldr	r3, [pc, #648]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	4aa1      	ldr	r2, [pc, #644]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f8e:	3308      	adds	r3, #8
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f001 fb1c 	bl	80045d0 <RCCEx_PLL2_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f9e:	e011      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa4:	3328      	adds	r3, #40	; 0x28
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 fbc3 	bl	8004734 <RCCEx_PLL3_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fb4:	e006      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fbc:	e002      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fbe:	bf00      	nop
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002fcc:	4b8e      	ldr	r3, [pc, #568]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fdc:	4a8a      	ldr	r2, [pc, #552]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe2:	e003      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fe8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003002:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003006:	460b      	mov	r3, r1
 8003008:	4313      	orrs	r3, r2
 800300a:	d03a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800300c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	2b30      	cmp	r3, #48	; 0x30
 8003014:	d01f      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003016:	2b30      	cmp	r3, #48	; 0x30
 8003018:	d819      	bhi.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800301a:	2b20      	cmp	r3, #32
 800301c:	d00c      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800301e:	2b20      	cmp	r3, #32
 8003020:	d815      	bhi.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003022:	2b00      	cmp	r3, #0
 8003024:	d019      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003026:	2b10      	cmp	r3, #16
 8003028:	d111      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302a:	4b77      	ldr	r3, [pc, #476]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	4a76      	ldr	r2, [pc, #472]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003036:	e011      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800303c:	3308      	adds	r3, #8
 800303e:	2102      	movs	r1, #2
 8003040:	4618      	mov	r0, r3
 8003042:	f001 fac5 	bl	80045d0 <RCCEx_PLL2_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800304c:	e006      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003054:	e002      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800305a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003068:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800306c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	4a65      	ldr	r2, [pc, #404]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003074:	430b      	orrs	r3, r1
 8003076:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003078:	e003      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800307e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800308e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003098:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800309c:	460b      	mov	r3, r1
 800309e:	4313      	orrs	r3, r2
 80030a0:	d051      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80030a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ac:	d035      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80030ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b2:	d82e      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030b8:	d031      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80030ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030be:	d828      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c4:	d01a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ca:	d822      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d4:	d007      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80030d6:	e01c      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030d8:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	4a4a      	ldr	r2, [pc, #296]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030e4:	e01c      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ea:	3308      	adds	r3, #8
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 fa6e 	bl	80045d0 <RCCEx_PLL2_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030fa:	e011      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003100:	3328      	adds	r3, #40	; 0x28
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f001 fb15 	bl	8004734 <RCCEx_PLL3_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003110:	e006      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003118:	e002      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800311e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003128:	4b37      	ldr	r3, [pc, #220]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003136:	4a34      	ldr	r2, [pc, #208]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003138:	430b      	orrs	r3, r1
 800313a:	6513      	str	r3, [r2, #80]	; 0x50
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003142:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003152:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800315c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003160:	460b      	mov	r3, r1
 8003162:	4313      	orrs	r3, r2
 8003164:	d056      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800316a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003170:	d033      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003176:	d82c      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003178:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800317c:	d02f      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800317e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003182:	d826      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003184:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003188:	d02b      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800318a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800318e:	d820      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003194:	d012      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800319a:	d81a      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d022      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a4:	d115      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031aa:	3308      	adds	r3, #8
 80031ac:	2101      	movs	r1, #1
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 fa0e 	bl	80045d0 <RCCEx_PLL2_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031ba:	e015      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c0:	3328      	adds	r3, #40	; 0x28
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 fab5 	bl	8004734 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031d0:	e00a      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031d8:	e006      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031da:	bf00      	nop
 80031dc:	e004      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031de:	bf00      	nop
 80031e0:	e002      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031e2:	bf00      	nop
 80031e4:	e000      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10d      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80031f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fe:	4a02      	ldr	r2, [pc, #8]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003200:	430b      	orrs	r3, r1
 8003202:	6513      	str	r3, [r2, #80]	; 0x50
 8003204:	e006      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003206:	bf00      	nop
 8003208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800322a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800322e:	460b      	mov	r3, r1
 8003230:	4313      	orrs	r3, r2
 8003232:	d055      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003238:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800323c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003240:	d033      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003246:	d82c      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d02f      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d826      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003254:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003258:	d02b      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800325a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800325e:	d820      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003264:	d012      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326a:	d81a      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d022      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003274:	d115      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800327a:	3308      	adds	r3, #8
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f001 f9a6 	bl	80045d0 <RCCEx_PLL2_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800328a:	e015      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003290:	3328      	adds	r3, #40	; 0x28
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fa4d 	bl	8004734 <RCCEx_PLL3_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032a0:	e00a      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032a8:	e006      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10b      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80032c0:	4ba3      	ldr	r3, [pc, #652]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80032c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032d0:	4a9f      	ldr	r2, [pc, #636]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032d2:	430b      	orrs	r3, r1
 80032d4:	6593      	str	r3, [r2, #88]	; 0x58
 80032d6:	e003      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80032ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80032f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032fa:	460b      	mov	r3, r1
 80032fc:	4313      	orrs	r3, r2
 80032fe:	d037      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800330a:	d00e      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800330c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003310:	d816      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d018      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800331a:	d111      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800331c:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	4a8b      	ldr	r2, [pc, #556]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003328:	e00f      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800332e:	3308      	adds	r3, #8
 8003330:	2101      	movs	r1, #1
 8003332:	4618      	mov	r0, r3
 8003334:	f001 f94c 	bl	80045d0 <RCCEx_PLL2_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800333e:	e004      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003352:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003356:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a7b      	ldr	r2, [pc, #492]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003362:	430b      	orrs	r3, r1
 8003364:	6513      	str	r3, [r2, #80]	; 0x50
 8003366:	e003      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800336c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800337c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003386:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800338a:	460b      	mov	r3, r1
 800338c:	4313      	orrs	r3, r2
 800338e:	d039      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003396:	2b03      	cmp	r3, #3
 8003398:	d81c      	bhi.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033dd 	.word	0x080033dd
 80033a4:	080033b1 	.word	0x080033b1
 80033a8:	080033bf 	.word	0x080033bf
 80033ac:	080033dd 	.word	0x080033dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b0:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	4a66      	ldr	r2, [pc, #408]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033bc:	e00f      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c2:	3308      	adds	r3, #8
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 f902 	bl	80045d0 <RCCEx_PLL2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033d2:	e004      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033da:	e000      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80033dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80033e6:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	f023 0103 	bic.w	r1, r3, #3
 80033ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f4:	4a56      	ldr	r2, [pc, #344]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f6:	430b      	orrs	r3, r1
 80033f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033fa:	e003      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003400:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800341a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800341e:	460b      	mov	r3, r1
 8003420:	4313      	orrs	r3, r2
 8003422:	f000 809f 	beq.w	8003564 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003426:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a4a      	ldr	r2, [pc, #296]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003432:	f7fd ffef 	bl	8001414 <HAL_GetTick>
 8003436:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800343a:	e00b      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fd ffea 	bl	8001414 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d903      	bls.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003452:	e005      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003454:	4b3f      	ldr	r3, [pc, #252]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ed      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003464:	2b00      	cmp	r3, #0
 8003466:	d179      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003468:	4b39      	ldr	r3, [pc, #228]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800346a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003470:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003474:	4053      	eors	r3, r2
 8003476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347a:	2b00      	cmp	r3, #0
 800347c:	d015      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003486:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800348a:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a30      	ldr	r2, [pc, #192]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003496:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800349c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80034a2:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80034aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b6:	d118      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fd ffac 	bl	8001414 <HAL_GetTick>
 80034bc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034c0:	e00d      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fd ffa7 	bl	8001414 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034cc:	1ad2      	subs	r2, r2, r3
 80034ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d903      	bls.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80034dc:	e005      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0eb      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80034ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d129      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003502:	d10e      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003510:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003514:	091a      	lsrs	r2, r3, #4
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003518:	4013      	ands	r3, r2
 800351a:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800351c:	430b      	orrs	r3, r1
 800351e:	6113      	str	r3, [r2, #16]
 8003520:	e005      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003528:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800352c:	6113      	str	r3, [r2, #16]
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003530:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003536:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800353a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353e:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003540:	430b      	orrs	r3, r1
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
 8003544:	e00e      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800354a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800354e:	e009      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003550:	58024400 	.word	0x58024400
 8003554:	58024800 	.word	0x58024800
 8003558:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003560:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f002 0301 	and.w	r3, r2, #1
 8003570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800357a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	f000 8089 	beq.w	8003698 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358c:	2b28      	cmp	r3, #40	; 0x28
 800358e:	d86b      	bhi.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	08003671 	.word	0x08003671
 800359c:	08003669 	.word	0x08003669
 80035a0:	08003669 	.word	0x08003669
 80035a4:	08003669 	.word	0x08003669
 80035a8:	08003669 	.word	0x08003669
 80035ac:	08003669 	.word	0x08003669
 80035b0:	08003669 	.word	0x08003669
 80035b4:	08003669 	.word	0x08003669
 80035b8:	0800363d 	.word	0x0800363d
 80035bc:	08003669 	.word	0x08003669
 80035c0:	08003669 	.word	0x08003669
 80035c4:	08003669 	.word	0x08003669
 80035c8:	08003669 	.word	0x08003669
 80035cc:	08003669 	.word	0x08003669
 80035d0:	08003669 	.word	0x08003669
 80035d4:	08003669 	.word	0x08003669
 80035d8:	08003653 	.word	0x08003653
 80035dc:	08003669 	.word	0x08003669
 80035e0:	08003669 	.word	0x08003669
 80035e4:	08003669 	.word	0x08003669
 80035e8:	08003669 	.word	0x08003669
 80035ec:	08003669 	.word	0x08003669
 80035f0:	08003669 	.word	0x08003669
 80035f4:	08003669 	.word	0x08003669
 80035f8:	08003671 	.word	0x08003671
 80035fc:	08003669 	.word	0x08003669
 8003600:	08003669 	.word	0x08003669
 8003604:	08003669 	.word	0x08003669
 8003608:	08003669 	.word	0x08003669
 800360c:	08003669 	.word	0x08003669
 8003610:	08003669 	.word	0x08003669
 8003614:	08003669 	.word	0x08003669
 8003618:	08003671 	.word	0x08003671
 800361c:	08003669 	.word	0x08003669
 8003620:	08003669 	.word	0x08003669
 8003624:	08003669 	.word	0x08003669
 8003628:	08003669 	.word	0x08003669
 800362c:	08003669 	.word	0x08003669
 8003630:	08003669 	.word	0x08003669
 8003634:	08003669 	.word	0x08003669
 8003638:	08003671 	.word	0x08003671
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003640:	3308      	adds	r3, #8
 8003642:	2101      	movs	r1, #1
 8003644:	4618      	mov	r0, r3
 8003646:	f000 ffc3 	bl	80045d0 <RCCEx_PLL2_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003650:	e00f      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003656:	3328      	adds	r3, #40	; 0x28
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f001 f86a 	bl	8004734 <RCCEx_PLL3_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003666:	e004      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800366e:	e000      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800367a:	4bbf      	ldr	r3, [pc, #764]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003688:	4abb      	ldr	r2, [pc, #748]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800368a:	430b      	orrs	r3, r1
 800368c:	6553      	str	r3, [r2, #84]	; 0x54
 800368e:	e003      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003694:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f002 0302 	and.w	r3, r2, #2
 80036a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80036ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d041      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d824      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	08003715 	.word	0x08003715
 80036cc:	080036e1 	.word	0x080036e1
 80036d0:	080036f7 	.word	0x080036f7
 80036d4:	08003715 	.word	0x08003715
 80036d8:	08003715 	.word	0x08003715
 80036dc:	08003715 	.word	0x08003715
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e4:	3308      	adds	r3, #8
 80036e6:	2101      	movs	r1, #1
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 ff71 	bl	80045d0 <RCCEx_PLL2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036f4:	e00f      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fa:	3328      	adds	r3, #40	; 0x28
 80036fc:	2101      	movs	r1, #1
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f818 	bl	8004734 <RCCEx_PLL3_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800370a:	e004      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800371e:	4b96      	ldr	r3, [pc, #600]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	f023 0107 	bic.w	r1, r3, #7
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372c:	4a92      	ldr	r2, [pc, #584]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800372e:	430b      	orrs	r3, r1
 8003730:	6553      	str	r3, [r2, #84]	; 0x54
 8003732:	e003      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003738:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f002 0304 	and.w	r3, r2, #4
 8003748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003752:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003756:	460b      	mov	r3, r1
 8003758:	4313      	orrs	r3, r2
 800375a:	d044      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800375c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003764:	2b05      	cmp	r3, #5
 8003766:	d825      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	080037bd 	.word	0x080037bd
 8003774:	08003789 	.word	0x08003789
 8003778:	0800379f 	.word	0x0800379f
 800377c:	080037bd 	.word	0x080037bd
 8003780:	080037bd 	.word	0x080037bd
 8003784:	080037bd 	.word	0x080037bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378c:	3308      	adds	r3, #8
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f000 ff1d 	bl	80045d0 <RCCEx_PLL2_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800379c:	e00f      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a2:	3328      	adds	r3, #40	; 0x28
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 ffc4 	bl	8004734 <RCCEx_PLL3_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80037b2:	e004      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ba:	e000      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80037bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c6:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	f023 0107 	bic.w	r1, r3, #7
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d6:	4a68      	ldr	r2, [pc, #416]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037d8:	430b      	orrs	r3, r1
 80037da:	6593      	str	r3, [r2, #88]	; 0x58
 80037dc:	e003      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	f002 0320 	and.w	r3, r2, #32
 80037f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037f6:	2300      	movs	r3, #0
 80037f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003800:	460b      	mov	r3, r1
 8003802:	4313      	orrs	r3, r2
 8003804:	d055      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003812:	d033      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003818:	d82c      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381e:	d02f      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d826      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800382a:	d02b      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800382c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003830:	d820      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003836:	d012      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383c:	d81a      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d022      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003846:	d115      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384c:	3308      	adds	r3, #8
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f000 febd 	bl	80045d0 <RCCEx_PLL2_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800385c:	e015      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003862:	3328      	adds	r3, #40	; 0x28
 8003864:	2102      	movs	r1, #2
 8003866:	4618      	mov	r0, r3
 8003868:	f000 ff64 	bl	8004734 <RCCEx_PLL3_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003872:	e00a      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800387a:	e006      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800387c:	bf00      	nop
 800387e:	e004      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003880:	bf00      	nop
 8003882:	e002      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003884:	bf00      	nop
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10b      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003892:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	4a35      	ldr	r2, [pc, #212]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6553      	str	r3, [r2, #84]	; 0x54
 80038a8:	e003      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80038be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80038c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4313      	orrs	r3, r2
 80038d0:	d058      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038de:	d033      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80038e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038e4:	d82c      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ea:	d02f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f0:	d826      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038f6:	d02b      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80038f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038fc:	d820      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003902:	d012      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003908:	d81a      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d022      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003912:	d115      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003918:	3308      	adds	r3, #8
 800391a:	2100      	movs	r1, #0
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fe57 	bl	80045d0 <RCCEx_PLL2_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003928:	e015      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392e:	3328      	adds	r3, #40	; 0x28
 8003930:	2102      	movs	r1, #2
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fefe 	bl	8004734 <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800393e:	e00a      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003946:	e006      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003948:	bf00      	nop
 800394a:	e004      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800394c:	bf00      	nop
 800394e:	e002      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003950:	bf00      	nop
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10e      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396e:	4a02      	ldr	r2, [pc, #8]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003970:	430b      	orrs	r3, r1
 8003972:	6593      	str	r3, [r2, #88]	; 0x58
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003976:	bf00      	nop
 8003978:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003980:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003994:	2300      	movs	r3, #0
 8003996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800399a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800399e:	460b      	mov	r3, r1
 80039a0:	4313      	orrs	r3, r2
 80039a2:	d055      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80039b0:	d033      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80039b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80039b6:	d82c      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039bc:	d02f      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80039be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c2:	d826      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039c8:	d02b      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80039ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039ce:	d820      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d4:	d012      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80039d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039da:	d81a      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d022      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80039e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e4:	d115      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ea:	3308      	adds	r3, #8
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fdee 	bl	80045d0 <RCCEx_PLL2_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039fa:	e015      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a00:	3328      	adds	r3, #40	; 0x28
 8003a02:	2102      	movs	r1, #2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fe95 	bl	8004734 <RCCEx_PLL3_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a10:	e00a      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a18:	e006      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a1a:	bf00      	nop
 8003a1c:	e004      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e002      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a30:	4ba1      	ldr	r3, [pc, #644]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a40:	4a9d      	ldr	r2, [pc, #628]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a42:	430b      	orrs	r3, r1
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
 8003a46:	e003      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f002 0308 	and.w	r3, r2, #8
 8003a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	d01e      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	3328      	adds	r3, #40	; 0x28
 8003a84:	2102      	movs	r1, #2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fe54 	bl	8004734 <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a98:	4b87      	ldr	r3, [pc, #540]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa8:	4a83      	ldr	r2, [pc, #524]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f002 0310 	and.w	r3, r2, #16
 8003aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ac4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d01e      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ada:	d10c      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae0:	3328      	adds	r3, #40	; 0x28
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fe25 	bl	8004734 <RCCEx_PLL3_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003af6:	4b70      	ldr	r3, [pc, #448]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b06:	4a6c      	ldr	r2, [pc, #432]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003b26:	460b      	mov	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	d03e      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b38:	d022      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b3e:	d81b      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d00b      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003b4a:	e015      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b50:	3308      	adds	r3, #8
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fd3b 	bl	80045d0 <RCCEx_PLL2_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b60:	e00f      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b66:	3328      	adds	r3, #40	; 0x28
 8003b68:	2102      	movs	r1, #2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fde2 	bl	8004734 <RCCEx_PLL3_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b76:	e004      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b7e:	e000      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b8a:	4b4b      	ldr	r3, [pc, #300]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b9a:	4a47      	ldr	r2, [pc, #284]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba0:	e003      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003bb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bb8:	2300      	movs	r3, #0
 8003bba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bbc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	d03b      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bd2:	d01f      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003bd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bd8:	d818      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bde:	d003      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003be4:	d007      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003be6:	e011      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be8:	4b33      	ldr	r3, [pc, #204]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	4a32      	ldr	r2, [pc, #200]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bf4:	e00f      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	3328      	adds	r3, #40	; 0x28
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fd98 	bl	8004734 <RCCEx_PLL3_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c0a:	e004      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c1e:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	4a22      	ldr	r2, [pc, #136]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6553      	str	r3, [r2, #84]	; 0x54
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	677b      	str	r3, [r7, #116]	; 0x74
 8003c50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d034      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c68:	d007      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003c6a:	e011      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a11      	ldr	r2, [pc, #68]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c78:	e00e      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fca4 	bl	80045d0 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10d      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cae:	4a02      	ldr	r2, [pc, #8]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cb4:	e006      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003cd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cd6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	d00c      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce4:	3328      	adds	r3, #40	; 0x28
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fd23 	bl	8004734 <RCCEx_PLL3_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003d06:	663b      	str	r3, [r7, #96]	; 0x60
 8003d08:	2300      	movs	r3, #0
 8003d0a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d10:	460b      	mov	r3, r1
 8003d12:	4313      	orrs	r3, r2
 8003d14:	d038      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d22:	d018      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003d24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d28:	d811      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2e:	d014      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d34:	d80b      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d011      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d40:	4bc3      	ldr	r3, [pc, #780]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	4ac2      	ldr	r2, [pc, #776]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003d4c:	e008      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d68:	4bb9      	ldr	r3, [pc, #740]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d78:	4ab5      	ldr	r2, [pc, #724]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	6553      	str	r3, [r2, #84]	; 0x54
 8003d7e:	e003      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003d94:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d96:	2300      	movs	r3, #0
 8003d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4313      	orrs	r3, r2
 8003da2:	d009      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003da4:	4baa      	ldr	r3, [pc, #680]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db2:	4aa7      	ldr	r2, [pc, #668]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003dc4:	653b      	str	r3, [r7, #80]	; 0x50
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	657b      	str	r3, [r7, #84]	; 0x54
 8003dca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003dd4:	4b9e      	ldr	r3, [pc, #632]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003de4:	4a9a      	ldr	r2, [pc, #616]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df8:	2300      	movs	r3, #0
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e06:	4b92      	ldr	r3, [pc, #584]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e14:	4a8e      	ldr	r2, [pc, #568]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e16:	430b      	orrs	r3, r1
 8003e18:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003e26:	643b      	str	r3, [r7, #64]	; 0x40
 8003e28:	2300      	movs	r3, #0
 8003e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003e30:	460b      	mov	r3, r1
 8003e32:	4313      	orrs	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e36:	4b86      	ldr	r3, [pc, #536]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	4a85      	ldr	r2, [pc, #532]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e40:	6113      	str	r3, [r2, #16]
 8003e42:	4b83      	ldr	r3, [pc, #524]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e44:	6919      	ldr	r1, [r3, #16]
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e4e:	4a80      	ldr	r2, [pc, #512]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e62:	2300      	movs	r3, #0
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e66:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	d009      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e70:	4b77      	ldr	r3, [pc, #476]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e74:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	4a74      	ldr	r2, [pc, #464]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e80:	430b      	orrs	r3, r1
 8003e82:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003e90:	633b      	str	r3, [r7, #48]	; 0x30
 8003e92:	2300      	movs	r3, #0
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
 8003e96:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ea0:	4b6b      	ldr	r3, [pc, #428]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb0:	4a67      	ldr	r2, [pc, #412]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	d011      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fb78 	bl	80045d0 <RCCEx_PLL2_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	2100      	movs	r1, #0
 8003f00:	6239      	str	r1, [r7, #32]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	d011      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f16:	3308      	adds	r3, #8
 8003f18:	2101      	movs	r1, #1
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fb58 	bl	80045d0 <RCCEx_PLL2_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	2100      	movs	r1, #0
 8003f40:	61b9      	str	r1, [r7, #24]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	d011      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f56:	3308      	adds	r3, #8
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb38 	bl	80045d0 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	2100      	movs	r1, #0
 8003f80:	6139      	str	r1, [r7, #16]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d011      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	3328      	adds	r3, #40	; 0x28
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fbca 	bl	8004734 <RCCEx_PLL3_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	d011      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd6:	3328      	adds	r3, #40	; 0x28
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fbaa 	bl	8004734 <RCCEx_PLL3_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ff2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	2100      	movs	r1, #0
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	e9d7 1200 	ldrd	r1, r2, [r7]
 800400c:	460b      	mov	r3, r1
 800400e:	4313      	orrs	r3, r2
 8004010:	d011      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	3328      	adds	r3, #40	; 0x28
 8004018:	2102      	movs	r1, #2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fb8a 	bl	8004734 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004032:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004036:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
}
 8004044:	4618      	mov	r0, r3
 8004046:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004050:	58024400 	.word	0x58024400

08004054 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004058:	f7fe fd96 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 800405c:	4602      	mov	r2, r0
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4904      	ldr	r1, [pc, #16]	; (800407c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004074:	4618      	mov	r0, r3
 8004076:	bd80      	pop	{r7, pc}
 8004078:	58024400 	.word	0x58024400
 800407c:	0800b508 	.word	0x0800b508

08004080 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004080:	b480      	push	{r7}
 8004082:	b089      	sub	sp, #36	; 0x24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004088:	4ba1      	ldr	r3, [pc, #644]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004092:	4b9f      	ldr	r3, [pc, #636]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	0b1b      	lsrs	r3, r3, #12
 8004098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800409c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800409e:	4b9c      	ldr	r3, [pc, #624]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80040aa:	4b99      	ldr	r3, [pc, #612]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	08db      	lsrs	r3, r3, #3
 80040b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8111 	beq.w	80042f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	f000 8083 	beq.w	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	f200 80a1 	bhi.w	8004220 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d056      	beq.n	8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80040ea:	e099      	b.n	8004220 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040ec:	4b88      	ldr	r3, [pc, #544]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d02d      	beq.n	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040f8:	4b85      	ldr	r3, [pc, #532]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	08db      	lsrs	r3, r3, #3
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	4a84      	ldr	r2, [pc, #528]	; (8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004122:	4b7b      	ldr	r3, [pc, #492]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004132:	ed97 6a03 	vldr	s12, [r7, #12]
 8004136:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004152:	e087      	b.n	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800431c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004166:	4b6a      	ldr	r3, [pc, #424]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004176:	ed97 6a03 	vldr	s12, [r7, #12]
 800417a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800417e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800418a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004196:	e065      	b.n	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041aa:	4b59      	ldr	r3, [pc, #356]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80041be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041da:	e043      	b.n	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004324 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80041ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ee:	4b48      	ldr	r3, [pc, #288]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004202:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800421e:	e021      	b.n	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004232:	4b37      	ldr	r3, [pc, #220]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004242:	ed97 6a03 	vldr	s12, [r7, #12]
 8004246:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800424a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004262:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004264:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	0a5b      	lsrs	r3, r3, #9
 800426a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800427a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800427e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800428a:	ee17 2a90 	vmov	r2, s15
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004292:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800429c:	ee07 3a90 	vmov	s15, r3
 80042a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80042b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b8:	ee17 2a90 	vmov	r2, s15
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80042c0:	4b13      	ldr	r3, [pc, #76]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	0e1b      	lsrs	r3, r3, #24
 80042c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042da:	edd7 6a07 	vldr	s13, [r7, #28]
 80042de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e6:	ee17 2a90 	vmov	r2, s15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80042ee:	e008      	b.n	8004302 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]
}
 8004302:	bf00      	nop
 8004304:	3724      	adds	r7, #36	; 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	58024400 	.word	0x58024400
 8004314:	03d09000 	.word	0x03d09000
 8004318:	46000000 	.word	0x46000000
 800431c:	4c742400 	.word	0x4c742400
 8004320:	4a742400 	.word	0x4a742400
 8004324:	4af42400 	.word	0x4af42400

08004328 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	; 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004330:	4ba1      	ldr	r3, [pc, #644]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800433a:	4b9f      	ldr	r3, [pc, #636]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	0d1b      	lsrs	r3, r3, #20
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004346:	4b9c      	ldr	r3, [pc, #624]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004352:	4b99      	ldr	r3, [pc, #612]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	08db      	lsrs	r3, r3, #3
 8004358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8111 	beq.w	8004598 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b02      	cmp	r3, #2
 800437a:	f000 8083 	beq.w	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b02      	cmp	r3, #2
 8004382:	f200 80a1 	bhi.w	80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d056      	beq.n	8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004392:	e099      	b.n	80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004394:	4b88      	ldr	r3, [pc, #544]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d02d      	beq.n	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043a0:	4b85      	ldr	r3, [pc, #532]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	4a84      	ldr	r2, [pc, #528]	; (80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
 80043b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	ee07 3a90 	vmov	s15, r3
 80043b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b7b      	ldr	r3, [pc, #492]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a03 	vldr	s12, [r7, #12]
 80043de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043fa:	e087      	b.n	800450c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800440a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440e:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004422:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800443e:	e065      	b.n	800450c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a03 	vldr	s12, [r7, #12]
 8004466:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004482:	e043      	b.n	800450c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004496:	4b48      	ldr	r3, [pc, #288]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c6:	e021      	b.n	800450c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800450a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800450c:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	0a5b      	lsrs	r3, r3, #9
 8004512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004526:	edd7 6a07 	vldr	s13, [r7, #28]
 800452a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800452e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004532:	ee17 2a90 	vmov	r2, s15
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800453a:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004554:	edd7 6a07 	vldr	s13, [r7, #28]
 8004558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800455c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004560:	ee17 2a90 	vmov	r2, s15
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	0e1b      	lsrs	r3, r3, #24
 800456e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800457e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004582:	edd7 6a07 	vldr	s13, [r7, #28]
 8004586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800458e:	ee17 2a90 	vmov	r2, s15
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004596:	e008      	b.n	80045aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	bf00      	nop
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	58024400 	.word	0x58024400
 80045bc:	03d09000 	.word	0x03d09000
 80045c0:	46000000 	.word	0x46000000
 80045c4:	4c742400 	.word	0x4c742400
 80045c8:	4a742400 	.word	0x4a742400
 80045cc:	4af42400 	.word	0x4af42400

080045d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045de:	4b53      	ldr	r3, [pc, #332]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d101      	bne.n	80045ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e099      	b.n	8004722 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045ee:	4b4f      	ldr	r3, [pc, #316]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a4e      	ldr	r2, [pc, #312]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80045f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fa:	f7fc ff0b 	bl	8001414 <HAL_GetTick>
 80045fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004600:	e008      	b.n	8004614 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004602:	f7fc ff07 	bl	8001414 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e086      	b.n	8004722 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004614:	4b45      	ldr	r3, [pc, #276]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f0      	bne.n	8004602 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	031b      	lsls	r3, r3, #12
 800462e:	493f      	ldr	r1, [pc, #252]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	628b      	str	r3, [r1, #40]	; 0x28
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	3b01      	subs	r3, #1
 800463a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	3b01      	subs	r3, #1
 8004644:	025b      	lsls	r3, r3, #9
 8004646:	b29b      	uxth	r3, r3
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	3b01      	subs	r3, #1
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	3b01      	subs	r3, #1
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004664:	4931      	ldr	r1, [pc, #196]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800466a:	4b30      	ldr	r3, [pc, #192]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	492d      	ldr	r1, [pc, #180]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800467c:	4b2b      	ldr	r3, [pc, #172]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	f023 0220 	bic.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	4928      	ldr	r1, [pc, #160]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	4a26      	ldr	r2, [pc, #152]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004694:	f023 0310 	bic.w	r3, r3, #16
 8004698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 800469c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <RCCEx_PLL2_Config+0x160>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	69d2      	ldr	r2, [r2, #28]
 80046a6:	00d2      	lsls	r2, r2, #3
 80046a8:	4920      	ldr	r1, [pc, #128]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046ae:	4b1f      	ldr	r3, [pc, #124]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	4a1e      	ldr	r2, [pc, #120]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046b4:	f043 0310 	orr.w	r3, r3, #16
 80046b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4a19      	ldr	r2, [pc, #100]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046cc:	e00f      	b.n	80046ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046d4:	4b15      	ldr	r3, [pc, #84]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	4a14      	ldr	r2, [pc, #80]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046e0:	e005      	b.n	80046ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	4a11      	ldr	r2, [pc, #68]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a0e      	ldr	r2, [pc, #56]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fa:	f7fc fe8b 	bl	8001414 <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004700:	e008      	b.n	8004714 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004702:	f7fc fe87 	bl	8001414 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e006      	b.n	8004722 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	58024400 	.word	0x58024400
 8004730:	ffff0007 	.word	0xffff0007

08004734 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004742:	4b53      	ldr	r3, [pc, #332]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b03      	cmp	r3, #3
 800474c:	d101      	bne.n	8004752 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e099      	b.n	8004886 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004752:	4b4f      	ldr	r3, [pc, #316]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4e      	ldr	r2, [pc, #312]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475e:	f7fc fe59 	bl	8001414 <HAL_GetTick>
 8004762:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004764:	e008      	b.n	8004778 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004766:	f7fc fe55 	bl	8001414 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e086      	b.n	8004886 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004778:	4b45      	ldr	r3, [pc, #276]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004784:	4b42      	ldr	r3, [pc, #264]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	051b      	lsls	r3, r3, #20
 8004792:	493f      	ldr	r1, [pc, #252]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	628b      	str	r3, [r1, #40]	; 0x28
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	3b01      	subs	r3, #1
 800479e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	025b      	lsls	r3, r3, #9
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	061b      	lsls	r3, r3, #24
 80047c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047c8:	4931      	ldr	r1, [pc, #196]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047ce:	4b30      	ldr	r3, [pc, #192]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	492d      	ldr	r1, [pc, #180]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	4928      	ldr	r1, [pc, #160]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047f2:	4b27      	ldr	r3, [pc, #156]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	4a26      	ldr	r2, [pc, #152]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <RCCEx_PLL3_Config+0x160>)
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	69d2      	ldr	r2, [r2, #28]
 800480a:	00d2      	lsls	r2, r2, #3
 800480c:	4920      	ldr	r1, [pc, #128]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004812:	4b1f      	ldr	r3, [pc, #124]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004824:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800482a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800482e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004830:	e00f      	b.n	8004852 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d106      	bne.n	8004846 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800483e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004844:	e005      	b.n	8004852 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800484c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004850:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485e:	f7fc fdd9 	bl	8001414 <HAL_GetTick>
 8004862:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004864:	e008      	b.n	8004878 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004866:	f7fc fdd5 	bl	8001414 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e006      	b.n	8004886 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	58024400 	.word	0x58024400
 8004894:	ffff0007 	.word	0xffff0007

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e049      	b.n	800493e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc fb6c 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f000 f99e 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d001      	beq.n	8004960 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e04c      	b.n	80049fa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <HAL_TIM_Base_Start+0xc0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <HAL_TIM_Base_Start+0x70>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d01d      	beq.n	80049b8 <HAL_TIM_Base_Start+0x70>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a22      	ldr	r2, [pc, #136]	; (8004a0c <HAL_TIM_Base_Start+0xc4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <HAL_TIM_Base_Start+0x70>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <HAL_TIM_Base_Start+0xc8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <HAL_TIM_Base_Start+0x70>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <HAL_TIM_Base_Start+0xcc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <HAL_TIM_Base_Start+0x70>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <HAL_TIM_Base_Start+0xd0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <HAL_TIM_Base_Start+0x70>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <HAL_TIM_Base_Start+0xd4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_TIM_Base_Start+0x70>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_TIM_Base_Start+0xd8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d115      	bne.n	80049e4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_TIM_Base_Start+0xdc>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b06      	cmp	r3, #6
 80049c8:	d015      	beq.n	80049f6 <HAL_TIM_Base_Start+0xae>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d0:	d011      	beq.n	80049f6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	e008      	b.n	80049f6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e000      	b.n	80049f8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40010400 	.word	0x40010400
 8004a1c:	40001800 	.word	0x40001800
 8004a20:	40014000 	.word	0x40014000
 8004a24:	00010007 	.word	0x00010007

08004a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIM_ConfigClockSource+0x1c>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e0dc      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0x1d6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a64      	ldr	r2, [pc, #400]	; (8004c0c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	f000 80a9 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a80:	4a62      	ldr	r2, [pc, #392]	; (8004c0c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	f200 80ae 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a88:	4a61      	ldr	r2, [pc, #388]	; (8004c10 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	f000 80a1 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a90:	4a5f      	ldr	r2, [pc, #380]	; (8004c10 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	f200 80a6 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a98:	4a5e      	ldr	r2, [pc, #376]	; (8004c14 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	f000 8099 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004aa0:	4a5c      	ldr	r2, [pc, #368]	; (8004c14 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	f200 809e 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004aa8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004aac:	f000 8091 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ab0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ab4:	f200 8096 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004abc:	f000 8089 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac4:	f200 808e 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004acc:	d03e      	beq.n	8004b4c <HAL_TIM_ConfigClockSource+0x124>
 8004ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad2:	f200 8087 	bhi.w	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ada:	f000 8086 	beq.w	8004bea <HAL_TIM_ConfigClockSource+0x1c2>
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae2:	d87f      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ae4:	2b70      	cmp	r3, #112	; 0x70
 8004ae6:	d01a      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0xf6>
 8004ae8:	2b70      	cmp	r3, #112	; 0x70
 8004aea:	d87b      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004aec:	2b60      	cmp	r3, #96	; 0x60
 8004aee:	d050      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x16a>
 8004af0:	2b60      	cmp	r3, #96	; 0x60
 8004af2:	d877      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004af4:	2b50      	cmp	r3, #80	; 0x50
 8004af6:	d03c      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x14a>
 8004af8:	2b50      	cmp	r3, #80	; 0x50
 8004afa:	d873      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d058      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0x18a>
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d86f      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b04:	2b30      	cmp	r3, #48	; 0x30
 8004b06:	d064      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b08:	2b30      	cmp	r3, #48	; 0x30
 8004b0a:	d86b      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d060      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d867      	bhi.n	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d05c      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d05a      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b1c:	e062      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6899      	ldr	r1, [r3, #8]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f000 f98b 	bl	8004e48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	609a      	str	r2, [r3, #8]
      break;
 8004b4a:	e04f      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	6899      	ldr	r1, [r3, #8]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f000 f974 	bl	8004e48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b6e:	609a      	str	r2, [r3, #8]
      break;
 8004b70:	e03c      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f000 f8e4 	bl	8004d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2150      	movs	r1, #80	; 0x50
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f93e 	bl	8004e0c <TIM_ITRx_SetConfig>
      break;
 8004b90:	e02c      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6859      	ldr	r1, [r3, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f000 f903 	bl	8004daa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2160      	movs	r1, #96	; 0x60
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f92e 	bl	8004e0c <TIM_ITRx_SetConfig>
      break;
 8004bb0:	e01c      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6859      	ldr	r1, [r3, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f000 f8c4 	bl	8004d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2140      	movs	r1, #64	; 0x40
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f91e 	bl	8004e0c <TIM_ITRx_SetConfig>
      break;
 8004bd0:	e00c      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f000 f915 	bl	8004e0c <TIM_ITRx_SetConfig>
      break;
 8004be2:	e003      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	73fb      	strb	r3, [r7, #15]
      break;
 8004be8:	e000      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	ffceff88 	.word	0xffceff88
 8004c0c:	00100040 	.word	0x00100040
 8004c10:	00100030 	.word	0x00100030
 8004c14:	00100020 	.word	0x00100020

08004c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a40      	ldr	r2, [pc, #256]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d00f      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3d      	ldr	r2, [pc, #244]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3b      	ldr	r2, [pc, #236]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3a      	ldr	r2, [pc, #232]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d108      	bne.n	8004c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01f      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d01b      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d017      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2b      	ldr	r2, [pc, #172]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <TIM_Base_SetConfig+0x128>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	; (8004d44 <TIM_Base_SetConfig+0x12c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <TIM_Base_SetConfig+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a10      	ldr	r2, [pc, #64]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00f      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <TIM_Base_SetConfig+0x128>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <TIM_Base_SetConfig+0x12c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <TIM_Base_SetConfig+0x130>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d103      	bne.n	8004d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40010400 	.word	0x40010400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800

08004d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f023 030a 	bic.w	r3, r3, #10
 8004d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b087      	sub	sp, #28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0210 	bic.w	r2, r3, #16
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	031b      	lsls	r3, r3, #12
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004de6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <TIM_ITRx_SetConfig+0x38>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f043 0307 	orr.w	r3, r3, #7
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	609a      	str	r2, [r3, #8]
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	ffcfff8f 	.word	0xffcfff8f

08004e48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	609a      	str	r2, [r3, #8]
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e06d      	b.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a30      	ldr	r2, [pc, #192]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2f      	ldr	r2, [pc, #188]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d108      	bne.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004eda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d022      	beq.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f12:	d01d      	beq.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d018      	beq.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d013      	beq.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00e      	beq.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d009      	beq.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10c      	bne.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40010400 	.word	0x40010400
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40001800 	.word	0x40001800
 8004fa0:	40014000 	.word	0x40014000

08004fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e042      	b.n	800503c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fc f821 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2224      	movs	r2, #36	; 0x24
 8004fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8ba 	bl	8005160 <UART_SetConfig>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e022      	b.n	800503c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fe16 	bl	8005c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fe9d 	bl	8005d74 <UART_CheckIdleState>
 800503a:	4603      	mov	r3, r0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	; 0x28
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	2b20      	cmp	r3, #32
 800505c:	d17b      	bne.n	8005156 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_UART_Transmit+0x26>
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e074      	b.n	8005158 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2221      	movs	r2, #33	; 0x21
 800507a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800507e:	f7fc f9c9 	bl	8001414 <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509c:	d108      	bne.n	80050b0 <HAL_UART_Transmit+0x6c>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d104      	bne.n	80050b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e003      	b.n	80050b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050b8:	e030      	b.n	800511c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 feff 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e03d      	b.n	8005158 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3302      	adds	r3, #2
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e007      	b.n	800510a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3301      	adds	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1c8      	bne.n	80050ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2200      	movs	r2, #0
 8005130:	2140      	movs	r1, #64	; 0x40
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 fec8 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e006      	b.n	8005158 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	e000      	b.n	8005158 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005156:	2302      	movs	r3, #2
  }
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005164:	b092      	sub	sp, #72	; 0x48
 8005166:	af00      	add	r7, sp, #0
 8005168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	431a      	orrs	r2, r3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	431a      	orrs	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	4313      	orrs	r3, r2
 8005186:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4bbe      	ldr	r3, [pc, #760]	; (8005488 <UART_SetConfig+0x328>)
 8005190:	4013      	ands	r3, r2
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005198:	430b      	orrs	r3, r1
 800519a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4ab3      	ldr	r2, [pc, #716]	; (800548c <UART_SetConfig+0x32c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051c8:	4313      	orrs	r3, r2
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	4baf      	ldr	r3, [pc, #700]	; (8005490 <UART_SetConfig+0x330>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051dc:	430b      	orrs	r3, r1
 80051de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	f023 010f 	bic.w	r1, r3, #15
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4aa6      	ldr	r2, [pc, #664]	; (8005494 <UART_SetConfig+0x334>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d177      	bne.n	80052f0 <UART_SetConfig+0x190>
 8005200:	4ba5      	ldr	r3, [pc, #660]	; (8005498 <UART_SetConfig+0x338>)
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005208:	2b28      	cmp	r3, #40	; 0x28
 800520a:	d86d      	bhi.n	80052e8 <UART_SetConfig+0x188>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <UART_SetConfig+0xb4>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	080052b9 	.word	0x080052b9
 8005218:	080052e9 	.word	0x080052e9
 800521c:	080052e9 	.word	0x080052e9
 8005220:	080052e9 	.word	0x080052e9
 8005224:	080052e9 	.word	0x080052e9
 8005228:	080052e9 	.word	0x080052e9
 800522c:	080052e9 	.word	0x080052e9
 8005230:	080052e9 	.word	0x080052e9
 8005234:	080052c1 	.word	0x080052c1
 8005238:	080052e9 	.word	0x080052e9
 800523c:	080052e9 	.word	0x080052e9
 8005240:	080052e9 	.word	0x080052e9
 8005244:	080052e9 	.word	0x080052e9
 8005248:	080052e9 	.word	0x080052e9
 800524c:	080052e9 	.word	0x080052e9
 8005250:	080052e9 	.word	0x080052e9
 8005254:	080052c9 	.word	0x080052c9
 8005258:	080052e9 	.word	0x080052e9
 800525c:	080052e9 	.word	0x080052e9
 8005260:	080052e9 	.word	0x080052e9
 8005264:	080052e9 	.word	0x080052e9
 8005268:	080052e9 	.word	0x080052e9
 800526c:	080052e9 	.word	0x080052e9
 8005270:	080052e9 	.word	0x080052e9
 8005274:	080052d1 	.word	0x080052d1
 8005278:	080052e9 	.word	0x080052e9
 800527c:	080052e9 	.word	0x080052e9
 8005280:	080052e9 	.word	0x080052e9
 8005284:	080052e9 	.word	0x080052e9
 8005288:	080052e9 	.word	0x080052e9
 800528c:	080052e9 	.word	0x080052e9
 8005290:	080052e9 	.word	0x080052e9
 8005294:	080052d9 	.word	0x080052d9
 8005298:	080052e9 	.word	0x080052e9
 800529c:	080052e9 	.word	0x080052e9
 80052a0:	080052e9 	.word	0x080052e9
 80052a4:	080052e9 	.word	0x080052e9
 80052a8:	080052e9 	.word	0x080052e9
 80052ac:	080052e9 	.word	0x080052e9
 80052b0:	080052e9 	.word	0x080052e9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052be:	e222      	b.n	8005706 <UART_SetConfig+0x5a6>
 80052c0:	2304      	movs	r3, #4
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c6:	e21e      	b.n	8005706 <UART_SetConfig+0x5a6>
 80052c8:	2308      	movs	r3, #8
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ce:	e21a      	b.n	8005706 <UART_SetConfig+0x5a6>
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d6:	e216      	b.n	8005706 <UART_SetConfig+0x5a6>
 80052d8:	2320      	movs	r3, #32
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052de:	e212      	b.n	8005706 <UART_SetConfig+0x5a6>
 80052e0:	2340      	movs	r3, #64	; 0x40
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e20e      	b.n	8005706 <UART_SetConfig+0x5a6>
 80052e8:	2380      	movs	r3, #128	; 0x80
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e20a      	b.n	8005706 <UART_SetConfig+0x5a6>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a69      	ldr	r2, [pc, #420]	; (800549c <UART_SetConfig+0x33c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d130      	bne.n	800535c <UART_SetConfig+0x1fc>
 80052fa:	4b67      	ldr	r3, [pc, #412]	; (8005498 <UART_SetConfig+0x338>)
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	2b05      	cmp	r3, #5
 8005304:	d826      	bhi.n	8005354 <UART_SetConfig+0x1f4>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0x1ac>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005325 	.word	0x08005325
 8005310:	0800532d 	.word	0x0800532d
 8005314:	08005335 	.word	0x08005335
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005345 	.word	0x08005345
 8005320:	0800534d 	.word	0x0800534d
 8005324:	2300      	movs	r3, #0
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532a:	e1ec      	b.n	8005706 <UART_SetConfig+0x5a6>
 800532c:	2304      	movs	r3, #4
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005332:	e1e8      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005334:	2308      	movs	r3, #8
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533a:	e1e4      	b.n	8005706 <UART_SetConfig+0x5a6>
 800533c:	2310      	movs	r3, #16
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005342:	e1e0      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005344:	2320      	movs	r3, #32
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534a:	e1dc      	b.n	8005706 <UART_SetConfig+0x5a6>
 800534c:	2340      	movs	r3, #64	; 0x40
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e1d8      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535a:	e1d4      	b.n	8005706 <UART_SetConfig+0x5a6>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a4f      	ldr	r2, [pc, #316]	; (80054a0 <UART_SetConfig+0x340>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d130      	bne.n	80053c8 <UART_SetConfig+0x268>
 8005366:	4b4c      	ldr	r3, [pc, #304]	; (8005498 <UART_SetConfig+0x338>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2b05      	cmp	r3, #5
 8005370:	d826      	bhi.n	80053c0 <UART_SetConfig+0x260>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x218>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	08005391 	.word	0x08005391
 800537c:	08005399 	.word	0x08005399
 8005380:	080053a1 	.word	0x080053a1
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b9 	.word	0x080053b9
 8005390:	2300      	movs	r3, #0
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005396:	e1b6      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005398:	2304      	movs	r3, #4
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539e:	e1b2      	b.n	8005706 <UART_SetConfig+0x5a6>
 80053a0:	2308      	movs	r3, #8
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a6:	e1ae      	b.n	8005706 <UART_SetConfig+0x5a6>
 80053a8:	2310      	movs	r3, #16
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ae:	e1aa      	b.n	8005706 <UART_SetConfig+0x5a6>
 80053b0:	2320      	movs	r3, #32
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b6:	e1a6      	b.n	8005706 <UART_SetConfig+0x5a6>
 80053b8:	2340      	movs	r3, #64	; 0x40
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053be:	e1a2      	b.n	8005706 <UART_SetConfig+0x5a6>
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c6:	e19e      	b.n	8005706 <UART_SetConfig+0x5a6>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a35      	ldr	r2, [pc, #212]	; (80054a4 <UART_SetConfig+0x344>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d130      	bne.n	8005434 <UART_SetConfig+0x2d4>
 80053d2:	4b31      	ldr	r3, [pc, #196]	; (8005498 <UART_SetConfig+0x338>)
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d826      	bhi.n	800542c <UART_SetConfig+0x2cc>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x284>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	08005405 	.word	0x08005405
 80053ec:	0800540d 	.word	0x0800540d
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005402:	e180      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540a:	e17c      	b.n	8005706 <UART_SetConfig+0x5a6>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005412:	e178      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541a:	e174      	b.n	8005706 <UART_SetConfig+0x5a6>
 800541c:	2320      	movs	r3, #32
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005422:	e170      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542a:	e16c      	b.n	8005706 <UART_SetConfig+0x5a6>
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005432:	e168      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1b      	ldr	r2, [pc, #108]	; (80054a8 <UART_SetConfig+0x348>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d142      	bne.n	80054c4 <UART_SetConfig+0x364>
 800543e:	4b16      	ldr	r3, [pc, #88]	; (8005498 <UART_SetConfig+0x338>)
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b05      	cmp	r3, #5
 8005448:	d838      	bhi.n	80054bc <UART_SetConfig+0x35c>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <UART_SetConfig+0x2f0>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005469 	.word	0x08005469
 8005454:	08005471 	.word	0x08005471
 8005458:	08005479 	.word	0x08005479
 800545c:	08005481 	.word	0x08005481
 8005460:	080054ad 	.word	0x080054ad
 8005464:	080054b5 	.word	0x080054b5
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e14a      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005470:	2304      	movs	r3, #4
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e146      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005478:	2308      	movs	r3, #8
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547e:	e142      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005480:	2310      	movs	r3, #16
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005486:	e13e      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005488:	cfff69f3 	.word	0xcfff69f3
 800548c:	58000c00 	.word	0x58000c00
 8005490:	11fff4ff 	.word	0x11fff4ff
 8005494:	40011000 	.word	0x40011000
 8005498:	58024400 	.word	0x58024400
 800549c:	40004400 	.word	0x40004400
 80054a0:	40004800 	.word	0x40004800
 80054a4:	40004c00 	.word	0x40004c00
 80054a8:	40005000 	.word	0x40005000
 80054ac:	2320      	movs	r3, #32
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e128      	b.n	8005706 <UART_SetConfig+0x5a6>
 80054b4:	2340      	movs	r3, #64	; 0x40
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e124      	b.n	8005706 <UART_SetConfig+0x5a6>
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e120      	b.n	8005706 <UART_SetConfig+0x5a6>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4acb      	ldr	r2, [pc, #812]	; (80057f8 <UART_SetConfig+0x698>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d176      	bne.n	80055bc <UART_SetConfig+0x45c>
 80054ce:	4bcb      	ldr	r3, [pc, #812]	; (80057fc <UART_SetConfig+0x69c>)
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054d6:	2b28      	cmp	r3, #40	; 0x28
 80054d8:	d86c      	bhi.n	80055b4 <UART_SetConfig+0x454>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x380>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	08005585 	.word	0x08005585
 80054e4:	080055b5 	.word	0x080055b5
 80054e8:	080055b5 	.word	0x080055b5
 80054ec:	080055b5 	.word	0x080055b5
 80054f0:	080055b5 	.word	0x080055b5
 80054f4:	080055b5 	.word	0x080055b5
 80054f8:	080055b5 	.word	0x080055b5
 80054fc:	080055b5 	.word	0x080055b5
 8005500:	0800558d 	.word	0x0800558d
 8005504:	080055b5 	.word	0x080055b5
 8005508:	080055b5 	.word	0x080055b5
 800550c:	080055b5 	.word	0x080055b5
 8005510:	080055b5 	.word	0x080055b5
 8005514:	080055b5 	.word	0x080055b5
 8005518:	080055b5 	.word	0x080055b5
 800551c:	080055b5 	.word	0x080055b5
 8005520:	08005595 	.word	0x08005595
 8005524:	080055b5 	.word	0x080055b5
 8005528:	080055b5 	.word	0x080055b5
 800552c:	080055b5 	.word	0x080055b5
 8005530:	080055b5 	.word	0x080055b5
 8005534:	080055b5 	.word	0x080055b5
 8005538:	080055b5 	.word	0x080055b5
 800553c:	080055b5 	.word	0x080055b5
 8005540:	0800559d 	.word	0x0800559d
 8005544:	080055b5 	.word	0x080055b5
 8005548:	080055b5 	.word	0x080055b5
 800554c:	080055b5 	.word	0x080055b5
 8005550:	080055b5 	.word	0x080055b5
 8005554:	080055b5 	.word	0x080055b5
 8005558:	080055b5 	.word	0x080055b5
 800555c:	080055b5 	.word	0x080055b5
 8005560:	080055a5 	.word	0x080055a5
 8005564:	080055b5 	.word	0x080055b5
 8005568:	080055b5 	.word	0x080055b5
 800556c:	080055b5 	.word	0x080055b5
 8005570:	080055b5 	.word	0x080055b5
 8005574:	080055b5 	.word	0x080055b5
 8005578:	080055b5 	.word	0x080055b5
 800557c:	080055b5 	.word	0x080055b5
 8005580:	080055ad 	.word	0x080055ad
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e0bc      	b.n	8005706 <UART_SetConfig+0x5a6>
 800558c:	2304      	movs	r3, #4
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e0b8      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005594:	2308      	movs	r3, #8
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e0b4      	b.n	8005706 <UART_SetConfig+0x5a6>
 800559c:	2310      	movs	r3, #16
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e0b0      	b.n	8005706 <UART_SetConfig+0x5a6>
 80055a4:	2320      	movs	r3, #32
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e0ac      	b.n	8005706 <UART_SetConfig+0x5a6>
 80055ac:	2340      	movs	r3, #64	; 0x40
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b2:	e0a8      	b.n	8005706 <UART_SetConfig+0x5a6>
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ba:	e0a4      	b.n	8005706 <UART_SetConfig+0x5a6>
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a8f      	ldr	r2, [pc, #572]	; (8005800 <UART_SetConfig+0x6a0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d130      	bne.n	8005628 <UART_SetConfig+0x4c8>
 80055c6:	4b8d      	ldr	r3, [pc, #564]	; (80057fc <UART_SetConfig+0x69c>)
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	2b05      	cmp	r3, #5
 80055d0:	d826      	bhi.n	8005620 <UART_SetConfig+0x4c0>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x478>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055f1 	.word	0x080055f1
 80055dc:	080055f9 	.word	0x080055f9
 80055e0:	08005601 	.word	0x08005601
 80055e4:	08005609 	.word	0x08005609
 80055e8:	08005611 	.word	0x08005611
 80055ec:	08005619 	.word	0x08005619
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e086      	b.n	8005706 <UART_SetConfig+0x5a6>
 80055f8:	2304      	movs	r3, #4
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e082      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005600:	2308      	movs	r3, #8
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e07e      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005608:	2310      	movs	r3, #16
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e07a      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005610:	2320      	movs	r3, #32
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005616:	e076      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005618:	2340      	movs	r3, #64	; 0x40
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561e:	e072      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005626:	e06e      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a75      	ldr	r2, [pc, #468]	; (8005804 <UART_SetConfig+0x6a4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d130      	bne.n	8005694 <UART_SetConfig+0x534>
 8005632:	4b72      	ldr	r3, [pc, #456]	; (80057fc <UART_SetConfig+0x69c>)
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	2b05      	cmp	r3, #5
 800563c:	d826      	bhi.n	800568c <UART_SetConfig+0x52c>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0x4e4>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	0800565d 	.word	0x0800565d
 8005648:	08005665 	.word	0x08005665
 800564c:	0800566d 	.word	0x0800566d
 8005650:	08005675 	.word	0x08005675
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005685 	.word	0x08005685
 800565c:	2300      	movs	r3, #0
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005662:	e050      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005664:	2304      	movs	r3, #4
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e04c      	b.n	8005706 <UART_SetConfig+0x5a6>
 800566c:	2308      	movs	r3, #8
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e048      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005674:	2310      	movs	r3, #16
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567a:	e044      	b.n	8005706 <UART_SetConfig+0x5a6>
 800567c:	2320      	movs	r3, #32
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005682:	e040      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005684:	2340      	movs	r3, #64	; 0x40
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568a:	e03c      	b.n	8005706 <UART_SetConfig+0x5a6>
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005692:	e038      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a5b      	ldr	r2, [pc, #364]	; (8005808 <UART_SetConfig+0x6a8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d130      	bne.n	8005700 <UART_SetConfig+0x5a0>
 800569e:	4b57      	ldr	r3, [pc, #348]	; (80057fc <UART_SetConfig+0x69c>)
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d826      	bhi.n	80056f8 <UART_SetConfig+0x598>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x550>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056c9 	.word	0x080056c9
 80056b4:	080056d1 	.word	0x080056d1
 80056b8:	080056d9 	.word	0x080056d9
 80056bc:	080056e1 	.word	0x080056e1
 80056c0:	080056e9 	.word	0x080056e9
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	2302      	movs	r3, #2
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e01a      	b.n	8005706 <UART_SetConfig+0x5a6>
 80056d0:	2304      	movs	r3, #4
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e016      	b.n	8005706 <UART_SetConfig+0x5a6>
 80056d8:	2308      	movs	r3, #8
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e012      	b.n	8005706 <UART_SetConfig+0x5a6>
 80056e0:	2310      	movs	r3, #16
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e00e      	b.n	8005706 <UART_SetConfig+0x5a6>
 80056e8:	2320      	movs	r3, #32
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ee:	e00a      	b.n	8005706 <UART_SetConfig+0x5a6>
 80056f0:	2340      	movs	r3, #64	; 0x40
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f6:	e006      	b.n	8005706 <UART_SetConfig+0x5a6>
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fe:	e002      	b.n	8005706 <UART_SetConfig+0x5a6>
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a3f      	ldr	r2, [pc, #252]	; (8005808 <UART_SetConfig+0x6a8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	f040 80f8 	bne.w	8005902 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005712:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005716:	2b20      	cmp	r3, #32
 8005718:	dc46      	bgt.n	80057a8 <UART_SetConfig+0x648>
 800571a:	2b02      	cmp	r3, #2
 800571c:	f2c0 8082 	blt.w	8005824 <UART_SetConfig+0x6c4>
 8005720:	3b02      	subs	r3, #2
 8005722:	2b1e      	cmp	r3, #30
 8005724:	d87e      	bhi.n	8005824 <UART_SetConfig+0x6c4>
 8005726:	a201      	add	r2, pc, #4	; (adr r2, 800572c <UART_SetConfig+0x5cc>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	080057af 	.word	0x080057af
 8005730:	08005825 	.word	0x08005825
 8005734:	080057b7 	.word	0x080057b7
 8005738:	08005825 	.word	0x08005825
 800573c:	08005825 	.word	0x08005825
 8005740:	08005825 	.word	0x08005825
 8005744:	080057c7 	.word	0x080057c7
 8005748:	08005825 	.word	0x08005825
 800574c:	08005825 	.word	0x08005825
 8005750:	08005825 	.word	0x08005825
 8005754:	08005825 	.word	0x08005825
 8005758:	08005825 	.word	0x08005825
 800575c:	08005825 	.word	0x08005825
 8005760:	08005825 	.word	0x08005825
 8005764:	080057d7 	.word	0x080057d7
 8005768:	08005825 	.word	0x08005825
 800576c:	08005825 	.word	0x08005825
 8005770:	08005825 	.word	0x08005825
 8005774:	08005825 	.word	0x08005825
 8005778:	08005825 	.word	0x08005825
 800577c:	08005825 	.word	0x08005825
 8005780:	08005825 	.word	0x08005825
 8005784:	08005825 	.word	0x08005825
 8005788:	08005825 	.word	0x08005825
 800578c:	08005825 	.word	0x08005825
 8005790:	08005825 	.word	0x08005825
 8005794:	08005825 	.word	0x08005825
 8005798:	08005825 	.word	0x08005825
 800579c:	08005825 	.word	0x08005825
 80057a0:	08005825 	.word	0x08005825
 80057a4:	08005817 	.word	0x08005817
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d037      	beq.n	800581c <UART_SetConfig+0x6bc>
 80057ac:	e03a      	b.n	8005824 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057ae:	f7fe fc51 	bl	8004054 <HAL_RCCEx_GetD3PCLK1Freq>
 80057b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057b4:	e03c      	b.n	8005830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fe fc60 	bl	8004080 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c4:	e034      	b.n	8005830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057c6:	f107 0318 	add.w	r3, r7, #24
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe fdac 	bl	8004328 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d4:	e02c      	b.n	8005830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <UART_SetConfig+0x69c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <UART_SetConfig+0x69c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	08db      	lsrs	r3, r3, #3
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	4a07      	ldr	r2, [pc, #28]	; (800580c <UART_SetConfig+0x6ac>)
 80057ee:	fa22 f303 	lsr.w	r3, r2, r3
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057f4:	e01c      	b.n	8005830 <UART_SetConfig+0x6d0>
 80057f6:	bf00      	nop
 80057f8:	40011400 	.word	0x40011400
 80057fc:	58024400 	.word	0x58024400
 8005800:	40007800 	.word	0x40007800
 8005804:	40007c00 	.word	0x40007c00
 8005808:	58000c00 	.word	0x58000c00
 800580c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005810:	4b9d      	ldr	r3, [pc, #628]	; (8005a88 <UART_SetConfig+0x928>)
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005814:	e00c      	b.n	8005830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005816:	4b9d      	ldr	r3, [pc, #628]	; (8005a8c <UART_SetConfig+0x92c>)
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800581a:	e009      	b.n	8005830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005822:	e005      	b.n	8005830 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800582e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 81de 	beq.w	8005bf4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	4a94      	ldr	r2, [pc, #592]	; (8005a90 <UART_SetConfig+0x930>)
 800583e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005842:	461a      	mov	r2, r3
 8005844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005846:	fbb3 f3f2 	udiv	r3, r3, r2
 800584a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005858:	429a      	cmp	r2, r3
 800585a:	d305      	bcc.n	8005868 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005864:	429a      	cmp	r2, r3
 8005866:	d903      	bls.n	8005870 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800586e:	e1c1      	b.n	8005bf4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005872:	2200      	movs	r2, #0
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	60fa      	str	r2, [r7, #12]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	4a84      	ldr	r2, [pc, #528]	; (8005a90 <UART_SetConfig+0x930>)
 800587e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005882:	b29b      	uxth	r3, r3
 8005884:	2200      	movs	r2, #0
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800588e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005892:	f7fa fd7d 	bl	8000390 <__aeabi_uldivmod>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4610      	mov	r0, r2
 800589c:	4619      	mov	r1, r3
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	020b      	lsls	r3, r1, #8
 80058a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058ac:	0202      	lsls	r2, r0, #8
 80058ae:	6979      	ldr	r1, [r7, #20]
 80058b0:	6849      	ldr	r1, [r1, #4]
 80058b2:	0849      	lsrs	r1, r1, #1
 80058b4:	2000      	movs	r0, #0
 80058b6:	460c      	mov	r4, r1
 80058b8:	4605      	mov	r5, r0
 80058ba:	eb12 0804 	adds.w	r8, r2, r4
 80058be:	eb43 0905 	adc.w	r9, r3, r5
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	469a      	mov	sl, r3
 80058ca:	4693      	mov	fp, r2
 80058cc:	4652      	mov	r2, sl
 80058ce:	465b      	mov	r3, fp
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fa fd5c 	bl	8000390 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4613      	mov	r3, r2
 80058de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e6:	d308      	bcc.n	80058fa <UART_SetConfig+0x79a>
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ee:	d204      	bcs.n	80058fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058f6:	60da      	str	r2, [r3, #12]
 80058f8:	e17c      	b.n	8005bf4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005900:	e178      	b.n	8005bf4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800590a:	f040 80c5 	bne.w	8005a98 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800590e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005912:	2b20      	cmp	r3, #32
 8005914:	dc48      	bgt.n	80059a8 <UART_SetConfig+0x848>
 8005916:	2b00      	cmp	r3, #0
 8005918:	db7b      	blt.n	8005a12 <UART_SetConfig+0x8b2>
 800591a:	2b20      	cmp	r3, #32
 800591c:	d879      	bhi.n	8005a12 <UART_SetConfig+0x8b2>
 800591e:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0x7c4>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	080059af 	.word	0x080059af
 8005928:	080059b7 	.word	0x080059b7
 800592c:	08005a13 	.word	0x08005a13
 8005930:	08005a13 	.word	0x08005a13
 8005934:	080059bf 	.word	0x080059bf
 8005938:	08005a13 	.word	0x08005a13
 800593c:	08005a13 	.word	0x08005a13
 8005940:	08005a13 	.word	0x08005a13
 8005944:	080059cf 	.word	0x080059cf
 8005948:	08005a13 	.word	0x08005a13
 800594c:	08005a13 	.word	0x08005a13
 8005950:	08005a13 	.word	0x08005a13
 8005954:	08005a13 	.word	0x08005a13
 8005958:	08005a13 	.word	0x08005a13
 800595c:	08005a13 	.word	0x08005a13
 8005960:	08005a13 	.word	0x08005a13
 8005964:	080059df 	.word	0x080059df
 8005968:	08005a13 	.word	0x08005a13
 800596c:	08005a13 	.word	0x08005a13
 8005970:	08005a13 	.word	0x08005a13
 8005974:	08005a13 	.word	0x08005a13
 8005978:	08005a13 	.word	0x08005a13
 800597c:	08005a13 	.word	0x08005a13
 8005980:	08005a13 	.word	0x08005a13
 8005984:	08005a13 	.word	0x08005a13
 8005988:	08005a13 	.word	0x08005a13
 800598c:	08005a13 	.word	0x08005a13
 8005990:	08005a13 	.word	0x08005a13
 8005994:	08005a13 	.word	0x08005a13
 8005998:	08005a13 	.word	0x08005a13
 800599c:	08005a13 	.word	0x08005a13
 80059a0:	08005a13 	.word	0x08005a13
 80059a4:	08005a05 	.word	0x08005a05
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d02e      	beq.n	8005a0a <UART_SetConfig+0x8aa>
 80059ac:	e031      	b.n	8005a12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ae:	f7fd f91b 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 80059b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059b4:	e033      	b.n	8005a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b6:	f7fd f92d 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 80059ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059bc:	e02f      	b.n	8005a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe fb5c 	bl	8004080 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059cc:	e027      	b.n	8005a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ce:	f107 0318 	add.w	r3, r7, #24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fca8 	bl	8004328 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059dc:	e01f      	b.n	8005a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059de:	4b2d      	ldr	r3, [pc, #180]	; (8005a94 <UART_SetConfig+0x934>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059ea:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <UART_SetConfig+0x934>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	08db      	lsrs	r3, r3, #3
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	4a24      	ldr	r2, [pc, #144]	; (8005a88 <UART_SetConfig+0x928>)
 80059f6:	fa22 f303 	lsr.w	r3, r2, r3
 80059fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059fc:	e00f      	b.n	8005a1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80059fe:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <UART_SetConfig+0x928>)
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a02:	e00c      	b.n	8005a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a04:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <UART_SetConfig+0x92c>)
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a08:	e009      	b.n	8005a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a10:	e005      	b.n	8005a1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80e7 	beq.w	8005bf4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <UART_SetConfig+0x930>)
 8005a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a38:	005a      	lsls	r2, r3, #1
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	441a      	add	r2, r3
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	d916      	bls.n	8005a80 <UART_SetConfig+0x920>
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a58:	d212      	bcs.n	8005a80 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f023 030f 	bic.w	r3, r3, #15
 8005a62:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a72:	4313      	orrs	r3, r2
 8005a74:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005a7c:	60da      	str	r2, [r3, #12]
 8005a7e:	e0b9      	b.n	8005bf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a86:	e0b5      	b.n	8005bf4 <UART_SetConfig+0xa94>
 8005a88:	03d09000 	.word	0x03d09000
 8005a8c:	003d0900 	.word	0x003d0900
 8005a90:	0800b518 	.word	0x0800b518
 8005a94:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	dc49      	bgt.n	8005b34 <UART_SetConfig+0x9d4>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	db7c      	blt.n	8005b9e <UART_SetConfig+0xa3e>
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d87a      	bhi.n	8005b9e <UART_SetConfig+0xa3e>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <UART_SetConfig+0x950>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005b3b 	.word	0x08005b3b
 8005ab4:	08005b43 	.word	0x08005b43
 8005ab8:	08005b9f 	.word	0x08005b9f
 8005abc:	08005b9f 	.word	0x08005b9f
 8005ac0:	08005b4b 	.word	0x08005b4b
 8005ac4:	08005b9f 	.word	0x08005b9f
 8005ac8:	08005b9f 	.word	0x08005b9f
 8005acc:	08005b9f 	.word	0x08005b9f
 8005ad0:	08005b5b 	.word	0x08005b5b
 8005ad4:	08005b9f 	.word	0x08005b9f
 8005ad8:	08005b9f 	.word	0x08005b9f
 8005adc:	08005b9f 	.word	0x08005b9f
 8005ae0:	08005b9f 	.word	0x08005b9f
 8005ae4:	08005b9f 	.word	0x08005b9f
 8005ae8:	08005b9f 	.word	0x08005b9f
 8005aec:	08005b9f 	.word	0x08005b9f
 8005af0:	08005b6b 	.word	0x08005b6b
 8005af4:	08005b9f 	.word	0x08005b9f
 8005af8:	08005b9f 	.word	0x08005b9f
 8005afc:	08005b9f 	.word	0x08005b9f
 8005b00:	08005b9f 	.word	0x08005b9f
 8005b04:	08005b9f 	.word	0x08005b9f
 8005b08:	08005b9f 	.word	0x08005b9f
 8005b0c:	08005b9f 	.word	0x08005b9f
 8005b10:	08005b9f 	.word	0x08005b9f
 8005b14:	08005b9f 	.word	0x08005b9f
 8005b18:	08005b9f 	.word	0x08005b9f
 8005b1c:	08005b9f 	.word	0x08005b9f
 8005b20:	08005b9f 	.word	0x08005b9f
 8005b24:	08005b9f 	.word	0x08005b9f
 8005b28:	08005b9f 	.word	0x08005b9f
 8005b2c:	08005b9f 	.word	0x08005b9f
 8005b30:	08005b91 	.word	0x08005b91
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d02e      	beq.n	8005b96 <UART_SetConfig+0xa36>
 8005b38:	e031      	b.n	8005b9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3a:	f7fd f855 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 8005b3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b40:	e033      	b.n	8005baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b42:	f7fd f867 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8005b46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b48:	e02f      	b.n	8005baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fa96 	bl	8004080 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b58:	e027      	b.n	8005baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b5a:	f107 0318 	add.w	r3, r7, #24
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fbe2 	bl	8004328 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b68:	e01f      	b.n	8005baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b6a:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <UART_SetConfig+0xac0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b76:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <UART_SetConfig+0xac0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	08db      	lsrs	r3, r3, #3
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	4a28      	ldr	r2, [pc, #160]	; (8005c24 <UART_SetConfig+0xac4>)
 8005b82:	fa22 f303 	lsr.w	r3, r2, r3
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b88:	e00f      	b.n	8005baa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005b8a:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <UART_SetConfig+0xac4>)
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b8e:	e00c      	b.n	8005baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b90:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <UART_SetConfig+0xac8>)
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b94:	e009      	b.n	8005baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b9c:	e005      	b.n	8005baa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ba8:	bf00      	nop
    }

    if (pclk != 0U)
 8005baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d021      	beq.n	8005bf4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <UART_SetConfig+0xacc>)
 8005bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	441a      	add	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d909      	bls.n	8005bee <UART_SetConfig+0xa8e>
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be0:	d205      	bcs.n	8005bee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	e002      	b.n	8005bf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c10:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3748      	adds	r7, #72	; 0x48
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c1e:	bf00      	nop
 8005c20:	58024400 	.word	0x58024400
 8005c24:	03d09000 	.word	0x03d09000
 8005c28:	003d0900 	.word	0x003d0900
 8005c2c:	0800b518 	.word	0x0800b518

08005c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2e:	d10a      	bne.n	8005d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b098      	sub	sp, #96	; 0x60
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d84:	f7fb fb46 	bl	8001414 <HAL_GetTick>
 8005d88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d12f      	bne.n	8005df8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da0:	2200      	movs	r2, #0
 8005da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f88e 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d022      	beq.n	8005df8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e6      	bne.n	8005db2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e063      	b.n	8005ec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d149      	bne.n	8005e9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f857 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d03c      	beq.n	8005e9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e6      	bne.n	8005e20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3308      	adds	r3, #8
 8005e58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e72:	61fa      	str	r2, [r7, #28]
 8005e74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	69b9      	ldr	r1, [r7, #24]
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e012      	b.n	8005ec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3758      	adds	r7, #88	; 0x58
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed8:	e049      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d045      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee2:	f7fb fa97 	bl	8001414 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e048      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d031      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d110      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f839 	bl	8005f98 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e029      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f48:	d111      	bne.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f81f 	bl	8005f98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e00f      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d0a6      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b095      	sub	sp, #84	; 0x54
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e6      	bne.n	8005fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <UART_EndRxTransfer+0xc8>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d118      	bne.n	8006040 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	60bb      	str	r3, [r7, #8]
   return(result);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f023 0310 	bic.w	r3, r3, #16
 8006022:	647b      	str	r3, [r7, #68]	; 0x44
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	613b      	str	r3, [r7, #16]
   return(result);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e6      	bne.n	800600e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006054:	bf00      	nop
 8006056:	3754      	adds	r7, #84	; 0x54
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	effffffe 	.word	0xeffffffe

08006064 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_UARTEx_DisableFifoMode+0x16>
 8006076:	2302      	movs	r3, #2
 8006078:	e027      	b.n	80060ca <HAL_UARTEx_DisableFifoMode+0x66>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2224      	movs	r2, #36	; 0x24
 8006086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e02d      	b.n	800614a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2224      	movs	r2, #36	; 0x24
 80060fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f850 	bl	80061d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006166:	2302      	movs	r3, #2
 8006168:	e02d      	b.n	80061c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2224      	movs	r2, #36	; 0x24
 8006176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0201 	bic.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f812 	bl	80061d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d108      	bne.n	80061f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061f0:	e031      	b.n	8006256 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061f2:	2310      	movs	r3, #16
 80061f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061f6:	2310      	movs	r3, #16
 80061f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	0e5b      	lsrs	r3, r3, #25
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	0f5b      	lsrs	r3, r3, #29
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	7b3a      	ldrb	r2, [r7, #12]
 800621e:	4911      	ldr	r1, [pc, #68]	; (8006264 <UARTEx_SetNbDataToProcess+0x94>)
 8006220:	5c8a      	ldrb	r2, [r1, r2]
 8006222:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006226:	7b3a      	ldrb	r2, [r7, #12]
 8006228:	490f      	ldr	r1, [pc, #60]	; (8006268 <UARTEx_SetNbDataToProcess+0x98>)
 800622a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800622c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006230:	b29a      	uxth	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	7b7a      	ldrb	r2, [r7, #13]
 800623c:	4909      	ldr	r1, [pc, #36]	; (8006264 <UARTEx_SetNbDataToProcess+0x94>)
 800623e:	5c8a      	ldrb	r2, [r1, r2]
 8006240:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006244:	7b7a      	ldrb	r2, [r7, #13]
 8006246:	4908      	ldr	r1, [pc, #32]	; (8006268 <UARTEx_SetNbDataToProcess+0x98>)
 8006248:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624a:	fb93 f3f2 	sdiv	r3, r3, r2
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	0800b530 	.word	0x0800b530
 8006268:	0800b538 	.word	0x0800b538

0800626c <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	2101      	movs	r1, #1
 800627a:	4825      	ldr	r0, [pc, #148]	; (8006310 <sine_model_configure_activations+0xa4>)
 800627c:	f000 fa4c 	bl	8006718 <ai_platform_get_activations_map>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d039      	beq.n	80062fa <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 8006286:	4b22      	ldr	r3, [pc, #136]	; (8006310 <sine_model_configure_activations+0xa4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	333c      	adds	r3, #60	; 0x3c
 800628c:	4a21      	ldr	r2, [pc, #132]	; (8006314 <sine_model_configure_activations+0xa8>)
 800628e:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8006290:	4b1f      	ldr	r3, [pc, #124]	; (8006310 <sine_model_configure_activations+0xa4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	333c      	adds	r3, #60	; 0x3c
 8006296:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <sine_model_configure_activations+0xa8>)
 8006298:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 800629a:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <sine_model_configure_activations+0xa4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3340      	adds	r3, #64	; 0x40
 80062a0:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <sine_model_configure_activations+0xac>)
 80062a2:	6093      	str	r3, [r2, #8]
    dense_9_dense_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 80062a4:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <sine_model_configure_activations+0xa4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3340      	adds	r3, #64	; 0x40
 80062aa:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <sine_model_configure_activations+0xac>)
 80062ac:	60d3      	str	r3, [r2, #12]
    
    dense_9_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 80062ae:	4b18      	ldr	r3, [pc, #96]	; (8006310 <sine_model_configure_activations+0xa4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3340      	adds	r3, #64	; 0x40
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <sine_model_configure_activations+0xb0>)
 80062b6:	6093      	str	r3, [r2, #8]
    dense_9_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <sine_model_configure_activations+0xa4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3340      	adds	r3, #64	; 0x40
 80062be:	4a17      	ldr	r2, [pc, #92]	; (800631c <sine_model_configure_activations+0xb0>)
 80062c0:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 80062c2:	4b13      	ldr	r3, [pc, #76]	; (8006310 <sine_model_configure_activations+0xa4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a16      	ldr	r2, [pc, #88]	; (8006320 <sine_model_configure_activations+0xb4>)
 80062c8:	6093      	str	r3, [r2, #8]
    dense_10_dense_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 80062ca:	4b11      	ldr	r3, [pc, #68]	; (8006310 <sine_model_configure_activations+0xa4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a14      	ldr	r2, [pc, #80]	; (8006320 <sine_model_configure_activations+0xb4>)
 80062d0:	60d3      	str	r3, [r2, #12]
    
    dense_10_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 80062d2:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <sine_model_configure_activations+0xa4>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3340      	adds	r3, #64	; 0x40
 80062d8:	4a12      	ldr	r2, [pc, #72]	; (8006324 <sine_model_configure_activations+0xb8>)
 80062da:	6093      	str	r3, [r2, #8]
    dense_10_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 80062dc:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <sine_model_configure_activations+0xa4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3340      	adds	r3, #64	; 0x40
 80062e2:	4a10      	ldr	r2, [pc, #64]	; (8006324 <sine_model_configure_activations+0xb8>)
 80062e4:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <sine_model_configure_activations+0xa4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a0f      	ldr	r2, [pc, #60]	; (8006328 <sine_model_configure_activations+0xbc>)
 80062ec:	6093      	str	r3, [r2, #8]
    dense_11_dense_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 80062ee:	4b08      	ldr	r3, [pc, #32]	; (8006310 <sine_model_configure_activations+0xa4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a0d      	ldr	r2, [pc, #52]	; (8006328 <sine_model_configure_activations+0xbc>)
 80062f4:	60d3      	str	r3, [r2, #12]
    
    return true;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e005      	b.n	8006306 <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80062fa:	2213      	movs	r2, #19
 80062fc:	2130      	movs	r1, #48	; 0x30
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fa62 	bl	80067c8 <ai_platform_network_set_error>
  return false;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	240009e8 	.word	0x240009e8
 8006314:	24000010 	.word	0x24000010
 8006318:	24000030 	.word	0x24000030
 800631c:	24000040 	.word	0x24000040
 8006320:	24000060 	.word	0x24000060
 8006324:	24000070 	.word	0x24000070
 8006328:	24000080 	.word	0x24000080

0800632c <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	2101      	movs	r1, #1
 800633a:	4839      	ldr	r0, [pc, #228]	; (8006420 <sine_model_configure_weights+0xf4>)
 800633c:	f000 f994 	bl	8006668 <ai_platform_get_weights_map>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d061      	beq.n	800640a <sine_model_configure_weights+0xde>
    /* Updating weights (byte) offsets */
    
    dense_11_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006346:	4b37      	ldr	r3, [pc, #220]	; (8006424 <sine_model_configure_weights+0xf8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800634e:	4a35      	ldr	r2, [pc, #212]	; (8006424 <sine_model_configure_weights+0xf8>)
 8006350:	6013      	str	r3, [r2, #0]
    dense_11_dense_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 8006352:	4b33      	ldr	r3, [pc, #204]	; (8006420 <sine_model_configure_weights+0xf4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a33      	ldr	r2, [pc, #204]	; (8006424 <sine_model_configure_weights+0xf8>)
 8006358:	6093      	str	r3, [r2, #8]
    dense_11_dense_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 800635a:	4b31      	ldr	r3, [pc, #196]	; (8006420 <sine_model_configure_weights+0xf4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a31      	ldr	r2, [pc, #196]	; (8006424 <sine_model_configure_weights+0xf8>)
 8006360:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006362:	4b31      	ldr	r3, [pc, #196]	; (8006428 <sine_model_configure_weights+0xfc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800636a:	4a2f      	ldr	r2, [pc, #188]	; (8006428 <sine_model_configure_weights+0xfc>)
 800636c:	6013      	str	r3, [r2, #0]
    dense_11_dense_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 800636e:	4b2c      	ldr	r3, [pc, #176]	; (8006420 <sine_model_configure_weights+0xf4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3340      	adds	r3, #64	; 0x40
 8006374:	4a2c      	ldr	r2, [pc, #176]	; (8006428 <sine_model_configure_weights+0xfc>)
 8006376:	6093      	str	r3, [r2, #8]
    dense_11_dense_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 8006378:	4b29      	ldr	r3, [pc, #164]	; (8006420 <sine_model_configure_weights+0xf4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3340      	adds	r3, #64	; 0x40
 800637e:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <sine_model_configure_weights+0xfc>)
 8006380:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006382:	4b2a      	ldr	r3, [pc, #168]	; (800642c <sine_model_configure_weights+0x100>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800638a:	4a28      	ldr	r2, [pc, #160]	; (800642c <sine_model_configure_weights+0x100>)
 800638c:	6013      	str	r3, [r2, #0]
    dense_9_dense_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 68);
 800638e:	4b24      	ldr	r3, [pc, #144]	; (8006420 <sine_model_configure_weights+0xf4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3344      	adds	r3, #68	; 0x44
 8006394:	4a25      	ldr	r2, [pc, #148]	; (800642c <sine_model_configure_weights+0x100>)
 8006396:	6093      	str	r3, [r2, #8]
    dense_9_dense_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 68);
 8006398:	4b21      	ldr	r3, [pc, #132]	; (8006420 <sine_model_configure_weights+0xf4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3344      	adds	r3, #68	; 0x44
 800639e:	4a23      	ldr	r2, [pc, #140]	; (800642c <sine_model_configure_weights+0x100>)
 80063a0:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80063a2:	4b23      	ldr	r3, [pc, #140]	; (8006430 <sine_model_configure_weights+0x104>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063aa:	4a21      	ldr	r2, [pc, #132]	; (8006430 <sine_model_configure_weights+0x104>)
 80063ac:	6013      	str	r3, [r2, #0]
    dense_9_dense_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 132);
 80063ae:	4b1c      	ldr	r3, [pc, #112]	; (8006420 <sine_model_configure_weights+0xf4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3384      	adds	r3, #132	; 0x84
 80063b4:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <sine_model_configure_weights+0x104>)
 80063b6:	6093      	str	r3, [r2, #8]
    dense_9_dense_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 132);
 80063b8:	4b19      	ldr	r3, [pc, #100]	; (8006420 <sine_model_configure_weights+0xf4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3384      	adds	r3, #132	; 0x84
 80063be:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <sine_model_configure_weights+0x104>)
 80063c0:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <sine_model_configure_weights+0x108>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ca:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <sine_model_configure_weights+0x108>)
 80063cc:	6013      	str	r3, [r2, #0]
    dense_10_dense_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 196);
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <sine_model_configure_weights+0xf4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	33c4      	adds	r3, #196	; 0xc4
 80063d4:	4a17      	ldr	r2, [pc, #92]	; (8006434 <sine_model_configure_weights+0x108>)
 80063d6:	6093      	str	r3, [r2, #8]
    dense_10_dense_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 196);
 80063d8:	4b11      	ldr	r3, [pc, #68]	; (8006420 <sine_model_configure_weights+0xf4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	33c4      	adds	r3, #196	; 0xc4
 80063de:	4a15      	ldr	r2, [pc, #84]	; (8006434 <sine_model_configure_weights+0x108>)
 80063e0:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <sine_model_configure_weights+0x10c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ea:	4a13      	ldr	r2, [pc, #76]	; (8006438 <sine_model_configure_weights+0x10c>)
 80063ec:	6013      	str	r3, [r2, #0]
    dense_10_dense_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1220);
 80063ee:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <sine_model_configure_weights+0xf4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063f6:	4a10      	ldr	r2, [pc, #64]	; (8006438 <sine_model_configure_weights+0x10c>)
 80063f8:	6093      	str	r3, [r2, #8]
    dense_10_dense_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1220);
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <sine_model_configure_weights+0xf4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006402:	4a0d      	ldr	r2, [pc, #52]	; (8006438 <sine_model_configure_weights+0x10c>)
 8006404:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006406:	2301      	movs	r3, #1
 8006408:	e005      	b.n	8006416 <sine_model_configure_weights+0xea>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800640a:	2212      	movs	r2, #18
 800640c:	2130      	movs	r1, #48	; 0x30
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f9da 	bl	80067c8 <ai_platform_network_set_error>
  return false;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	240009ec 	.word	0x240009ec
 8006424:	24000020 	.word	0x24000020
 8006428:	24000050 	.word	0x24000050
 800642c:	24000090 	.word	0x24000090
 8006430:	240000a0 	.word	0x240000a0
 8006434:	240000b0 	.word	0x240000b0
 8006438:	240000c0 	.word	0x240000c0

0800643c <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af02      	add	r7, sp, #8
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006446:	2300      	movs	r3, #0
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	2305      	movs	r3, #5
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2301      	movs	r3, #1
 8006450:	4a04      	ldr	r2, [pc, #16]	; (8006464 <ai_sine_model_create+0x28>)
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9bd 	bl	80067d4 <ai_platform_network_create>
 800645a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	240005f4 	.word	0x240005f4

08006468 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fb87 	bl	8006b88 <ai_platform_network_init>
 800647a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <ai_sine_model_init+0x1e>
 8006482:	2300      	movs	r3, #0
 8006484:	e028      	b.n	80064d8 <ai_sine_model_init+0x70>

  ai_bool ok = true;
 8006486:	2301      	movs	r3, #1
 8006488:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, params);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff ff4d 	bl	800632c <sine_model_configure_weights>
 8006492:	4603      	mov	r3, r0
 8006494:	461a      	mov	r2, r3
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf14      	ite	ne
 800649e:	2301      	movne	r3, #1
 80064a0:	2300      	moveq	r3, #0
 80064a2:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f7ff fee0 	bl	800626c <sine_model_configure_activations>
 80064ac:	4603      	mov	r3, r0
 80064ae:	461a      	mov	r2, r3
 80064b0:	7afb      	ldrb	r3, [r7, #11]
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf14      	ite	ne
 80064b8:	2301      	movne	r3, #1
 80064ba:	2300      	moveq	r3, #0
 80064bc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fcfe 	bl	8006ec0 <ai_platform_network_post_init>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	7afb      	ldrb	r3, [r7, #11]
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bf14      	ite	ne
 80064d0:	2301      	movne	r3, #1
 80064d2:	2300      	moveq	r3, #0
 80064d4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80064d6:	7afb      	ldrb	r3, [r7, #11]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fe0f 	bl	8007114 <ai_platform_network_process>
 80064f6:	4603      	mov	r3, r0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <ai_sine_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_activations_buffer_get(const ai_handle ptr)
{
 8006500:	b4b0      	push	{r4, r5, r7}
 8006502:	b08f      	sub	sp, #60	; 0x3c
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <ai_sine_model_data_activations_buffer_get+0x60>)
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	623b      	str	r3, [r7, #32]
 8006512:	2300      	movs	r3, #0
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
 8006516:	2300      	movs	r3, #0
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651e:	2301      	movs	r3, #1
 8006520:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	2204      	movs	r2, #4
 8006528:	f362 231f 	bfi	r3, r2, #8, #24
 800652c:	633b      	str	r3, [r7, #48]	; 0x30
 800652e:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <ai_sine_model_data_activations_buffer_get+0x64>)
 8006530:	f107 040c 	add.w	r4, r7, #12
 8006534:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006536:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800653a:	f107 030c 	add.w	r3, r7, #12
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	461d      	mov	r5, r3
 8006544:	f107 041c 	add.w	r4, r7, #28
 8006548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800654a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800654c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006550:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	373c      	adds	r7, #60	; 0x3c
 8006558:	46bd      	mov	sp, r7
 800655a:	bcb0      	pop	{r4, r5, r7}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	00040440 	.word	0x00040440
 8006564:	0800b4d8 	.word	0x0800b4d8

08006568 <ai_sine_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_weights_buffer_get(const ai_handle ptr)
{
 8006568:	b4b0      	push	{r4, r5, r7}
 800656a:	b08f      	sub	sp, #60	; 0x3c
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8006572:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <ai_sine_model_data_weights_buffer_get+0x60>)
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	2300      	movs	r3, #0
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
 800657e:	2300      	movs	r3, #0
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
 8006582:	f240 5304 	movw	r3, #1284	; 0x504
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006588:	2301      	movs	r3, #1
 800658a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2204      	movs	r2, #4
 8006592:	f362 231f 	bfi	r3, r2, #8, #24
 8006596:	633b      	str	r3, [r7, #48]	; 0x30
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <ai_sine_model_data_weights_buffer_get+0x64>)
 800659a:	f107 040c 	add.w	r4, r7, #12
 800659e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80065a4:	f107 030c 	add.w	r3, r7, #12
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	461d      	mov	r5, r3
 80065ae:	f107 041c 	add.w	r4, r7, #28
 80065b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80065ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	373c      	adds	r7, #60	; 0x3c
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bcb0      	pop	{r4, r5, r7}
 80065c6:	4770      	bx	lr
 80065c8:	40040440 	.word	0x40040440
 80065cc:	0800b4e8 	.word	0x0800b4e8

080065d0 <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_sine_model_weights_table);
 80065d4:	4b02      	ldr	r3, [pc, #8]	; (80065e0 <ai_sine_model_data_weights_get+0x10>)

}
 80065d6:	4618      	mov	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	24000698 	.word	0x24000698

080065e4 <ai_buffer_get_size>:
 80065e4:	b368      	cbz	r0, 8006642 <ai_buffer_get_size+0x5e>
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <ai_buffer_get_size+0x60>)
 80065e8:	4a17      	ldr	r2, [pc, #92]	; (8006648 <ai_buffer_get_size+0x64>)
 80065ea:	b410      	push	{r4}
 80065ec:	6804      	ldr	r4, [r0, #0]
 80065ee:	4023      	ands	r3, r4
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d123      	bne.n	800663c <ai_buffer_get_size+0x58>
 80065f4:	b311      	cbz	r1, 800663c <ai_buffer_get_size+0x58>
 80065f6:	6984      	ldr	r4, [r0, #24]
 80065f8:	6862      	ldr	r2, [r4, #4]
 80065fa:	321f      	adds	r2, #31
 80065fc:	f022 021f 	bic.w	r2, r2, #31
 8006600:	7d03      	ldrb	r3, [r0, #20]
 8006602:	6941      	ldr	r1, [r0, #20]
 8006604:	f1a3 0301 	sub.w	r3, r3, #1
 8006608:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800660c:	fab3 f383 	clz	r3, r3
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006616:	da0c      	bge.n	8006632 <ai_buffer_get_size+0x4e>
 8006618:	2b01      	cmp	r3, #1
 800661a:	d103      	bne.n	8006624 <ai_buffer_get_size+0x40>
 800661c:	2802      	cmp	r0, #2
 800661e:	f04f 0302 	mov.w	r3, #2
 8006622:	d006      	beq.n	8006632 <ai_buffer_get_size+0x4e>
 8006624:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006628:	3301      	adds	r3, #1
 800662a:	4298      	cmp	r0, r3
 800662c:	fb01 f202 	mul.w	r2, r1, r2
 8006630:	d1f2      	bne.n	8006618 <ai_buffer_get_size+0x34>
 8006632:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	6984      	ldr	r4, [r0, #24]
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	e7de      	b.n	8006600 <ai_buffer_get_size+0x1c>
 8006642:	4770      	bx	lr
 8006644:	017fffff 	.word	0x017fffff
 8006648:	000400c0 	.word	0x000400c0

0800664c <ai_buffer_array_sane>:
 800664c:	b138      	cbz	r0, 800665e <ai_buffer_array_sane+0x12>
 800664e:	6843      	ldr	r3, [r0, #4]
 8006650:	b123      	cbz	r3, 800665c <ai_buffer_array_sane+0x10>
 8006652:	8840      	ldrh	r0, [r0, #2]
 8006654:	3800      	subs	r0, #0
 8006656:	bf18      	it	ne
 8006658:	2001      	movne	r0, #1
 800665a:	4770      	bx	lr
 800665c:	4618      	mov	r0, r3
 800665e:	4770      	bx	lr

08006660 <_ai_platform_acquire_crc>:
 8006660:	2001      	movs	r0, #1
 8006662:	4770      	bx	lr

08006664 <_ai_platform_release_crc>:
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop

08006668 <ai_platform_get_weights_map>:
 8006668:	2900      	cmp	r1, #0
 800666a:	bf18      	it	ne
 800666c:	2800      	cmpne	r0, #0
 800666e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006670:	bf0c      	ite	eq
 8006672:	2401      	moveq	r4, #1
 8006674:	2400      	movne	r4, #0
 8006676:	2a00      	cmp	r2, #0
 8006678:	bf08      	it	eq
 800667a:	f044 0401 	orreq.w	r4, r4, #1
 800667e:	b114      	cbz	r4, 8006686 <ai_platform_get_weights_map+0x1e>
 8006680:	2400      	movs	r4, #0
 8006682:	4620      	mov	r0, r4
 8006684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006686:	4616      	mov	r6, r2
 8006688:	4b22      	ldr	r3, [pc, #136]	; (8006714 <ai_platform_get_weights_map+0xac>)
 800668a:	6812      	ldr	r2, [r2, #0]
 800668c:	4605      	mov	r5, r0
 800668e:	460f      	mov	r7, r1
 8006690:	429a      	cmp	r2, r3
 8006692:	d022      	beq.n	80066da <ai_platform_get_weights_map+0x72>
 8006694:	6870      	ldr	r0, [r6, #4]
 8006696:	2800      	cmp	r0, #0
 8006698:	d0f2      	beq.n	8006680 <ai_platform_get_weights_map+0x18>
 800669a:	6806      	ldr	r6, [r0, #0]
 800669c:	429e      	cmp	r6, r3
 800669e:	d006      	beq.n	80066ae <ai_platform_get_weights_map+0x46>
 80066a0:	f1a1 0401 	sub.w	r4, r1, #1
 80066a4:	6028      	str	r0, [r5, #0]
 80066a6:	fab4 f484 	clz	r4, r4
 80066aa:	0964      	lsrs	r4, r4, #5
 80066ac:	e7e9      	b.n	8006682 <ai_platform_get_weights_map+0x1a>
 80066ae:	3d04      	subs	r5, #4
 80066b0:	4602      	mov	r2, r0
 80066b2:	4621      	mov	r1, r4
 80066b4:	e000      	b.n	80066b8 <ai_platform_get_weights_map+0x50>
 80066b6:	4619      	mov	r1, r3
 80066b8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80066bc:	42b3      	cmp	r3, r6
 80066be:	d025      	beq.n	800670c <ai_platform_get_weights_map+0xa4>
 80066c0:	f845 3f04 	str.w	r3, [r5, #4]!
 80066c4:	1c4b      	adds	r3, r1, #1
 80066c6:	429f      	cmp	r7, r3
 80066c8:	d8f5      	bhi.n	80066b6 <ai_platform_get_weights_map+0x4e>
 80066ca:	d1da      	bne.n	8006682 <ai_platform_get_weights_map+0x1a>
 80066cc:	3102      	adds	r1, #2
 80066ce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80066d2:	42b3      	cmp	r3, r6
 80066d4:	d1d5      	bne.n	8006682 <ai_platform_get_weights_map+0x1a>
 80066d6:	2401      	movs	r4, #1
 80066d8:	e7d3      	b.n	8006682 <ai_platform_get_weights_map+0x1a>
 80066da:	1d30      	adds	r0, r6, #4
 80066dc:	f7ff ffb6 	bl	800664c <ai_buffer_array_sane>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d0cd      	beq.n	8006680 <ai_platform_get_weights_map+0x18>
 80066e4:	88f3      	ldrh	r3, [r6, #6]
 80066e6:	429f      	cmp	r7, r3
 80066e8:	d1ca      	bne.n	8006680 <ai_platform_get_weights_map+0x18>
 80066ea:	3d04      	subs	r5, #4
 80066ec:	4622      	mov	r2, r4
 80066ee:	68b3      	ldr	r3, [r6, #8]
 80066f0:	4423      	add	r3, r4
 80066f2:	341c      	adds	r4, #28
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	b123      	cbz	r3, 8006702 <ai_platform_get_weights_map+0x9a>
 80066f8:	3201      	adds	r2, #1
 80066fa:	f845 3f04 	str.w	r3, [r5, #4]!
 80066fe:	4297      	cmp	r7, r2
 8006700:	d8f5      	bhi.n	80066ee <ai_platform_get_weights_map+0x86>
 8006702:	1abc      	subs	r4, r7, r2
 8006704:	fab4 f484 	clz	r4, r4
 8006708:	0964      	lsrs	r4, r4, #5
 800670a:	e7ba      	b.n	8006682 <ai_platform_get_weights_map+0x1a>
 800670c:	428f      	cmp	r7, r1
 800670e:	d1b8      	bne.n	8006682 <ai_platform_get_weights_map+0x1a>
 8006710:	e7e1      	b.n	80066d6 <ai_platform_get_weights_map+0x6e>
 8006712:	bf00      	nop
 8006714:	a1facade 	.word	0xa1facade

08006718 <ai_platform_get_activations_map>:
 8006718:	2900      	cmp	r1, #0
 800671a:	bf18      	it	ne
 800671c:	2800      	cmpne	r0, #0
 800671e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006720:	bf0c      	ite	eq
 8006722:	2401      	moveq	r4, #1
 8006724:	2400      	movne	r4, #0
 8006726:	2a00      	cmp	r2, #0
 8006728:	bf08      	it	eq
 800672a:	f044 0401 	orreq.w	r4, r4, #1
 800672e:	b114      	cbz	r4, 8006736 <ai_platform_get_activations_map+0x1e>
 8006730:	2400      	movs	r4, #0
 8006732:	4620      	mov	r0, r4
 8006734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006736:	4616      	mov	r6, r2
 8006738:	4b22      	ldr	r3, [pc, #136]	; (80067c4 <ai_platform_get_activations_map+0xac>)
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	4605      	mov	r5, r0
 800673e:	460f      	mov	r7, r1
 8006740:	429a      	cmp	r2, r3
 8006742:	d022      	beq.n	800678a <ai_platform_get_activations_map+0x72>
 8006744:	6a30      	ldr	r0, [r6, #32]
 8006746:	2800      	cmp	r0, #0
 8006748:	d0f2      	beq.n	8006730 <ai_platform_get_activations_map+0x18>
 800674a:	6806      	ldr	r6, [r0, #0]
 800674c:	429e      	cmp	r6, r3
 800674e:	d006      	beq.n	800675e <ai_platform_get_activations_map+0x46>
 8006750:	f1a1 0401 	sub.w	r4, r1, #1
 8006754:	6028      	str	r0, [r5, #0]
 8006756:	fab4 f484 	clz	r4, r4
 800675a:	0964      	lsrs	r4, r4, #5
 800675c:	e7e9      	b.n	8006732 <ai_platform_get_activations_map+0x1a>
 800675e:	3d04      	subs	r5, #4
 8006760:	4602      	mov	r2, r0
 8006762:	4621      	mov	r1, r4
 8006764:	e000      	b.n	8006768 <ai_platform_get_activations_map+0x50>
 8006766:	4619      	mov	r1, r3
 8006768:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800676c:	42b3      	cmp	r3, r6
 800676e:	d026      	beq.n	80067be <ai_platform_get_activations_map+0xa6>
 8006770:	f845 3f04 	str.w	r3, [r5, #4]!
 8006774:	1c4b      	adds	r3, r1, #1
 8006776:	429f      	cmp	r7, r3
 8006778:	d8f5      	bhi.n	8006766 <ai_platform_get_activations_map+0x4e>
 800677a:	d1da      	bne.n	8006732 <ai_platform_get_activations_map+0x1a>
 800677c:	3102      	adds	r1, #2
 800677e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006782:	42b3      	cmp	r3, r6
 8006784:	d1d5      	bne.n	8006732 <ai_platform_get_activations_map+0x1a>
 8006786:	2401      	movs	r4, #1
 8006788:	e7d3      	b.n	8006732 <ai_platform_get_activations_map+0x1a>
 800678a:	f106 000c 	add.w	r0, r6, #12
 800678e:	f7ff ff5d 	bl	800664c <ai_buffer_array_sane>
 8006792:	2800      	cmp	r0, #0
 8006794:	d0cc      	beq.n	8006730 <ai_platform_get_activations_map+0x18>
 8006796:	89f3      	ldrh	r3, [r6, #14]
 8006798:	429f      	cmp	r7, r3
 800679a:	d1c9      	bne.n	8006730 <ai_platform_get_activations_map+0x18>
 800679c:	3d04      	subs	r5, #4
 800679e:	4622      	mov	r2, r4
 80067a0:	6933      	ldr	r3, [r6, #16]
 80067a2:	4423      	add	r3, r4
 80067a4:	341c      	adds	r4, #28
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	b123      	cbz	r3, 80067b4 <ai_platform_get_activations_map+0x9c>
 80067aa:	3201      	adds	r2, #1
 80067ac:	f845 3f04 	str.w	r3, [r5, #4]!
 80067b0:	4297      	cmp	r7, r2
 80067b2:	d8f5      	bhi.n	80067a0 <ai_platform_get_activations_map+0x88>
 80067b4:	1abc      	subs	r4, r7, r2
 80067b6:	fab4 f484 	clz	r4, r4
 80067ba:	0964      	lsrs	r4, r4, #5
 80067bc:	e7b9      	b.n	8006732 <ai_platform_get_activations_map+0x1a>
 80067be:	428f      	cmp	r7, r1
 80067c0:	d1b7      	bne.n	8006732 <ai_platform_get_activations_map+0x1a>
 80067c2:	e7e0      	b.n	8006786 <ai_platform_get_activations_map+0x6e>
 80067c4:	a1facade 	.word	0xa1facade

080067c8 <ai_platform_network_set_error>:
 80067c8:	b110      	cbz	r0, 80067d0 <ai_platform_network_set_error+0x8>
 80067ca:	3010      	adds	r0, #16
 80067cc:	f000 bf82 	b.w	80076d4 <core_set_error>
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop

080067d4 <ai_platform_network_create>:
 80067d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067d8:	b083      	sub	sp, #12
 80067da:	4604      	mov	r4, r0
 80067dc:	4615      	mov	r5, r2
 80067de:	461e      	mov	r6, r3
 80067e0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80067e4:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80067e8:	f7ff ff3a 	bl	8006660 <_ai_platform_acquire_crc>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f000 80bd 	beq.w	800696c <ai_platform_network_create+0x198>
 80067f2:	4ba5      	ldr	r3, [pc, #660]	; (8006a88 <ai_platform_network_create+0x2b4>)
 80067f4:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80067f8:	4601      	mov	r1, r0
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006800:	eb03 020c 	add.w	r2, r3, ip
 8006804:	2a01      	cmp	r2, #1
 8006806:	f240 80a8 	bls.w	800695a <ai_platform_network_create+0x186>
 800680a:	f240 4249 	movw	r2, #1097	; 0x449
 800680e:	4293      	cmp	r3, r2
 8006810:	f000 80a3 	beq.w	800695a <ai_platform_network_create+0x186>
 8006814:	4a9d      	ldr	r2, [pc, #628]	; (8006a8c <ai_platform_network_create+0x2b8>)
 8006816:	6813      	ldr	r3, [r2, #0]
 8006818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800681c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006820:	f000 80b9 	beq.w	8006996 <ai_platform_network_create+0x1c2>
 8006824:	6813      	ldr	r3, [r2, #0]
 8006826:	f240 4c83 	movw	ip, #1155	; 0x483
 800682a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800682e:	4563      	cmp	r3, ip
 8006830:	f000 80a1 	beq.w	8006976 <ai_platform_network_create+0x1a2>
 8006834:	6813      	ldr	r3, [r2, #0]
 8006836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800683a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800683e:	f000 8153 	beq.w	8006ae8 <ai_platform_network_create+0x314>
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006848:	2b00      	cmp	r3, #0
 800684a:	f040 808d 	bne.w	8006968 <ai_platform_network_create+0x194>
 800684e:	4a90      	ldr	r2, [pc, #576]	; (8006a90 <ai_platform_network_create+0x2bc>)
 8006850:	2318      	movs	r3, #24
 8006852:	6093      	str	r3, [r2, #8]
 8006854:	6893      	ldr	r3, [r2, #8]
 8006856:	2b18      	cmp	r3, #24
 8006858:	f040 8086 	bne.w	8006968 <ai_platform_network_create+0x194>
 800685c:	2301      	movs	r3, #1
 800685e:	6093      	str	r3, [r2, #8]
 8006860:	6893      	ldr	r3, [r2, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1fc      	bne.n	8006860 <ai_platform_network_create+0x8c>
 8006866:	4608      	mov	r0, r1
 8006868:	f7ff fefc 	bl	8006664 <_ai_platform_release_crc>
 800686c:	f7ff fef8 	bl	8006660 <_ai_platform_acquire_crc>
 8006870:	4b85      	ldr	r3, [pc, #532]	; (8006a88 <ai_platform_network_create+0x2b4>)
 8006872:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800687c:	189a      	adds	r2, r3, r2
 800687e:	2a01      	cmp	r2, #1
 8006880:	f240 809f 	bls.w	80069c2 <ai_platform_network_create+0x1ee>
 8006884:	f240 4249 	movw	r2, #1097	; 0x449
 8006888:	4293      	cmp	r3, r2
 800688a:	f000 809a 	beq.w	80069c2 <ai_platform_network_create+0x1ee>
 800688e:	4a7f      	ldr	r2, [pc, #508]	; (8006a8c <ai_platform_network_create+0x2b8>)
 8006890:	6813      	ldr	r3, [r2, #0]
 8006892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006896:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800689a:	f000 80a0 	beq.w	80069de <ai_platform_network_create+0x20a>
 800689e:	6813      	ldr	r3, [r2, #0]
 80068a0:	f240 4183 	movw	r1, #1155	; 0x483
 80068a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068a8:	428b      	cmp	r3, r1
 80068aa:	f000 80bf 	beq.w	8006a2c <ai_platform_network_create+0x258>
 80068ae:	6813      	ldr	r3, [r2, #0]
 80068b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068b4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80068b8:	f000 8123 	beq.w	8006b02 <ai_platform_network_create+0x32e>
 80068bc:	6813      	ldr	r3, [r2, #0]
 80068be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 80c4 	beq.w	8006a50 <ai_platform_network_create+0x27c>
 80068c8:	f7ff fecc 	bl	8006664 <_ai_platform_release_crc>
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	f000 80aa 	beq.w	8006a26 <ai_platform_network_create+0x252>
 80068d2:	4b70      	ldr	r3, [pc, #448]	; (8006a94 <ai_platform_network_create+0x2c0>)
 80068d4:	602b      	str	r3, [r5, #0]
 80068d6:	6025      	str	r5, [r4, #0]
 80068d8:	f000 fefa 	bl	80076d0 <core_init>
 80068dc:	2800      	cmp	r0, #0
 80068de:	f000 8090 	beq.w	8006a02 <ai_platform_network_create+0x22e>
 80068e2:	f7ff febd 	bl	8006660 <_ai_platform_acquire_crc>
 80068e6:	4b68      	ldr	r3, [pc, #416]	; (8006a88 <ai_platform_network_create+0x2b4>)
 80068e8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068f2:	185a      	adds	r2, r3, r1
 80068f4:	2a01      	cmp	r2, #1
 80068f6:	f240 80b9 	bls.w	8006a6c <ai_platform_network_create+0x298>
 80068fa:	f240 4249 	movw	r2, #1097	; 0x449
 80068fe:	4293      	cmp	r3, r2
 8006900:	f000 80b4 	beq.w	8006a6c <ai_platform_network_create+0x298>
 8006904:	4a61      	ldr	r2, [pc, #388]	; (8006a8c <ai_platform_network_create+0x2b8>)
 8006906:	6813      	ldr	r3, [r2, #0]
 8006908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800690c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006910:	f000 80c8 	beq.w	8006aa4 <ai_platform_network_create+0x2d0>
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	f240 4183 	movw	r1, #1155	; 0x483
 800691a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800691e:	428b      	cmp	r3, r1
 8006920:	f000 8107 	beq.w	8006b32 <ai_platform_network_create+0x35e>
 8006924:	6813      	ldr	r3, [r2, #0]
 8006926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800692a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800692e:	f000 8111 	beq.w	8006b54 <ai_platform_network_create+0x380>
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006938:	2b00      	cmp	r3, #0
 800693a:	f040 80c3 	bne.w	8006ac4 <ai_platform_network_create+0x2f0>
 800693e:	4b54      	ldr	r3, [pc, #336]	; (8006a90 <ai_platform_network_create+0x2bc>)
 8006940:	2201      	movs	r2, #1
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	2a00      	cmp	r2, #0
 8006948:	d1fc      	bne.n	8006944 <ai_platform_network_create+0x170>
 800694a:	4a53      	ldr	r2, [pc, #332]	; (8006a98 <ai_platform_network_create+0x2c4>)
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	4b52      	ldr	r3, [pc, #328]	; (8006a9c <ai_platform_network_create+0x2c8>)
 8006952:	429a      	cmp	r2, r3
 8006954:	f000 80b6 	beq.w	8006ac4 <ai_platform_network_create+0x2f0>
 8006958:	e7fe      	b.n	8006958 <ai_platform_network_create+0x184>
 800695a:	4b4d      	ldr	r3, [pc, #308]	; (8006a90 <ai_platform_network_create+0x2bc>)
 800695c:	2218      	movs	r2, #24
 800695e:	609a      	str	r2, [r3, #8]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	2a18      	cmp	r2, #24
 8006964:	d027      	beq.n	80069b6 <ai_platform_network_create+0x1e2>
 8006966:	4608      	mov	r0, r1
 8006968:	f7ff fe7c 	bl	8006664 <_ai_platform_release_crc>
 800696c:	f244 1033 	movw	r0, #16691	; 0x4133
 8006970:	b003      	add	sp, #12
 8006972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006976:	4a4a      	ldr	r2, [pc, #296]	; (8006aa0 <ai_platform_network_create+0x2cc>)
 8006978:	2318      	movs	r3, #24
 800697a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800697e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006982:	2b18      	cmp	r3, #24
 8006984:	d1f0      	bne.n	8006968 <ai_platform_network_create+0x194>
 8006986:	2301      	movs	r3, #1
 8006988:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800698c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1fb      	bne.n	800698c <ai_platform_network_create+0x1b8>
 8006994:	e767      	b.n	8006866 <ai_platform_network_create+0x92>
 8006996:	4a42      	ldr	r2, [pc, #264]	; (8006aa0 <ai_platform_network_create+0x2cc>)
 8006998:	2318      	movs	r3, #24
 800699a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800699e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80069a2:	2b18      	cmp	r3, #24
 80069a4:	d1e0      	bne.n	8006968 <ai_platform_network_create+0x194>
 80069a6:	2301      	movs	r3, #1
 80069a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80069ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1fb      	bne.n	80069ac <ai_platform_network_create+0x1d8>
 80069b4:	e757      	b.n	8006866 <ai_platform_network_create+0x92>
 80069b6:	2201      	movs	r2, #1
 80069b8:	609a      	str	r2, [r3, #8]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	2a00      	cmp	r2, #0
 80069be:	d1fc      	bne.n	80069ba <ai_platform_network_create+0x1e6>
 80069c0:	e751      	b.n	8006866 <ai_platform_network_create+0x92>
 80069c2:	4a33      	ldr	r2, [pc, #204]	; (8006a90 <ai_platform_network_create+0x2bc>)
 80069c4:	2301      	movs	r3, #1
 80069c6:	6093      	str	r3, [r2, #8]
 80069c8:	6891      	ldr	r1, [r2, #8]
 80069ca:	2900      	cmp	r1, #0
 80069cc:	d1fc      	bne.n	80069c8 <ai_platform_network_create+0x1f4>
 80069ce:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <ai_platform_network_create+0x2c4>)
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	4b32      	ldr	r3, [pc, #200]	; (8006a9c <ai_platform_network_create+0x2c8>)
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	f43f af76 	beq.w	80068c8 <ai_platform_network_create+0xf4>
 80069dc:	e7fe      	b.n	80069dc <ai_platform_network_create+0x208>
 80069de:	4a30      	ldr	r2, [pc, #192]	; (8006aa0 <ai_platform_network_create+0x2cc>)
 80069e0:	2301      	movs	r3, #1
 80069e2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80069e6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1fb      	bne.n	80069e6 <ai_platform_network_create+0x212>
 80069ee:	4b2a      	ldr	r3, [pc, #168]	; (8006a98 <ai_platform_network_create+0x2c4>)
 80069f0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80069f4:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <ai_platform_network_create+0x2c8>)
 80069f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80069fa:	429a      	cmp	r2, r3
 80069fc:	f43f af64 	beq.w	80068c8 <ai_platform_network_create+0xf4>
 8006a00:	e7fe      	b.n	8006a00 <ai_platform_network_create+0x22c>
 8006a02:	f04f 0930 	mov.w	r9, #48	; 0x30
 8006a06:	2300      	movs	r3, #0
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	2410      	movs	r4, #16
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	4639      	mov	r1, r7
 8006a10:	4630      	mov	r0, r6
 8006a12:	f001 fd79 	bl	8008508 <ai_version_get>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2000      	movs	r0, #0
 8006a1a:	64ab      	str	r3, [r5, #72]	; 0x48
 8006a1c:	f369 0007 	bfi	r0, r9, #0, #8
 8006a20:	f364 201f 	bfi	r0, r4, #8, #24
 8006a24:	e7a4      	b.n	8006970 <ai_platform_network_create+0x19c>
 8006a26:	f241 0010 	movw	r0, #4112	; 0x1010
 8006a2a:	e7a1      	b.n	8006970 <ai_platform_network_create+0x19c>
 8006a2c:	4a1c      	ldr	r2, [pc, #112]	; (8006aa0 <ai_platform_network_create+0x2cc>)
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006a34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1fb      	bne.n	8006a34 <ai_platform_network_create+0x260>
 8006a3c:	4b16      	ldr	r3, [pc, #88]	; (8006a98 <ai_platform_network_create+0x2c4>)
 8006a3e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006a42:	4b16      	ldr	r3, [pc, #88]	; (8006a9c <ai_platform_network_create+0x2c8>)
 8006a44:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	f43f af3d 	beq.w	80068c8 <ai_platform_network_create+0xf4>
 8006a4e:	e7fe      	b.n	8006a4e <ai_platform_network_create+0x27a>
 8006a50:	4a0f      	ldr	r2, [pc, #60]	; (8006a90 <ai_platform_network_create+0x2bc>)
 8006a52:	2301      	movs	r3, #1
 8006a54:	6093      	str	r3, [r2, #8]
 8006a56:	6893      	ldr	r3, [r2, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1fc      	bne.n	8006a56 <ai_platform_network_create+0x282>
 8006a5c:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <ai_platform_network_create+0x2c4>)
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <ai_platform_network_create+0x2c8>)
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	f43f af2f 	beq.w	80068c8 <ai_platform_network_create+0xf4>
 8006a6a:	e7fe      	b.n	8006a6a <ai_platform_network_create+0x296>
 8006a6c:	4a08      	ldr	r2, [pc, #32]	; (8006a90 <ai_platform_network_create+0x2bc>)
 8006a6e:	2301      	movs	r3, #1
 8006a70:	6093      	str	r3, [r2, #8]
 8006a72:	6893      	ldr	r3, [r2, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1fc      	bne.n	8006a72 <ai_platform_network_create+0x29e>
 8006a78:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <ai_platform_network_create+0x2c4>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <ai_platform_network_create+0x2c8>)
 8006a7e:	6812      	ldr	r2, [r2, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d01f      	beq.n	8006ac4 <ai_platform_network_create+0x2f0>
 8006a84:	e7fe      	b.n	8006a84 <ai_platform_network_create+0x2b0>
 8006a86:	bf00      	nop
 8006a88:	e0042000 	.word	0xe0042000
 8006a8c:	5c001000 	.word	0x5c001000
 8006a90:	40023000 	.word	0x40023000
 8006a94:	a1c00100 	.word	0xa1c00100
 8006a98:	f407a5c2 	.word	0xf407a5c2
 8006a9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006aa0:	58024000 	.word	0x58024000
 8006aa4:	4a33      	ldr	r2, [pc, #204]	; (8006b74 <ai_platform_network_create+0x3a0>)
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006aac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1fb      	bne.n	8006aac <ai_platform_network_create+0x2d8>
 8006ab4:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <ai_platform_network_create+0x3a4>)
 8006ab6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006aba:	4b30      	ldr	r3, [pc, #192]	; (8006b7c <ai_platform_network_create+0x3a8>)
 8006abc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d12c      	bne.n	8006b1e <ai_platform_network_create+0x34a>
 8006ac4:	f7ff fdce 	bl	8006664 <_ai_platform_release_crc>
 8006ac8:	2200      	movs	r2, #0
 8006aca:	4639      	mov	r1, r7
 8006acc:	4630      	mov	r0, r6
 8006ace:	f001 fd1b 	bl	8008508 <ai_version_get>
 8006ad2:	4681      	mov	r9, r0
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2105      	movs	r1, #5
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f001 fd15 	bl	8008508 <ai_version_get>
 8006ade:	4581      	cmp	r9, r0
 8006ae0:	d01e      	beq.n	8006b20 <ai_platform_network_create+0x34c>
 8006ae2:	f04f 0901 	mov.w	r9, #1
 8006ae6:	e78e      	b.n	8006a06 <ai_platform_network_create+0x232>
 8006ae8:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <ai_platform_network_create+0x3ac>)
 8006aea:	2218      	movs	r2, #24
 8006aec:	609a      	str	r2, [r3, #8]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	2a18      	cmp	r2, #24
 8006af2:	f47f af39 	bne.w	8006968 <ai_platform_network_create+0x194>
 8006af6:	2201      	movs	r2, #1
 8006af8:	609a      	str	r2, [r3, #8]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	2a00      	cmp	r2, #0
 8006afe:	d1fc      	bne.n	8006afa <ai_platform_network_create+0x326>
 8006b00:	e6b1      	b.n	8006866 <ai_platform_network_create+0x92>
 8006b02:	4a1f      	ldr	r2, [pc, #124]	; (8006b80 <ai_platform_network_create+0x3ac>)
 8006b04:	2301      	movs	r3, #1
 8006b06:	6093      	str	r3, [r2, #8]
 8006b08:	6893      	ldr	r3, [r2, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1fc      	bne.n	8006b08 <ai_platform_network_create+0x334>
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <ai_platform_network_create+0x3a4>)
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	4b1a      	ldr	r3, [pc, #104]	; (8006b7c <ai_platform_network_create+0x3a8>)
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	f43f aed6 	beq.w	80068c8 <ai_platform_network_create+0xf4>
 8006b1c:	e7fe      	b.n	8006b1c <ai_platform_network_create+0x348>
 8006b1e:	e7fe      	b.n	8006b1e <ai_platform_network_create+0x34a>
 8006b20:	4b18      	ldr	r3, [pc, #96]	; (8006b84 <ai_platform_network_create+0x3b0>)
 8006b22:	a801      	add	r0, sp, #4
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	f001 fb35 	bl	8008194 <ai_check_custom_types>
 8006b2a:	b300      	cbz	r0, 8006b6e <ai_platform_network_create+0x39a>
 8006b2c:	2400      	movs	r4, #0
 8006b2e:	46a1      	mov	r9, r4
 8006b30:	e76c      	b.n	8006a0c <ai_platform_network_create+0x238>
 8006b32:	4b10      	ldr	r3, [pc, #64]	; (8006b74 <ai_platform_network_create+0x3a0>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006b3a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	d1fb      	bne.n	8006b3a <ai_platform_network_create+0x366>
 8006b42:	4a0d      	ldr	r2, [pc, #52]	; (8006b78 <ai_platform_network_create+0x3a4>)
 8006b44:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006b48:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <ai_platform_network_create+0x3a8>)
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d0b8      	beq.n	8006ac4 <ai_platform_network_create+0x2f0>
 8006b52:	e7fe      	b.n	8006b52 <ai_platform_network_create+0x37e>
 8006b54:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <ai_platform_network_create+0x3ac>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	609a      	str	r2, [r3, #8]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	d1fc      	bne.n	8006b5a <ai_platform_network_create+0x386>
 8006b60:	4a05      	ldr	r2, [pc, #20]	; (8006b78 <ai_platform_network_create+0x3a4>)
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <ai_platform_network_create+0x3a8>)
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d0ab      	beq.n	8006ac4 <ai_platform_network_create+0x2f0>
 8006b6c:	e7fe      	b.n	8006b6c <ai_platform_network_create+0x398>
 8006b6e:	f04f 0902 	mov.w	r9, #2
 8006b72:	e748      	b.n	8006a06 <ai_platform_network_create+0x232>
 8006b74:	58024000 	.word	0x58024000
 8006b78:	f407a5c2 	.word	0xf407a5c2
 8006b7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b80:	40023000 	.word	0x40023000
 8006b84:	84048403 	.word	0x84048403

08006b88 <ai_platform_network_init>:
 8006b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d052      	beq.n	8006c36 <ai_platform_network_init+0xae>
 8006b90:	4bab      	ldr	r3, [pc, #684]	; (8006e40 <ai_platform_network_init+0x2b8>)
 8006b92:	4604      	mov	r4, r0
 8006b94:	6802      	ldr	r2, [r0, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d14d      	bne.n	8006c36 <ai_platform_network_init+0xae>
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	f7ff fd60 	bl	8006660 <_ai_platform_acquire_crc>
 8006ba0:	4ba8      	ldr	r3, [pc, #672]	; (8006e44 <ai_platform_network_init+0x2bc>)
 8006ba2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bac:	189a      	adds	r2, r3, r2
 8006bae:	2a01      	cmp	r2, #1
 8006bb0:	f240 809b 	bls.w	8006cea <ai_platform_network_init+0x162>
 8006bb4:	f240 4249 	movw	r2, #1097	; 0x449
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	f000 8096 	beq.w	8006cea <ai_platform_network_init+0x162>
 8006bbe:	4aa2      	ldr	r2, [pc, #648]	; (8006e48 <ai_platform_network_init+0x2c0>)
 8006bc0:	6813      	ldr	r3, [r2, #0]
 8006bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bc6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006bca:	f000 809d 	beq.w	8006d08 <ai_platform_network_init+0x180>
 8006bce:	6813      	ldr	r3, [r2, #0]
 8006bd0:	f240 4183 	movw	r1, #1155	; 0x483
 8006bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	f000 80e4 	beq.w	8006da6 <ai_platform_network_init+0x21e>
 8006bde:	6813      	ldr	r3, [r2, #0]
 8006be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006be4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006be8:	f000 811b 	beq.w	8006e22 <ai_platform_network_init+0x29a>
 8006bec:	6813      	ldr	r3, [r2, #0]
 8006bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80f9 	beq.w	8006dea <ai_platform_network_init+0x262>
 8006bf8:	f7ff fd34 	bl	8006664 <_ai_platform_release_crc>
 8006bfc:	2d00      	cmp	r5, #0
 8006bfe:	f000 8147 	beq.w	8006e90 <ai_platform_network_init+0x308>
 8006c02:	4b92      	ldr	r3, [pc, #584]	; (8006e4c <ai_platform_network_init+0x2c4>)
 8006c04:	682a      	ldr	r2, [r5, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	f040 8090 	bne.w	8006d2c <ai_platform_network_init+0x1a4>
 8006c0c:	692b      	ldr	r3, [r5, #16]
 8006c0e:	89ae      	ldrh	r6, [r5, #12]
 8006c10:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8006c14:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8006c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c1a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8006c1e:	2303      	movs	r3, #3
 8006c20:	84a6      	strh	r6, [r4, #36]	; 0x24
 8006c22:	4626      	mov	r6, r4
 8006c24:	4620      	mov	r0, r4
 8006c26:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8006c2a:	60e3      	str	r3, [r4, #12]
 8006c2c:	f001 fada 	bl	80081e4 <ai_layers_init_all>
 8006c30:	4630      	mov	r0, r6
 8006c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c36:	f7ff fd13 	bl	8006660 <_ai_platform_acquire_crc>
 8006c3a:	4b82      	ldr	r3, [pc, #520]	; (8006e44 <ai_platform_network_init+0x2bc>)
 8006c3c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c46:	185a      	adds	r2, r3, r1
 8006c48:	2a01      	cmp	r2, #1
 8006c4a:	d92b      	bls.n	8006ca4 <ai_platform_network_init+0x11c>
 8006c4c:	f240 4249 	movw	r2, #1097	; 0x449
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d027      	beq.n	8006ca4 <ai_platform_network_init+0x11c>
 8006c54:	4a7c      	ldr	r2, [pc, #496]	; (8006e48 <ai_platform_network_init+0x2c0>)
 8006c56:	6813      	ldr	r3, [r2, #0]
 8006c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c5c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006c60:	d02d      	beq.n	8006cbe <ai_platform_network_init+0x136>
 8006c62:	6813      	ldr	r3, [r2, #0]
 8006c64:	f240 4183 	movw	r1, #1155	; 0x483
 8006c68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	f000 8089 	beq.w	8006d84 <ai_platform_network_init+0x1fc>
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c78:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006c7c:	f000 80c3 	beq.w	8006e06 <ai_platform_network_init+0x27e>
 8006c80:	6813      	ldr	r3, [r2, #0]
 8006c82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d129      	bne.n	8006cde <ai_platform_network_init+0x156>
 8006c8a:	4a71      	ldr	r2, [pc, #452]	; (8006e50 <ai_platform_network_init+0x2c8>)
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	6093      	str	r3, [r2, #8]
 8006c90:	6893      	ldr	r3, [r2, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1fc      	bne.n	8006c90 <ai_platform_network_init+0x108>
 8006c96:	496f      	ldr	r1, [pc, #444]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006c98:	4b6f      	ldr	r3, [pc, #444]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006c9a:	6011      	str	r1, [r2, #0]
 8006c9c:	6812      	ldr	r2, [r2, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d01d      	beq.n	8006cde <ai_platform_network_init+0x156>
 8006ca2:	e7fe      	b.n	8006ca2 <ai_platform_network_init+0x11a>
 8006ca4:	4a6a      	ldr	r2, [pc, #424]	; (8006e50 <ai_platform_network_init+0x2c8>)
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	6093      	str	r3, [r2, #8]
 8006caa:	6893      	ldr	r3, [r2, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1fc      	bne.n	8006caa <ai_platform_network_init+0x122>
 8006cb0:	4968      	ldr	r1, [pc, #416]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006cb2:	4b69      	ldr	r3, [pc, #420]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006cb4:	6011      	str	r1, [r2, #0]
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d010      	beq.n	8006cde <ai_platform_network_init+0x156>
 8006cbc:	e7fe      	b.n	8006cbc <ai_platform_network_init+0x134>
 8006cbe:	4a67      	ldr	r2, [pc, #412]	; (8006e5c <ai_platform_network_init+0x2d4>)
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006cc6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1fb      	bne.n	8006cc6 <ai_platform_network_init+0x13e>
 8006cce:	4961      	ldr	r1, [pc, #388]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006cd0:	4b61      	ldr	r3, [pc, #388]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006cd2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006cd6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d113      	bne.n	8006d06 <ai_platform_network_init+0x17e>
 8006cde:	2600      	movs	r6, #0
 8006ce0:	f7ff fcc0 	bl	8006664 <_ai_platform_release_crc>
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cea:	4a59      	ldr	r2, [pc, #356]	; (8006e50 <ai_platform_network_init+0x2c8>)
 8006cec:	2301      	movs	r3, #1
 8006cee:	6093      	str	r3, [r2, #8]
 8006cf0:	6893      	ldr	r3, [r2, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1fc      	bne.n	8006cf0 <ai_platform_network_init+0x168>
 8006cf6:	4b57      	ldr	r3, [pc, #348]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	4b57      	ldr	r3, [pc, #348]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	f43f af7a 	beq.w	8006bf8 <ai_platform_network_init+0x70>
 8006d04:	e7fe      	b.n	8006d04 <ai_platform_network_init+0x17c>
 8006d06:	e7fe      	b.n	8006d06 <ai_platform_network_init+0x17e>
 8006d08:	4a54      	ldr	r2, [pc, #336]	; (8006e5c <ai_platform_network_init+0x2d4>)
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d10:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1fb      	bne.n	8006d10 <ai_platform_network_init+0x188>
 8006d18:	4b4e      	ldr	r3, [pc, #312]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006d1a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d1e:	4b4e      	ldr	r3, [pc, #312]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006d20:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d24:	429a      	cmp	r2, r3
 8006d26:	f43f af67 	beq.w	8006bf8 <ai_platform_network_init+0x70>
 8006d2a:	e7fe      	b.n	8006d2a <ai_platform_network_init+0x1a2>
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f105 081c 	add.w	r8, r5, #28
 8006d34:	686e      	ldr	r6, [r5, #4]
 8006d36:	f7ff fc55 	bl	80065e4 <ai_buffer_get_size>
 8006d3a:	4607      	mov	r7, r0
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	4640      	mov	r0, r8
 8006d40:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006d44:	f7ff fc4e 	bl	80065e4 <ai_buffer_get_size>
 8006d48:	2f00      	cmp	r7, #0
 8006d4a:	d13e      	bne.n	8006dca <ai_platform_network_init+0x242>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	f000 808e 	beq.w	8006e6e <ai_platform_network_init+0x2e6>
 8006d52:	f1b9 0f00 	cmp.w	r9, #0
 8006d56:	f000 8094 	beq.w	8006e82 <ai_platform_network_init+0x2fa>
 8006d5a:	f04f 0c01 	mov.w	ip, #1
 8006d5e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006d60:	2600      	movs	r6, #0
 8006d62:	83e7      	strh	r7, [r4, #30]
 8006d64:	4563      	cmp	r3, ip
 8006d66:	83a6      	strh	r6, [r4, #28]
 8006d68:	d37a      	bcc.n	8006e60 <ai_platform_network_init+0x2d8>
 8006d6a:	f1bc 0f00 	cmp.w	ip, #0
 8006d6e:	f000 809c 	beq.w	8006eaa <ai_platform_network_init+0x322>
 8006d72:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006d74:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8006d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d7a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8006d7e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006d82:	e74c      	b.n	8006c1e <ai_platform_network_init+0x96>
 8006d84:	4a35      	ldr	r2, [pc, #212]	; (8006e5c <ai_platform_network_init+0x2d4>)
 8006d86:	2301      	movs	r3, #1
 8006d88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1fb      	bne.n	8006d8c <ai_platform_network_init+0x204>
 8006d94:	492f      	ldr	r1, [pc, #188]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006d98:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006d9c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d09c      	beq.n	8006cde <ai_platform_network_init+0x156>
 8006da4:	e7fe      	b.n	8006da4 <ai_platform_network_init+0x21c>
 8006da6:	4a2d      	ldr	r2, [pc, #180]	; (8006e5c <ai_platform_network_init+0x2d4>)
 8006da8:	2301      	movs	r3, #1
 8006daa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006dae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1fb      	bne.n	8006dae <ai_platform_network_init+0x226>
 8006db6:	4b27      	ldr	r3, [pc, #156]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006db8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006dbc:	4b26      	ldr	r3, [pc, #152]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006dbe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	f43f af18 	beq.w	8006bf8 <ai_platform_network_init+0x70>
 8006dc8:	e7fe      	b.n	8006dc8 <ai_platform_network_init+0x240>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d153      	bne.n	8006e76 <ai_platform_network_init+0x2ee>
 8006dce:	4680      	mov	r8, r0
 8006dd0:	4684      	mov	ip, r0
 8006dd2:	2e00      	cmp	r6, #0
 8006dd4:	d063      	beq.n	8006e9e <ai_platform_network_init+0x316>
 8006dd6:	8be6      	ldrh	r6, [r4, #30]
 8006dd8:	2e00      	cmp	r6, #0
 8006dda:	d168      	bne.n	8006eae <ai_platform_network_init+0x326>
 8006ddc:	2212      	movs	r2, #18
 8006dde:	2116      	movs	r1, #22
 8006de0:	f104 0010 	add.w	r0, r4, #16
 8006de4:	f000 fc76 	bl	80076d4 <core_set_error>
 8006de8:	e77c      	b.n	8006ce4 <ai_platform_network_init+0x15c>
 8006dea:	4a19      	ldr	r2, [pc, #100]	; (8006e50 <ai_platform_network_init+0x2c8>)
 8006dec:	2301      	movs	r3, #1
 8006dee:	6093      	str	r3, [r2, #8]
 8006df0:	6893      	ldr	r3, [r2, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1fc      	bne.n	8006df0 <ai_platform_network_init+0x268>
 8006df6:	4b17      	ldr	r3, [pc, #92]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006dfc:	6812      	ldr	r2, [r2, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	f43f aefa 	beq.w	8006bf8 <ai_platform_network_init+0x70>
 8006e04:	e7fe      	b.n	8006e04 <ai_platform_network_init+0x27c>
 8006e06:	4a12      	ldr	r2, [pc, #72]	; (8006e50 <ai_platform_network_init+0x2c8>)
 8006e08:	2301      	movs	r3, #1
 8006e0a:	6093      	str	r3, [r2, #8]
 8006e0c:	6893      	ldr	r3, [r2, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1fc      	bne.n	8006e0c <ai_platform_network_init+0x284>
 8006e12:	4910      	ldr	r1, [pc, #64]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006e14:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006e16:	6011      	str	r1, [r2, #0]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	f43f af5f 	beq.w	8006cde <ai_platform_network_init+0x156>
 8006e20:	e7fe      	b.n	8006e20 <ai_platform_network_init+0x298>
 8006e22:	4a0b      	ldr	r2, [pc, #44]	; (8006e50 <ai_platform_network_init+0x2c8>)
 8006e24:	2301      	movs	r3, #1
 8006e26:	6093      	str	r3, [r2, #8]
 8006e28:	6893      	ldr	r3, [r2, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1fc      	bne.n	8006e28 <ai_platform_network_init+0x2a0>
 8006e2e:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <ai_platform_network_init+0x2cc>)
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <ai_platform_network_init+0x2d0>)
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	f43f aede 	beq.w	8006bf8 <ai_platform_network_init+0x70>
 8006e3c:	e7fe      	b.n	8006e3c <ai_platform_network_init+0x2b4>
 8006e3e:	bf00      	nop
 8006e40:	a1c00100 	.word	0xa1c00100
 8006e44:	e0042000 	.word	0xe0042000
 8006e48:	5c001000 	.word	0x5c001000
 8006e4c:	a1facade 	.word	0xa1facade
 8006e50:	40023000 	.word	0x40023000
 8006e54:	f407a5c2 	.word	0xf407a5c2
 8006e58:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e5c:	58024000 	.word	0x58024000
 8006e60:	2213      	movs	r2, #19
 8006e62:	2116      	movs	r1, #22
 8006e64:	f104 0010 	add.w	r0, r4, #16
 8006e68:	f000 fc34 	bl	80076d4 <core_set_error>
 8006e6c:	e73a      	b.n	8006ce4 <ai_platform_network_init+0x15c>
 8006e6e:	4607      	mov	r7, r0
 8006e70:	4680      	mov	r8, r0
 8006e72:	4684      	mov	ip, r0
 8006e74:	e773      	b.n	8006d5e <ai_platform_network_init+0x1d6>
 8006e76:	f1b9 0f00 	cmp.w	r9, #0
 8006e7a:	d002      	beq.n	8006e82 <ai_platform_network_init+0x2fa>
 8006e7c:	f04f 0c01 	mov.w	ip, #1
 8006e80:	e7a7      	b.n	8006dd2 <ai_platform_network_init+0x24a>
 8006e82:	2110      	movs	r1, #16
 8006e84:	2213      	movs	r2, #19
 8006e86:	2600      	movs	r6, #0
 8006e88:	1860      	adds	r0, r4, r1
 8006e8a:	f000 fc23 	bl	80076d4 <core_set_error>
 8006e8e:	e729      	b.n	8006ce4 <ai_platform_network_init+0x15c>
 8006e90:	2110      	movs	r1, #16
 8006e92:	2211      	movs	r2, #17
 8006e94:	462e      	mov	r6, r5
 8006e96:	1860      	adds	r0, r4, r1
 8006e98:	f000 fc1c 	bl	80076d4 <core_set_error>
 8006e9c:	e722      	b.n	8006ce4 <ai_platform_network_init+0x15c>
 8006e9e:	2110      	movs	r1, #16
 8006ea0:	2212      	movs	r2, #18
 8006ea2:	1860      	adds	r0, r4, r1
 8006ea4:	f000 fc16 	bl	80076d4 <core_set_error>
 8006ea8:	e71c      	b.n	8006ce4 <ai_platform_network_init+0x15c>
 8006eaa:	4666      	mov	r6, ip
 8006eac:	e6b7      	b.n	8006c1e <ai_platform_network_init+0x96>
 8006eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eb0:	6a26      	ldr	r6, [r4, #32]
 8006eb2:	2701      	movs	r7, #1
 8006eb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006eb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006eba:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8006ebe:	e74e      	b.n	8006d5e <ai_platform_network_init+0x1d6>

08006ec0 <ai_platform_network_post_init>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d04e      	beq.n	8006f64 <ai_platform_network_post_init+0xa4>
 8006ec6:	4b8c      	ldr	r3, [pc, #560]	; (80070f8 <ai_platform_network_post_init+0x238>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	6802      	ldr	r2, [r0, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d149      	bne.n	8006f64 <ai_platform_network_post_init+0xa4>
 8006ed0:	f7ff fbc6 	bl	8006660 <_ai_platform_acquire_crc>
 8006ed4:	4b89      	ldr	r3, [pc, #548]	; (80070fc <ai_platform_network_post_init+0x23c>)
 8006ed6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ee0:	189a      	adds	r2, r3, r2
 8006ee2:	2a01      	cmp	r2, #1
 8006ee4:	f240 8095 	bls.w	8007012 <ai_platform_network_post_init+0x152>
 8006ee8:	f240 4249 	movw	r2, #1097	; 0x449
 8006eec:	4293      	cmp	r3, r2
 8006eee:	f000 8090 	beq.w	8007012 <ai_platform_network_post_init+0x152>
 8006ef2:	4a83      	ldr	r2, [pc, #524]	; (8007100 <ai_platform_network_post_init+0x240>)
 8006ef4:	6813      	ldr	r3, [r2, #0]
 8006ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006efa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006efe:	f000 8096 	beq.w	800702e <ai_platform_network_post_init+0x16e>
 8006f02:	6813      	ldr	r3, [r2, #0]
 8006f04:	f240 4183 	movw	r1, #1155	; 0x483
 8006f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	f000 80b8 	beq.w	8007082 <ai_platform_network_post_init+0x1c2>
 8006f12:	6813      	ldr	r3, [r2, #0]
 8006f14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f18:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006f1c:	f000 80de 	beq.w	80070dc <ai_platform_network_post_init+0x21c>
 8006f20:	6813      	ldr	r3, [r2, #0]
 8006f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 80bd 	beq.w	80070a6 <ai_platform_network_post_init+0x1e6>
 8006f2c:	f7ff fb9a 	bl	8006664 <_ai_platform_release_crc>
 8006f30:	68e3      	ldr	r3, [r4, #12]
 8006f32:	f013 0502 	ands.w	r5, r3, #2
 8006f36:	f000 808c 	beq.w	8007052 <ai_platform_network_post_init+0x192>
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f001 f960 	bl	8008200 <ai_layers_post_init_all>
 8006f40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f42:	b16b      	cbz	r3, 8006f60 <ai_platform_network_post_init+0xa0>
 8006f44:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006f46:	e007      	b.n	8006f58 <ai_platform_network_post_init+0x98>
 8006f48:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8006f4c:	4798      	blx	r3
 8006f4e:	692b      	ldr	r3, [r5, #16]
 8006f50:	b133      	cbz	r3, 8006f60 <ai_platform_network_post_init+0xa0>
 8006f52:	42ab      	cmp	r3, r5
 8006f54:	461d      	mov	r5, r3
 8006f56:	d003      	beq.n	8006f60 <ai_platform_network_post_init+0xa0>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	d1f3      	bne.n	8006f48 <ai_platform_network_post_init+0x88>
 8006f60:	2001      	movs	r0, #1
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	f7ff fb7c 	bl	8006660 <_ai_platform_acquire_crc>
 8006f68:	4b64      	ldr	r3, [pc, #400]	; (80070fc <ai_platform_network_post_init+0x23c>)
 8006f6a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f74:	185a      	adds	r2, r3, r1
 8006f76:	2a01      	cmp	r2, #1
 8006f78:	d92a      	bls.n	8006fd0 <ai_platform_network_post_init+0x110>
 8006f7a:	f240 4249 	movw	r2, #1097	; 0x449
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d026      	beq.n	8006fd0 <ai_platform_network_post_init+0x110>
 8006f82:	4a5f      	ldr	r2, [pc, #380]	; (8007100 <ai_platform_network_post_init+0x240>)
 8006f84:	6813      	ldr	r3, [r2, #0]
 8006f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f8a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006f8e:	d02c      	beq.n	8006fea <ai_platform_network_post_init+0x12a>
 8006f90:	6813      	ldr	r3, [r2, #0]
 8006f92:	f240 4183 	movw	r1, #1155	; 0x483
 8006f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f9a:	428b      	cmp	r3, r1
 8006f9c:	d060      	beq.n	8007060 <ai_platform_network_post_init+0x1a0>
 8006f9e:	6813      	ldr	r3, [r2, #0]
 8006fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fa4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006fa8:	f000 808b 	beq.w	80070c2 <ai_platform_network_post_init+0x202>
 8006fac:	6813      	ldr	r3, [r2, #0]
 8006fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d129      	bne.n	800700a <ai_platform_network_post_init+0x14a>
 8006fb6:	4a53      	ldr	r2, [pc, #332]	; (8007104 <ai_platform_network_post_init+0x244>)
 8006fb8:	2301      	movs	r3, #1
 8006fba:	6093      	str	r3, [r2, #8]
 8006fbc:	6893      	ldr	r3, [r2, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1fc      	bne.n	8006fbc <ai_platform_network_post_init+0xfc>
 8006fc2:	4951      	ldr	r1, [pc, #324]	; (8007108 <ai_platform_network_post_init+0x248>)
 8006fc4:	4b51      	ldr	r3, [pc, #324]	; (800710c <ai_platform_network_post_init+0x24c>)
 8006fc6:	6011      	str	r1, [r2, #0]
 8006fc8:	6812      	ldr	r2, [r2, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d01d      	beq.n	800700a <ai_platform_network_post_init+0x14a>
 8006fce:	e7fe      	b.n	8006fce <ai_platform_network_post_init+0x10e>
 8006fd0:	4a4c      	ldr	r2, [pc, #304]	; (8007104 <ai_platform_network_post_init+0x244>)
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	6093      	str	r3, [r2, #8]
 8006fd6:	6893      	ldr	r3, [r2, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1fc      	bne.n	8006fd6 <ai_platform_network_post_init+0x116>
 8006fdc:	494a      	ldr	r1, [pc, #296]	; (8007108 <ai_platform_network_post_init+0x248>)
 8006fde:	4b4b      	ldr	r3, [pc, #300]	; (800710c <ai_platform_network_post_init+0x24c>)
 8006fe0:	6011      	str	r1, [r2, #0]
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d010      	beq.n	800700a <ai_platform_network_post_init+0x14a>
 8006fe8:	e7fe      	b.n	8006fe8 <ai_platform_network_post_init+0x128>
 8006fea:	4a49      	ldr	r2, [pc, #292]	; (8007110 <ai_platform_network_post_init+0x250>)
 8006fec:	2301      	movs	r3, #1
 8006fee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006ff2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1fb      	bne.n	8006ff2 <ai_platform_network_post_init+0x132>
 8006ffa:	4943      	ldr	r1, [pc, #268]	; (8007108 <ai_platform_network_post_init+0x248>)
 8006ffc:	4b43      	ldr	r3, [pc, #268]	; (800710c <ai_platform_network_post_init+0x24c>)
 8006ffe:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007002:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007006:	429a      	cmp	r2, r3
 8007008:	d110      	bne.n	800702c <ai_platform_network_post_init+0x16c>
 800700a:	f7ff fb2b 	bl	8006664 <_ai_platform_release_crc>
 800700e:	2000      	movs	r0, #0
 8007010:	bd38      	pop	{r3, r4, r5, pc}
 8007012:	4a3c      	ldr	r2, [pc, #240]	; (8007104 <ai_platform_network_post_init+0x244>)
 8007014:	2301      	movs	r3, #1
 8007016:	6093      	str	r3, [r2, #8]
 8007018:	6893      	ldr	r3, [r2, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1fc      	bne.n	8007018 <ai_platform_network_post_init+0x158>
 800701e:	493a      	ldr	r1, [pc, #232]	; (8007108 <ai_platform_network_post_init+0x248>)
 8007020:	4b3a      	ldr	r3, [pc, #232]	; (800710c <ai_platform_network_post_init+0x24c>)
 8007022:	6011      	str	r1, [r2, #0]
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d080      	beq.n	8006f2c <ai_platform_network_post_init+0x6c>
 800702a:	e7fe      	b.n	800702a <ai_platform_network_post_init+0x16a>
 800702c:	e7fe      	b.n	800702c <ai_platform_network_post_init+0x16c>
 800702e:	4a38      	ldr	r2, [pc, #224]	; (8007110 <ai_platform_network_post_init+0x250>)
 8007030:	2301      	movs	r3, #1
 8007032:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007036:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1fb      	bne.n	8007036 <ai_platform_network_post_init+0x176>
 800703e:	4932      	ldr	r1, [pc, #200]	; (8007108 <ai_platform_network_post_init+0x248>)
 8007040:	4b32      	ldr	r3, [pc, #200]	; (800710c <ai_platform_network_post_init+0x24c>)
 8007042:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007046:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800704a:	429a      	cmp	r2, r3
 800704c:	f43f af6e 	beq.w	8006f2c <ai_platform_network_post_init+0x6c>
 8007050:	e7fe      	b.n	8007050 <ai_platform_network_post_init+0x190>
 8007052:	2210      	movs	r2, #16
 8007054:	2111      	movs	r1, #17
 8007056:	18a0      	adds	r0, r4, r2
 8007058:	f000 fb3c 	bl	80076d4 <core_set_error>
 800705c:	4628      	mov	r0, r5
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	4a2b      	ldr	r2, [pc, #172]	; (8007110 <ai_platform_network_post_init+0x250>)
 8007062:	2301      	movs	r3, #1
 8007064:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007068:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1fb      	bne.n	8007068 <ai_platform_network_post_init+0x1a8>
 8007070:	4925      	ldr	r1, [pc, #148]	; (8007108 <ai_platform_network_post_init+0x248>)
 8007072:	4b26      	ldr	r3, [pc, #152]	; (800710c <ai_platform_network_post_init+0x24c>)
 8007074:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007078:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800707c:	429a      	cmp	r2, r3
 800707e:	d0c4      	beq.n	800700a <ai_platform_network_post_init+0x14a>
 8007080:	e7fe      	b.n	8007080 <ai_platform_network_post_init+0x1c0>
 8007082:	4a23      	ldr	r2, [pc, #140]	; (8007110 <ai_platform_network_post_init+0x250>)
 8007084:	2301      	movs	r3, #1
 8007086:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800708a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1fb      	bne.n	800708a <ai_platform_network_post_init+0x1ca>
 8007092:	491d      	ldr	r1, [pc, #116]	; (8007108 <ai_platform_network_post_init+0x248>)
 8007094:	4b1d      	ldr	r3, [pc, #116]	; (800710c <ai_platform_network_post_init+0x24c>)
 8007096:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800709a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800709e:	429a      	cmp	r2, r3
 80070a0:	f43f af44 	beq.w	8006f2c <ai_platform_network_post_init+0x6c>
 80070a4:	e7fe      	b.n	80070a4 <ai_platform_network_post_init+0x1e4>
 80070a6:	4a17      	ldr	r2, [pc, #92]	; (8007104 <ai_platform_network_post_init+0x244>)
 80070a8:	2301      	movs	r3, #1
 80070aa:	6093      	str	r3, [r2, #8]
 80070ac:	6893      	ldr	r3, [r2, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1fc      	bne.n	80070ac <ai_platform_network_post_init+0x1ec>
 80070b2:	4915      	ldr	r1, [pc, #84]	; (8007108 <ai_platform_network_post_init+0x248>)
 80070b4:	4b15      	ldr	r3, [pc, #84]	; (800710c <ai_platform_network_post_init+0x24c>)
 80070b6:	6011      	str	r1, [r2, #0]
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f43f af36 	beq.w	8006f2c <ai_platform_network_post_init+0x6c>
 80070c0:	e7fe      	b.n	80070c0 <ai_platform_network_post_init+0x200>
 80070c2:	4a10      	ldr	r2, [pc, #64]	; (8007104 <ai_platform_network_post_init+0x244>)
 80070c4:	2301      	movs	r3, #1
 80070c6:	6093      	str	r3, [r2, #8]
 80070c8:	6893      	ldr	r3, [r2, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1fc      	bne.n	80070c8 <ai_platform_network_post_init+0x208>
 80070ce:	490e      	ldr	r1, [pc, #56]	; (8007108 <ai_platform_network_post_init+0x248>)
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <ai_platform_network_post_init+0x24c>)
 80070d2:	6011      	str	r1, [r2, #0]
 80070d4:	6812      	ldr	r2, [r2, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d097      	beq.n	800700a <ai_platform_network_post_init+0x14a>
 80070da:	e7fe      	b.n	80070da <ai_platform_network_post_init+0x21a>
 80070dc:	4a09      	ldr	r2, [pc, #36]	; (8007104 <ai_platform_network_post_init+0x244>)
 80070de:	2301      	movs	r3, #1
 80070e0:	6093      	str	r3, [r2, #8]
 80070e2:	6893      	ldr	r3, [r2, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1fc      	bne.n	80070e2 <ai_platform_network_post_init+0x222>
 80070e8:	4907      	ldr	r1, [pc, #28]	; (8007108 <ai_platform_network_post_init+0x248>)
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <ai_platform_network_post_init+0x24c>)
 80070ec:	6011      	str	r1, [r2, #0]
 80070ee:	6812      	ldr	r2, [r2, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	f43f af1b 	beq.w	8006f2c <ai_platform_network_post_init+0x6c>
 80070f6:	e7fe      	b.n	80070f6 <ai_platform_network_post_init+0x236>
 80070f8:	a1c00100 	.word	0xa1c00100
 80070fc:	e0042000 	.word	0xe0042000
 8007100:	5c001000 	.word	0x5c001000
 8007104:	40023000 	.word	0x40023000
 8007108:	f407a5c2 	.word	0xf407a5c2
 800710c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007110:	58024000 	.word	0x58024000

08007114 <ai_platform_network_process>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	b085      	sub	sp, #20
 800711a:	460e      	mov	r6, r1
 800711c:	4605      	mov	r5, r0
 800711e:	9201      	str	r2, [sp, #4]
 8007120:	b120      	cbz	r0, 800712c <ai_platform_network_process+0x18>
 8007122:	4b24      	ldr	r3, [pc, #144]	; (80071b4 <ai_platform_network_process+0xa0>)
 8007124:	6802      	ldr	r2, [r0, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	bf18      	it	ne
 800712a:	2500      	movne	r5, #0
 800712c:	f7ff fa98 	bl	8006660 <_ai_platform_acquire_crc>
 8007130:	4b21      	ldr	r3, [pc, #132]	; (80071b8 <ai_platform_network_process+0xa4>)
 8007132:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800713c:	185a      	adds	r2, r3, r1
 800713e:	2a01      	cmp	r2, #1
 8007140:	d92b      	bls.n	800719a <ai_platform_network_process+0x86>
 8007142:	f240 4249 	movw	r2, #1097	; 0x449
 8007146:	4293      	cmp	r3, r2
 8007148:	d027      	beq.n	800719a <ai_platform_network_process+0x86>
 800714a:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <ai_platform_network_process+0xa8>)
 800714c:	6813      	ldr	r3, [r2, #0]
 800714e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007152:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007156:	d039      	beq.n	80071cc <ai_platform_network_process+0xb8>
 8007158:	6813      	ldr	r3, [r2, #0]
 800715a:	f240 4183 	movw	r1, #1155	; 0x483
 800715e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007162:	428b      	cmp	r3, r1
 8007164:	f000 819c 	beq.w	80074a0 <ai_platform_network_process+0x38c>
 8007168:	6813      	ldr	r3, [r2, #0]
 800716a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800716e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007172:	f000 8179 	beq.w	8007468 <ai_platform_network_process+0x354>
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800717c:	2b00      	cmp	r3, #0
 800717e:	d136      	bne.n	80071ee <ai_platform_network_process+0xda>
 8007180:	4a0f      	ldr	r2, [pc, #60]	; (80071c0 <ai_platform_network_process+0xac>)
 8007182:	2301      	movs	r3, #1
 8007184:	6093      	str	r3, [r2, #8]
 8007186:	6893      	ldr	r3, [r2, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1fc      	bne.n	8007186 <ai_platform_network_process+0x72>
 800718c:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <ai_platform_network_process+0xb0>)
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	4b0d      	ldr	r3, [pc, #52]	; (80071c8 <ai_platform_network_process+0xb4>)
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d02a      	beq.n	80071ee <ai_platform_network_process+0xda>
 8007198:	e7fe      	b.n	8007198 <ai_platform_network_process+0x84>
 800719a:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <ai_platform_network_process+0xac>)
 800719c:	2301      	movs	r3, #1
 800719e:	6093      	str	r3, [r2, #8]
 80071a0:	6893      	ldr	r3, [r2, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1fc      	bne.n	80071a0 <ai_platform_network_process+0x8c>
 80071a6:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <ai_platform_network_process+0xb0>)
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <ai_platform_network_process+0xb4>)
 80071ac:	6812      	ldr	r2, [r2, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d01d      	beq.n	80071ee <ai_platform_network_process+0xda>
 80071b2:	e7fe      	b.n	80071b2 <ai_platform_network_process+0x9e>
 80071b4:	a1c00100 	.word	0xa1c00100
 80071b8:	e0042000 	.word	0xe0042000
 80071bc:	5c001000 	.word	0x5c001000
 80071c0:	40023000 	.word	0x40023000
 80071c4:	f407a5c2 	.word	0xf407a5c2
 80071c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80071cc:	4ab0      	ldr	r2, [pc, #704]	; (8007490 <ai_platform_network_process+0x37c>)
 80071ce:	2301      	movs	r3, #1
 80071d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80071d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1fb      	bne.n	80071d4 <ai_platform_network_process+0xc0>
 80071dc:	4bad      	ldr	r3, [pc, #692]	; (8007494 <ai_platform_network_process+0x380>)
 80071de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80071e2:	4bad      	ldr	r3, [pc, #692]	; (8007498 <ai_platform_network_process+0x384>)
 80071e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80071e8:	429a      	cmp	r2, r3
 80071ea:	f040 812b 	bne.w	8007444 <ai_platform_network_process+0x330>
 80071ee:	f7ff fa39 	bl	8006664 <_ai_platform_release_crc>
 80071f2:	2d00      	cmp	r5, #0
 80071f4:	f000 8172 	beq.w	80074dc <ai_platform_network_process+0x3c8>
 80071f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8123 	beq.w	8007446 <ai_platform_network_process+0x332>
 8007200:	68eb      	ldr	r3, [r5, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	616a      	str	r2, [r5, #20]
 800720e:	2b03      	cmp	r3, #3
 8007210:	f040 811f 	bne.w	8007452 <ai_platform_network_process+0x33e>
 8007214:	2e00      	cmp	r6, #0
 8007216:	f000 8156 	beq.w	80074c6 <ai_platform_network_process+0x3b2>
 800721a:	fab8 f788 	clz	r7, r8
 800721e:	097f      	lsrs	r7, r7, #5
 8007220:	f1b8 0f00 	cmp.w	r8, #0
 8007224:	f000 814f 	beq.w	80074c6 <ai_platform_network_process+0x3b2>
 8007228:	f8b8 3000 	ldrh.w	r3, [r8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 814a 	beq.w	80074c6 <ai_platform_network_process+0x3b2>
 8007232:	69b3      	ldr	r3, [r6, #24]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800723a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d072      	beq.n	8007328 <ai_platform_network_process+0x214>
 8007242:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007246:	2c00      	cmp	r4, #0
 8007248:	d06e      	beq.n	8007328 <ai_platform_network_process+0x214>
 800724a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800724e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007252:	f8d3 a000 	ldr.w	sl, [r3]
 8007256:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800725a:	f000 8133 	beq.w	80074c4 <ai_platform_network_process+0x3b0>
 800725e:	69a3      	ldr	r3, [r4, #24]
 8007260:	2101      	movs	r1, #1
 8007262:	4630      	mov	r0, r6
 8007264:	685d      	ldr	r5, [r3, #4]
 8007266:	f7ff f9bd 	bl	80065e4 <ai_buffer_get_size>
 800726a:	4285      	cmp	r5, r0
 800726c:	f0c0 8138 	bcc.w	80074e0 <ai_platform_network_process+0x3cc>
 8007270:	68e0      	ldr	r0, [r4, #12]
 8007272:	69b1      	ldr	r1, [r6, #24]
 8007274:	68c2      	ldr	r2, [r0, #12]
 8007276:	68cb      	ldr	r3, [r1, #12]
 8007278:	429a      	cmp	r2, r3
 800727a:	f040 8131 	bne.w	80074e0 <ai_platform_network_process+0x3cc>
 800727e:	6882      	ldr	r2, [r0, #8]
 8007280:	688b      	ldr	r3, [r1, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	f040 812c 	bne.w	80074e0 <ai_platform_network_process+0x3cc>
 8007288:	6842      	ldr	r2, [r0, #4]
 800728a:	684b      	ldr	r3, [r1, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	f040 8127 	bne.w	80074e0 <ai_platform_network_process+0x3cc>
 8007292:	69a3      	ldr	r3, [r4, #24]
 8007294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007298:	f001 f9e6 	bl	8008668 <ai_array_get_data_byte_size>
 800729c:	4605      	mov	r5, r0
 800729e:	4620      	mov	r0, r4
 80072a0:	f001 f938 	bl	8008514 <get_tensor_byte_size>
 80072a4:	4285      	cmp	r5, r0
 80072a6:	f0c0 811b 	bcc.w	80074e0 <ai_platform_network_process+0x3cc>
 80072aa:	69a3      	ldr	r3, [r4, #24]
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	f001 f947 	bl	8008540 <ai_array_to_buffer_fmt>
 80072b2:	6833      	ldr	r3, [r6, #0]
 80072b4:	4058      	eors	r0, r3
 80072b6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80072ba:	f040 81ca 	bne.w	8007652 <ai_platform_network_process+0x53e>
 80072be:	6873      	ldr	r3, [r6, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 81bd 	beq.w	8007640 <ai_platform_network_process+0x52c>
 80072c6:	69b3      	ldr	r3, [r6, #24]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 81ca 	beq.w	8007664 <ai_platform_network_process+0x550>
 80072d0:	9a02      	ldr	r2, [sp, #8]
 80072d2:	4620      	mov	r0, r4
 80072d4:	3701      	adds	r7, #1
 80072d6:	361c      	adds	r6, #28
 80072d8:	429a      	cmp	r2, r3
 80072da:	bf38      	it	cc
 80072dc:	461a      	movcc	r2, r3
 80072de:	9202      	str	r2, [sp, #8]
 80072e0:	f001 f918 	bl	8008514 <get_tensor_byte_size>
 80072e4:	f8c9 0008 	str.w	r0, [r9, #8]
 80072e8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	fb00 f303 	mul.w	r3, r0, r3
 80072f2:	f8c9 300c 	str.w	r3, [r9, #12]
 80072f6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80072fa:	440b      	add	r3, r1
 80072fc:	f8c9 1004 	str.w	r1, [r9, #4]
 8007300:	f84a 300b 	str.w	r3, [sl, fp]
 8007304:	69a0      	ldr	r0, [r4, #24]
 8007306:	6803      	ldr	r3, [r0, #0]
 8007308:	009a      	lsls	r2, r3, #2
 800730a:	f100 80bb 	bmi.w	8007484 <ai_platform_network_process+0x370>
 800730e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	4419      	add	r1, r3
 8007316:	6081      	str	r1, [r0, #8]
 8007318:	69a3      	ldr	r3, [r4, #24]
 800731a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800731e:	60da      	str	r2, [r3, #12]
 8007320:	f8b8 3000 	ldrh.w	r3, [r8]
 8007324:	42bb      	cmp	r3, r7
 8007326:	d888      	bhi.n	800723a <ai_platform_network_process+0x126>
 8007328:	9d03      	ldr	r5, [sp, #12]
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 81a1 	beq.w	8007676 <ai_platform_network_process+0x562>
 8007334:	2a01      	cmp	r2, #1
 8007336:	f240 817b 	bls.w	8007630 <ai_platform_network_process+0x51c>
 800733a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800733e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8174 	beq.w	8007630 <ai_platform_network_process+0x51c>
 8007348:	9e01      	ldr	r6, [sp, #4]
 800734a:	2700      	movs	r7, #0
 800734c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 80d3 	beq.w	80074fc <ai_platform_network_process+0x3e8>
 8007356:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800735a:	2c00      	cmp	r4, #0
 800735c:	f000 80ce 	beq.w	80074fc <ai_platform_network_process+0x3e8>
 8007360:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007364:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007368:	f8d3 8000 	ldr.w	r8, [r3]
 800736c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007370:	f000 819f 	beq.w	80076b2 <ai_platform_network_process+0x59e>
 8007374:	69a3      	ldr	r3, [r4, #24]
 8007376:	2101      	movs	r1, #1
 8007378:	4630      	mov	r0, r6
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	f7ff f931 	bl	80065e4 <ai_buffer_get_size>
 8007382:	9b01      	ldr	r3, [sp, #4]
 8007384:	4283      	cmp	r3, r0
 8007386:	f0c0 8153 	bcc.w	8007630 <ai_platform_network_process+0x51c>
 800738a:	68e0      	ldr	r0, [r4, #12]
 800738c:	69b1      	ldr	r1, [r6, #24]
 800738e:	68c2      	ldr	r2, [r0, #12]
 8007390:	68cb      	ldr	r3, [r1, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	f040 814c 	bne.w	8007630 <ai_platform_network_process+0x51c>
 8007398:	6882      	ldr	r2, [r0, #8]
 800739a:	688b      	ldr	r3, [r1, #8]
 800739c:	429a      	cmp	r2, r3
 800739e:	f040 8147 	bne.w	8007630 <ai_platform_network_process+0x51c>
 80073a2:	6842      	ldr	r2, [r0, #4]
 80073a4:	684b      	ldr	r3, [r1, #4]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	f040 8142 	bne.w	8007630 <ai_platform_network_process+0x51c>
 80073ac:	69a3      	ldr	r3, [r4, #24]
 80073ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073b2:	f001 f959 	bl	8008668 <ai_array_get_data_byte_size>
 80073b6:	9001      	str	r0, [sp, #4]
 80073b8:	4620      	mov	r0, r4
 80073ba:	f001 f8ab 	bl	8008514 <get_tensor_byte_size>
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	4283      	cmp	r3, r0
 80073c2:	f0c0 8135 	bcc.w	8007630 <ai_platform_network_process+0x51c>
 80073c6:	69a3      	ldr	r3, [r4, #24]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	f001 f8b9 	bl	8008540 <ai_array_to_buffer_fmt>
 80073ce:	6833      	ldr	r3, [r6, #0]
 80073d0:	4058      	eors	r0, r3
 80073d2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80073d6:	f040 815c 	bne.w	8007692 <ai_platform_network_process+0x57e>
 80073da:	6873      	ldr	r3, [r6, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8150 	beq.w	8007682 <ai_platform_network_process+0x56e>
 80073e2:	69b3      	ldr	r3, [r6, #24]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 815b 	beq.w	80076a2 <ai_platform_network_process+0x58e>
 80073ec:	9a02      	ldr	r2, [sp, #8]
 80073ee:	4620      	mov	r0, r4
 80073f0:	3701      	adds	r7, #1
 80073f2:	361c      	adds	r6, #28
 80073f4:	429a      	cmp	r2, r3
 80073f6:	bf38      	it	cc
 80073f8:	461a      	movcc	r2, r3
 80073fa:	9202      	str	r2, [sp, #8]
 80073fc:	f001 f88a 	bl	8008514 <get_tensor_byte_size>
 8007400:	f8ca 0008 	str.w	r0, [sl, #8]
 8007404:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	fb00 f303 	mul.w	r3, r0, r3
 800740e:	f8ca 300c 	str.w	r3, [sl, #12]
 8007412:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007416:	440b      	add	r3, r1
 8007418:	f8ca 1004 	str.w	r1, [sl, #4]
 800741c:	f848 300b 	str.w	r3, [r8, fp]
 8007420:	69a0      	ldr	r0, [r4, #24]
 8007422:	6803      	ldr	r3, [r0, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	d464      	bmi.n	80074f2 <ai_platform_network_process+0x3de>
 8007428:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	4419      	add	r1, r3
 8007430:	6081      	str	r1, [r0, #8]
 8007432:	69a3      	ldr	r3, [r4, #24]
 8007434:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007438:	60da      	str	r2, [r3, #12]
 800743a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800743e:	429f      	cmp	r7, r3
 8007440:	d384      	bcc.n	800734c <ai_platform_network_process+0x238>
 8007442:	e05b      	b.n	80074fc <ai_platform_network_process+0x3e8>
 8007444:	e7fe      	b.n	8007444 <ai_platform_network_process+0x330>
 8007446:	68ea      	ldr	r2, [r5, #12]
 8007448:	616b      	str	r3, [r5, #20]
 800744a:	f002 0203 	and.w	r2, r2, #3
 800744e:	2a03      	cmp	r2, #3
 8007450:	d039      	beq.n	80074c6 <ai_platform_network_process+0x3b2>
 8007452:	2230      	movs	r2, #48	; 0x30
 8007454:	2111      	movs	r1, #17
 8007456:	f105 0010 	add.w	r0, r5, #16
 800745a:	2400      	movs	r4, #0
 800745c:	f000 f93a 	bl	80076d4 <core_set_error>
 8007460:	4620      	mov	r0, r4
 8007462:	b005      	add	sp, #20
 8007464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007468:	4a0c      	ldr	r2, [pc, #48]	; (800749c <ai_platform_network_process+0x388>)
 800746a:	2301      	movs	r3, #1
 800746c:	6093      	str	r3, [r2, #8]
 800746e:	6893      	ldr	r3, [r2, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1fc      	bne.n	800746e <ai_platform_network_process+0x35a>
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <ai_platform_network_process+0x380>)
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	4b07      	ldr	r3, [pc, #28]	; (8007498 <ai_platform_network_process+0x384>)
 800747a:	6812      	ldr	r2, [r2, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	f43f aeb6 	beq.w	80071ee <ai_platform_network_process+0xda>
 8007482:	e7fe      	b.n	8007482 <ai_platform_network_process+0x36e>
 8007484:	f8b8 3000 	ldrh.w	r3, [r8]
 8007488:	429f      	cmp	r7, r3
 800748a:	f4ff aed6 	bcc.w	800723a <ai_platform_network_process+0x126>
 800748e:	e74b      	b.n	8007328 <ai_platform_network_process+0x214>
 8007490:	58024000 	.word	0x58024000
 8007494:	f407a5c2 	.word	0xf407a5c2
 8007498:	b5e8b5cd 	.word	0xb5e8b5cd
 800749c:	40023000 	.word	0x40023000
 80074a0:	4a88      	ldr	r2, [pc, #544]	; (80076c4 <ai_platform_network_process+0x5b0>)
 80074a2:	2301      	movs	r3, #1
 80074a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80074a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1fb      	bne.n	80074a8 <ai_platform_network_process+0x394>
 80074b0:	4b85      	ldr	r3, [pc, #532]	; (80076c8 <ai_platform_network_process+0x5b4>)
 80074b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80074b6:	4b85      	ldr	r3, [pc, #532]	; (80076cc <ai_platform_network_process+0x5b8>)
 80074b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80074bc:	429a      	cmp	r2, r3
 80074be:	f43f ae96 	beq.w	80071ee <ai_platform_network_process+0xda>
 80074c2:	e7fe      	b.n	80074c2 <ai_platform_network_process+0x3ae>
 80074c4:	9d03      	ldr	r5, [sp, #12]
 80074c6:	2400      	movs	r4, #0
 80074c8:	2217      	movs	r2, #23
 80074ca:	2112      	movs	r1, #18
 80074cc:	f105 0010 	add.w	r0, r5, #16
 80074d0:	f000 f900 	bl	80076d4 <core_set_error>
 80074d4:	4620      	mov	r0, r4
 80074d6:	b005      	add	sp, #20
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	462c      	mov	r4, r5
 80074de:	e7bf      	b.n	8007460 <ai_platform_network_process+0x34c>
 80074e0:	9d03      	ldr	r5, [sp, #12]
 80074e2:	2218      	movs	r2, #24
 80074e4:	2112      	movs	r1, #18
 80074e6:	2400      	movs	r4, #0
 80074e8:	f105 0010 	add.w	r0, r5, #16
 80074ec:	f000 f8f2 	bl	80076d4 <core_set_error>
 80074f0:	e7b6      	b.n	8007460 <ai_platform_network_process+0x34c>
 80074f2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80074f6:	429f      	cmp	r7, r3
 80074f8:	f4ff af28 	bcc.w	800734c <ai_platform_network_process+0x238>
 80074fc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007500:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007502:	82ab      	strh	r3, [r5, #20]
 8007504:	2a00      	cmp	r2, #0
 8007506:	f040 808d 	bne.w	8007624 <ai_platform_network_process+0x510>
 800750a:	4616      	mov	r6, r2
 800750c:	4617      	mov	r7, r2
 800750e:	8aec      	ldrh	r4, [r5, #22]
 8007510:	429c      	cmp	r4, r3
 8007512:	d2a5      	bcs.n	8007460 <ai_platform_network_process+0x34c>
 8007514:	46ab      	mov	fp, r5
 8007516:	2e00      	cmp	r6, #0
 8007518:	d030      	beq.n	800757c <ai_platform_network_process+0x468>
 800751a:	f04f 0800 	mov.w	r8, #0
 800751e:	e014      	b.n	800754a <ai_platform_network_process+0x436>
 8007520:	6882      	ldr	r2, [r0, #8]
 8007522:	68c5      	ldr	r5, [r0, #12]
 8007524:	6863      	ldr	r3, [r4, #4]
 8007526:	1b52      	subs	r2, r2, r5
 8007528:	4413      	add	r3, r2
 800752a:	6083      	str	r3, [r0, #8]
 800752c:	698b      	ldr	r3, [r1, #24]
 800752e:	6862      	ldr	r2, [r4, #4]
 8007530:	60da      	str	r2, [r3, #12]
 8007532:	f859 200a 	ldr.w	r2, [r9, sl]
 8007536:	f108 0801 	add.w	r8, r8, #1
 800753a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800753e:	440b      	add	r3, r1
 8007540:	4293      	cmp	r3, r2
 8007542:	d301      	bcc.n	8007548 <ai_platform_network_process+0x434>
 8007544:	68e3      	ldr	r3, [r4, #12]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	6063      	str	r3, [r4, #4]
 800754a:	8833      	ldrh	r3, [r6, #0]
 800754c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007550:	4543      	cmp	r3, r8
 8007552:	d913      	bls.n	800757c <ai_platform_network_process+0x468>
 8007554:	6873      	ldr	r3, [r6, #4]
 8007556:	b18b      	cbz	r3, 800757c <ai_platform_network_process+0x468>
 8007558:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800755c:	b171      	cbz	r1, 800757c <ai_platform_network_process+0x468>
 800755e:	6988      	ldr	r0, [r1, #24]
 8007560:	68b2      	ldr	r2, [r6, #8]
 8007562:	6803      	ldr	r3, [r0, #0]
 8007564:	f8d2 9000 	ldr.w	r9, [r2]
 8007568:	009d      	lsls	r5, r3, #2
 800756a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800756e:	d5d7      	bpl.n	8007520 <ai_platform_network_process+0x40c>
 8007570:	6880      	ldr	r0, [r0, #8]
 8007572:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007576:	f001 f8b9 	bl	80086ec <memcpy>
 800757a:	e7da      	b.n	8007532 <ai_platform_network_process+0x41e>
 800757c:	4658      	mov	r0, fp
 800757e:	f000 fe53 	bl	8008228 <ai_layers_forward_all>
 8007582:	2f00      	cmp	r7, #0
 8007584:	d03f      	beq.n	8007606 <ai_platform_network_process+0x4f2>
 8007586:	2400      	movs	r4, #0
 8007588:	e016      	b.n	80075b8 <ai_platform_network_process+0x4a4>
 800758a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800758e:	f859 100a 	ldr.w	r1, [r9, sl]
 8007592:	4413      	add	r3, r2
 8007594:	428b      	cmp	r3, r1
 8007596:	d302      	bcc.n	800759e <ai_platform_network_process+0x48a>
 8007598:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800759c:	1acb      	subs	r3, r1, r3
 800759e:	f8c8 3004 	str.w	r3, [r8, #4]
 80075a2:	6981      	ldr	r1, [r0, #24]
 80075a4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80075a8:	1b52      	subs	r2, r2, r5
 80075aa:	4413      	add	r3, r2
 80075ac:	608b      	str	r3, [r1, #8]
 80075ae:	6983      	ldr	r3, [r0, #24]
 80075b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80075b4:	60da      	str	r2, [r3, #12]
 80075b6:	3401      	adds	r4, #1
 80075b8:	883b      	ldrh	r3, [r7, #0]
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	d923      	bls.n	8007606 <ai_platform_network_process+0x4f2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	b30b      	cbz	r3, 8007606 <ai_platform_network_process+0x4f2>
 80075c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80075c6:	b1f0      	cbz	r0, 8007606 <ai_platform_network_process+0x4f2>
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80075ce:	6983      	ldr	r3, [r0, #24]
 80075d0:	f8d2 9000 	ldr.w	r9, [r2]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80075da:	0092      	lsls	r2, r2, #2
 80075dc:	d5d5      	bpl.n	800758a <ai_platform_network_process+0x476>
 80075de:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80075e2:	6899      	ldr	r1, [r3, #8]
 80075e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80075e8:	f001 f880 	bl	80086ec <memcpy>
 80075ec:	f859 200a 	ldr.w	r2, [r9, sl]
 80075f0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80075f4:	440b      	add	r3, r1
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d302      	bcc.n	8007600 <ai_platform_network_process+0x4ec>
 80075fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	f8c8 3004 	str.w	r3, [r8, #4]
 8007604:	e7d7      	b.n	80075b6 <ai_platform_network_process+0x4a2>
 8007606:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800760a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800760e:	3401      	adds	r4, #1
 8007610:	b2a4      	uxth	r4, r4
 8007612:	42a3      	cmp	r3, r4
 8007614:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007618:	f63f af7d 	bhi.w	8007516 <ai_platform_network_process+0x402>
 800761c:	4620      	mov	r0, r4
 800761e:	b005      	add	sp, #20
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	2a01      	cmp	r2, #1
 8007626:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007628:	d029      	beq.n	800767e <ai_platform_network_process+0x56a>
 800762a:	f106 070c 	add.w	r7, r6, #12
 800762e:	e76e      	b.n	800750e <ai_platform_network_process+0x3fa>
 8007630:	2218      	movs	r2, #24
 8007632:	2113      	movs	r1, #19
 8007634:	f105 0010 	add.w	r0, r5, #16
 8007638:	2400      	movs	r4, #0
 800763a:	f000 f84b 	bl	80076d4 <core_set_error>
 800763e:	e70f      	b.n	8007460 <ai_platform_network_process+0x34c>
 8007640:	9d03      	ldr	r5, [sp, #12]
 8007642:	4604      	mov	r4, r0
 8007644:	2217      	movs	r2, #23
 8007646:	2112      	movs	r1, #18
 8007648:	f105 0010 	add.w	r0, r5, #16
 800764c:	f000 f842 	bl	80076d4 <core_set_error>
 8007650:	e706      	b.n	8007460 <ai_platform_network_process+0x34c>
 8007652:	9d03      	ldr	r5, [sp, #12]
 8007654:	2219      	movs	r2, #25
 8007656:	2112      	movs	r1, #18
 8007658:	2400      	movs	r4, #0
 800765a:	f105 0010 	add.w	r0, r5, #16
 800765e:	f000 f839 	bl	80076d4 <core_set_error>
 8007662:	e6fd      	b.n	8007460 <ai_platform_network_process+0x34c>
 8007664:	9d03      	ldr	r5, [sp, #12]
 8007666:	4604      	mov	r4, r0
 8007668:	2221      	movs	r2, #33	; 0x21
 800766a:	2112      	movs	r1, #18
 800766c:	f105 0010 	add.w	r0, r5, #16
 8007670:	f000 f830 	bl	80076d4 <core_set_error>
 8007674:	e6f4      	b.n	8007460 <ai_platform_network_process+0x34c>
 8007676:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800767a:	82ab      	strh	r3, [r5, #20]
 800767c:	e742      	b.n	8007504 <ai_platform_network_process+0x3f0>
 800767e:	2700      	movs	r7, #0
 8007680:	e745      	b.n	800750e <ai_platform_network_process+0x3fa>
 8007682:	4604      	mov	r4, r0
 8007684:	2217      	movs	r2, #23
 8007686:	2113      	movs	r1, #19
 8007688:	f105 0010 	add.w	r0, r5, #16
 800768c:	f000 f822 	bl	80076d4 <core_set_error>
 8007690:	e6e6      	b.n	8007460 <ai_platform_network_process+0x34c>
 8007692:	2219      	movs	r2, #25
 8007694:	2113      	movs	r1, #19
 8007696:	f105 0010 	add.w	r0, r5, #16
 800769a:	2400      	movs	r4, #0
 800769c:	f000 f81a 	bl	80076d4 <core_set_error>
 80076a0:	e6de      	b.n	8007460 <ai_platform_network_process+0x34c>
 80076a2:	4604      	mov	r4, r0
 80076a4:	2221      	movs	r2, #33	; 0x21
 80076a6:	2113      	movs	r1, #19
 80076a8:	f105 0010 	add.w	r0, r5, #16
 80076ac:	f000 f812 	bl	80076d4 <core_set_error>
 80076b0:	e6d6      	b.n	8007460 <ai_platform_network_process+0x34c>
 80076b2:	2217      	movs	r2, #23
 80076b4:	2113      	movs	r1, #19
 80076b6:	f105 0010 	add.w	r0, r5, #16
 80076ba:	4654      	mov	r4, sl
 80076bc:	f000 f80a 	bl	80076d4 <core_set_error>
 80076c0:	e6ce      	b.n	8007460 <ai_platform_network_process+0x34c>
 80076c2:	bf00      	nop
 80076c4:	58024000 	.word	0x58024000
 80076c8:	f407a5c2 	.word	0xf407a5c2
 80076cc:	b5e8b5cd 	.word	0xb5e8b5cd

080076d0 <core_init>:
 80076d0:	2001      	movs	r0, #1
 80076d2:	4770      	bx	lr

080076d4 <core_set_error>:
 80076d4:	4603      	mov	r3, r0
 80076d6:	7800      	ldrb	r0, [r0, #0]
 80076d8:	b108      	cbz	r0, 80076de <core_set_error+0xa>
 80076da:	2000      	movs	r0, #0
 80076dc:	4770      	bx	lr
 80076de:	7019      	strb	r1, [r3, #0]
 80076e0:	2001      	movs	r0, #1
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	f362 211f 	bfi	r1, r2, #8, #24
 80076e8:	6019      	str	r1, [r3, #0]
 80076ea:	4770      	bx	lr

080076ec <forward_dense>:
 80076ec:	6983      	ldr	r3, [r0, #24]
 80076ee:	881a      	ldrh	r2, [r3, #0]
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	f000 80f0 	beq.w	80078d6 <forward_dense+0x1ea>
 80076f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fa:	ed2d 8b02 	vpush	{d8}
 80076fe:	6858      	ldr	r0, [r3, #4]
 8007700:	b09b      	sub	sp, #108	; 0x6c
 8007702:	6845      	ldr	r5, [r0, #4]
 8007704:	b105      	cbz	r5, 8007708 <forward_dense+0x1c>
 8007706:	682d      	ldr	r5, [r5, #0]
 8007708:	2a01      	cmp	r2, #1
 800770a:	f000 840a 	beq.w	8007f22 <forward_dense+0x836>
 800770e:	6906      	ldr	r6, [r0, #16]
 8007710:	b106      	cbz	r6, 8007714 <forward_dense+0x28>
 8007712:	6836      	ldr	r6, [r6, #0]
 8007714:	2a02      	cmp	r2, #2
 8007716:	f000 80e0 	beq.w	80078da <forward_dense+0x1ee>
 800771a:	69c3      	ldr	r3, [r0, #28]
 800771c:	930d      	str	r3, [sp, #52]	; 0x34
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 83f1 	beq.w	8007f06 <forward_dense+0x81a>
 8007724:	4619      	mov	r1, r3
 8007726:	8b03      	ldrh	r3, [r0, #24]
 8007728:	6809      	ldr	r1, [r1, #0]
 800772a:	2b01      	cmp	r3, #1
 800772c:	910f      	str	r1, [sp, #60]	; 0x3c
 800772e:	f240 83ec 	bls.w	8007f0a <forward_dense+0x81e>
 8007732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	930d      	str	r3, [sp, #52]	; 0x34
 8007738:	460b      	mov	r3, r1
 800773a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800773e:	2a03      	cmp	r2, #3
 8007740:	68eb      	ldr	r3, [r5, #12]
 8007742:	68f7      	ldr	r7, [r6, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	687c      	ldr	r4, [r7, #4]
 8007748:	9317      	str	r3, [sp, #92]	; 0x5c
 800774a:	f8d8 3000 	ldr.w	r3, [r8]
 800774e:	4621      	mov	r1, r4
 8007750:	9419      	str	r4, [sp, #100]	; 0x64
 8007752:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8007756:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800775a:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800775e:	fb01 f404 	mul.w	r4, r1, r4
 8007762:	fa4e f10c 	asr.w	r1, lr, ip
 8007766:	9116      	str	r1, [sp, #88]	; 0x58
 8007768:	f000 83d8 	beq.w	8007f1c <forward_dense+0x830>
 800776c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800776e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007772:	2a00      	cmp	r2, #0
 8007774:	f000 83c2 	beq.w	8007efc <forward_dense+0x810>
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	2a00      	cmp	r2, #0
 800777c:	f000 83be 	beq.w	8007efc <forward_dense+0x810>
 8007780:	2b04      	cmp	r3, #4
 8007782:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8007786:	f000 83a8 	beq.w	8007eda <forward_dense+0x7ee>
 800778a:	2b08      	cmp	r3, #8
 800778c:	f000 83a5 	beq.w	8007eda <forward_dense+0x7ee>
 8007790:	f04f 0a00 	mov.w	sl, #0
 8007794:	69ab      	ldr	r3, [r5, #24]
 8007796:	fb07 f404 	mul.w	r4, r7, r4
 800779a:	69b2      	ldr	r2, [r6, #24]
 800779c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80077a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077a2:	6892      	ldr	r2, [r2, #8]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80077aa:	9206      	str	r2, [sp, #24]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	428a      	cmp	r2, r1
 80077b0:	9110      	str	r1, [sp, #64]	; 0x40
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077b6:	ea4f 0083 	mov.w	r0, r3, lsl #2
 80077ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077be:	900e      	str	r0, [sp, #56]	; 0x38
 80077c0:	9303      	str	r3, [sp, #12]
 80077c2:	f080 8380 	bcs.w	8007ec6 <forward_dense+0x7da>
 80077c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077c8:	4654      	mov	r4, sl
 80077ca:	4bb9      	ldr	r3, [pc, #740]	; (8007ab0 <forward_dense+0x3c4>)
 80077cc:	46ca      	mov	sl, r9
 80077ce:	08d0      	lsrs	r0, r2, #3
 80077d0:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 8007ab4 <forward_dense+0x3c8>
 80077d4:	4413      	add	r3, r2
 80077d6:	9009      	str	r0, [sp, #36]	; 0x24
 80077d8:	0099      	lsls	r1, r3, #2
 80077da:	f022 0301 	bic.w	r3, r2, #1
 80077de:	f002 0201 	and.w	r2, r2, #1
 80077e2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80077e6:	9118      	str	r1, [sp, #96]	; 0x60
 80077e8:	920a      	str	r2, [sp, #40]	; 0x28
 80077ea:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 80077ee:	9305      	str	r3, [sp, #20]
 80077f0:	f101 0320 	add.w	r3, r1, #32
 80077f4:	9207      	str	r2, [sp, #28]
 80077f6:	9311      	str	r3, [sp, #68]	; 0x44
 80077f8:	444b      	add	r3, r9
 80077fa:	469b      	mov	fp, r3
 80077fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80077fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007806:	b10b      	cbz	r3, 800780c <forward_dense+0x120>
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2c00      	cmp	r4, #0
 800780e:	f000 834b 	beq.w	8007ea8 <forward_dense+0x7bc>
 8007812:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007814:	2904      	cmp	r1, #4
 8007816:	f000 826a 	beq.w	8007cee <forward_dense+0x602>
 800781a:	9903      	ldr	r1, [sp, #12]
 800781c:	9806      	ldr	r0, [sp, #24]
 800781e:	4281      	cmp	r1, r0
 8007820:	f240 8356 	bls.w	8007ed0 <forward_dense+0x7e4>
 8007824:	4686      	mov	lr, r0
 8007826:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007828:	eb00 090a 	add.w	r9, r0, sl
 800782c:	0941      	lsrs	r1, r0, #5
 800782e:	f10a 0004 	add.w	r0, sl, #4
 8007832:	f8cd 9020 	str.w	r9, [sp, #32]
 8007836:	9012      	str	r0, [sp, #72]	; 0x48
 8007838:	1c48      	adds	r0, r1, #1
 800783a:	00c9      	lsls	r1, r1, #3
 800783c:	3110      	adds	r1, #16
 800783e:	9115      	str	r1, [sp, #84]	; 0x54
 8007840:	00c1      	lsls	r1, r0, #3
 8007842:	9113      	str	r1, [sp, #76]	; 0x4c
 8007844:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8007848:	9114      	str	r1, [sp, #80]	; 0x50
 800784a:	f1a9 0104 	sub.w	r1, r9, #4
 800784e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8007852:	910c      	str	r1, [sp, #48]	; 0x30
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 8128 	beq.w	8007aaa <forward_dense+0x3be>
 800785a:	ecb3 5a01 	vldmia	r3!, {s10}
 800785e:	f1b9 0f07 	cmp.w	r9, #7
 8007862:	d83d      	bhi.n	80078e0 <forward_dense+0x1f4>
 8007864:	45da      	cmp	sl, fp
 8007866:	d211      	bcs.n	800788c <forward_dense+0x1a0>
 8007868:	eddf 7a92 	vldr	s15, [pc, #584]	; 8007ab4 <forward_dense+0x3c8>
 800786c:	4650      	mov	r0, sl
 800786e:	4615      	mov	r5, r2
 8007870:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007874:	ecb0 7a01 	vldmia	r0!, {s14}
 8007878:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800787c:	4558      	cmp	r0, fp
 800787e:	edd1 6a00 	vldr	s13, [r1]
 8007882:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007886:	d3f3      	bcc.n	8007870 <forward_dense+0x184>
 8007888:	ee35 5a27 	vadd.f32	s10, s10, s15
 800788c:	9904      	ldr	r1, [sp, #16]
 800788e:	ecae 5a01 	vstmia	lr!, {s10}
 8007892:	440a      	add	r2, r1
 8007894:	9903      	ldr	r1, [sp, #12]
 8007896:	458e      	cmp	lr, r1
 8007898:	d3dc      	bcc.n	8007854 <forward_dense+0x168>
 800789a:	9a06      	ldr	r2, [sp, #24]
 800789c:	1a8b      	subs	r3, r1, r2
 800789e:	3b01      	subs	r3, #1
 80078a0:	f023 0303 	bic.w	r3, r3, #3
 80078a4:	3304      	adds	r3, #4
 80078a6:	18d3      	adds	r3, r2, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80078b2:	4413      	add	r3, r2
 80078b4:	9a07      	ldr	r2, [sp, #28]
 80078b6:	4281      	cmp	r1, r0
 80078b8:	9303      	str	r3, [sp, #12]
 80078ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078bc:	441a      	add	r2, r3
 80078be:	449b      	add	fp, r3
 80078c0:	9207      	str	r2, [sp, #28]
 80078c2:	9a05      	ldr	r2, [sp, #20]
 80078c4:	441a      	add	r2, r3
 80078c6:	9205      	str	r2, [sp, #20]
 80078c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078ca:	4692      	mov	sl, r2
 80078cc:	f080 82fb 	bcs.w	8007ec6 <forward_dense+0x7da>
 80078d0:	441a      	add	r2, r3
 80078d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80078d4:	e793      	b.n	80077fe <forward_dense+0x112>
 80078d6:	6853      	ldr	r3, [r2, #4]
 80078d8:	deff      	udf	#255	; 0xff
 80078da:	2300      	movs	r3, #0
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	deff      	udf	#255	; 0xff
 80078e0:	f002 0103 	and.w	r1, r2, #3
 80078e4:	2902      	cmp	r1, #2
 80078e6:	f000 81e6 	beq.w	8007cb6 <forward_dense+0x5ca>
 80078ea:	2903      	cmp	r1, #3
 80078ec:	f000 80e4 	beq.w	8007ab8 <forward_dense+0x3cc>
 80078f0:	2901      	cmp	r1, #1
 80078f2:	f000 81ef 	beq.w	8007cd4 <forward_dense+0x5e8>
 80078f6:	9908      	ldr	r1, [sp, #32]
 80078f8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8007ab4 <forward_dense+0x3c8>
 80078fc:	458a      	cmp	sl, r1
 80078fe:	f200 82e9 	bhi.w	8007ed4 <forward_dense+0x7e8>
 8007902:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007904:	f102 0108 	add.w	r1, r2, #8
 8007908:	f10a 0020 	add.w	r0, sl, #32
 800790c:	18ae      	adds	r6, r5, r2
 800790e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007912:	3108      	adds	r1, #8
 8007914:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8007918:	3020      	adds	r0, #32
 800791a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800791e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8007922:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8007926:	edd5 7a00 	vldr	s15, [r5]
 800792a:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800792e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007932:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8007936:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800793a:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800793e:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8007942:	edd5 2a00 	vldr	s5, [r5]
 8007946:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800794a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800794e:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8007952:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007956:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800795a:	ed95 3a00 	vldr	s6, [r5]
 800795e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007962:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007966:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800796a:	edd5 3a00 	vldr	s7, [r5]
 800796e:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007972:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007976:	eee3 7a84 	vfma.f32	s15, s7, s8
 800797a:	ed95 4a00 	vldr	s8, [r5]
 800797e:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007982:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007986:	eee4 7a24 	vfma.f32	s15, s8, s9
 800798a:	edd5 4a00 	vldr	s9, [r5]
 800798e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007992:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007996:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800799a:	edd5 5a00 	vldr	s11, [r5]
 800799e:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80079a2:	428e      	cmp	r6, r1
 80079a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80079a8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80079ac:	ed95 6a00 	vldr	s12, [r5]
 80079b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80079b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079b8:	d1a9      	bne.n	800790e <forward_dense+0x222>
 80079ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80079bc:	1850      	adds	r0, r2, r1
 80079be:	9914      	ldr	r1, [sp, #80]	; 0x50
 80079c0:	4559      	cmp	r1, fp
 80079c2:	d26f      	bcs.n	8007aa4 <forward_dense+0x3b8>
 80079c4:	7805      	ldrb	r5, [r0, #0]
 80079c6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80079ca:	edd5 7a00 	vldr	s15, [r5]
 80079ce:	460d      	mov	r5, r1
 80079d0:	ecf5 6a01 	vldmia	r5!, {s13}
 80079d4:	45ab      	cmp	fp, r5
 80079d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079da:	d963      	bls.n	8007aa4 <forward_dense+0x3b8>
 80079dc:	7845      	ldrb	r5, [r0, #1]
 80079de:	edd1 6a01 	vldr	s13, [r1, #4]
 80079e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80079e6:	edd5 7a00 	vldr	s15, [r5]
 80079ea:	f101 0508 	add.w	r5, r1, #8
 80079ee:	45ab      	cmp	fp, r5
 80079f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079f4:	d956      	bls.n	8007aa4 <forward_dense+0x3b8>
 80079f6:	7885      	ldrb	r5, [r0, #2]
 80079f8:	edd1 6a02 	vldr	s13, [r1, #8]
 80079fc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a00:	edd5 7a00 	vldr	s15, [r5]
 8007a04:	f101 050c 	add.w	r5, r1, #12
 8007a08:	45ab      	cmp	fp, r5
 8007a0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a0e:	d949      	bls.n	8007aa4 <forward_dense+0x3b8>
 8007a10:	78c5      	ldrb	r5, [r0, #3]
 8007a12:	edd1 6a03 	vldr	s13, [r1, #12]
 8007a16:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a1a:	edd5 7a00 	vldr	s15, [r5]
 8007a1e:	f101 0510 	add.w	r5, r1, #16
 8007a22:	45ab      	cmp	fp, r5
 8007a24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a28:	d93c      	bls.n	8007aa4 <forward_dense+0x3b8>
 8007a2a:	7905      	ldrb	r5, [r0, #4]
 8007a2c:	edd1 6a04 	vldr	s13, [r1, #16]
 8007a30:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a34:	edd5 7a00 	vldr	s15, [r5]
 8007a38:	f101 0514 	add.w	r5, r1, #20
 8007a3c:	45ab      	cmp	fp, r5
 8007a3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a42:	d92f      	bls.n	8007aa4 <forward_dense+0x3b8>
 8007a44:	7945      	ldrb	r5, [r0, #5]
 8007a46:	edd1 6a05 	vldr	s13, [r1, #20]
 8007a4a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a4e:	edd5 7a00 	vldr	s15, [r5]
 8007a52:	f101 0518 	add.w	r5, r1, #24
 8007a56:	45ab      	cmp	fp, r5
 8007a58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a5c:	d922      	bls.n	8007aa4 <forward_dense+0x3b8>
 8007a5e:	7985      	ldrb	r5, [r0, #6]
 8007a60:	edd1 6a06 	vldr	s13, [r1, #24]
 8007a64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a68:	edd5 7a00 	vldr	s15, [r5]
 8007a6c:	f101 051c 	add.w	r5, r1, #28
 8007a70:	45ab      	cmp	fp, r5
 8007a72:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a76:	d915      	bls.n	8007aa4 <forward_dense+0x3b8>
 8007a78:	79c5      	ldrb	r5, [r0, #7]
 8007a7a:	edd1 6a07 	vldr	s13, [r1, #28]
 8007a7e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a82:	edd5 7a00 	vldr	s15, [r5]
 8007a86:	f101 0520 	add.w	r5, r1, #32
 8007a8a:	45ab      	cmp	fp, r5
 8007a8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a90:	d908      	bls.n	8007aa4 <forward_dense+0x3b8>
 8007a92:	edd1 7a08 	vldr	s15, [r1, #32]
 8007a96:	7a01      	ldrb	r1, [r0, #8]
 8007a98:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007a9c:	edd1 6a00 	vldr	s13, [r1]
 8007aa0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007aa4:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007aa8:	e6f0      	b.n	800788c <forward_dense+0x1a0>
 8007aaa:	ed9f 5a02 	vldr	s10, [pc, #8]	; 8007ab4 <forward_dense+0x3c8>
 8007aae:	e6d6      	b.n	800785e <forward_dense+0x172>
 8007ab0:	3ffffff8 	.word	0x3ffffff8
 8007ab4:	00000000 	.word	0x00000000
 8007ab8:	eeb0 7a48 	vmov.f32	s14, s16
 8007abc:	4650      	mov	r0, sl
 8007abe:	4611      	mov	r1, r2
 8007ac0:	468c      	mov	ip, r1
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8007ac8:	ecf6 7a01 	vldmia	r6!, {s15}
 8007acc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ad0:	edd5 6a00 	vldr	s13, [r5]
 8007ad4:	9d08      	ldr	r5, [sp, #32]
 8007ad6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ada:	42ae      	cmp	r6, r5
 8007adc:	d866      	bhi.n	8007bac <forward_dense+0x4c0>
 8007ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ae0:	f101 0711 	add.w	r7, r1, #17
 8007ae4:	3109      	adds	r1, #9
 8007ae6:	eba5 0800 	sub.w	r8, r5, r0
 8007aea:	3024      	adds	r0, #36	; 0x24
 8007aec:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8007af0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8007af4:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007af8:	3108      	adds	r1, #8
 8007afa:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8007afe:	3020      	adds	r0, #32
 8007b00:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b04:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8007b08:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8007b0c:	edd5 7a00 	vldr	s15, [r5]
 8007b10:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8007b14:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007b18:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8007b1c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b20:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8007b24:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8007b28:	edd5 2a00 	vldr	s5, [r5]
 8007b2c:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8007b30:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007b34:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8007b38:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b3c:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8007b40:	ed95 3a00 	vldr	s6, [r5]
 8007b44:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007b48:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007b4c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b50:	edd5 3a00 	vldr	s7, [r5]
 8007b54:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007b58:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b5c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007b60:	ed95 4a00 	vldr	s8, [r5]
 8007b64:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007b68:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b6c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007b70:	edd5 4a00 	vldr	s9, [r5]
 8007b74:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007b78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b7c:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8007b80:	edd5 5a00 	vldr	s11, [r5]
 8007b84:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007b88:	428f      	cmp	r7, r1
 8007b8a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b8e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007b92:	ed95 6a00 	vldr	s12, [r5]
 8007b96:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b9e:	d1a9      	bne.n	8007af4 <forward_dense+0x408>
 8007ba0:	f108 0801 	add.w	r8, r8, #1
 8007ba4:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8007ba8:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 8007bac:	455e      	cmp	r6, fp
 8007bae:	f4bf af79 	bcs.w	8007aa4 <forward_dense+0x3b8>
 8007bb2:	f89c 1000 	ldrb.w	r1, [ip]
 8007bb6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007bba:	edd1 7a00 	vldr	s15, [r1]
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	ecf1 6a01 	vldmia	r1!, {s13}
 8007bc4:	458b      	cmp	fp, r1
 8007bc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007bca:	f67f af6b 	bls.w	8007aa4 <forward_dense+0x3b8>
 8007bce:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8007bd2:	edd6 6a01 	vldr	s13, [r6, #4]
 8007bd6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007bda:	edd1 7a00 	vldr	s15, [r1]
 8007bde:	f106 0108 	add.w	r1, r6, #8
 8007be2:	458b      	cmp	fp, r1
 8007be4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007be8:	f67f af5c 	bls.w	8007aa4 <forward_dense+0x3b8>
 8007bec:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8007bf0:	edd6 6a02 	vldr	s13, [r6, #8]
 8007bf4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007bf8:	edd1 7a00 	vldr	s15, [r1]
 8007bfc:	f106 010c 	add.w	r1, r6, #12
 8007c00:	458b      	cmp	fp, r1
 8007c02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c06:	f67f af4d 	bls.w	8007aa4 <forward_dense+0x3b8>
 8007c0a:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8007c0e:	edd6 6a03 	vldr	s13, [r6, #12]
 8007c12:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007c16:	edd1 7a00 	vldr	s15, [r1]
 8007c1a:	f106 0110 	add.w	r1, r6, #16
 8007c1e:	458b      	cmp	fp, r1
 8007c20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c24:	f67f af3e 	bls.w	8007aa4 <forward_dense+0x3b8>
 8007c28:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8007c2c:	edd6 6a04 	vldr	s13, [r6, #16]
 8007c30:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007c34:	edd1 7a00 	vldr	s15, [r1]
 8007c38:	f106 0114 	add.w	r1, r6, #20
 8007c3c:	458b      	cmp	fp, r1
 8007c3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c42:	f67f af2f 	bls.w	8007aa4 <forward_dense+0x3b8>
 8007c46:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8007c4a:	edd6 6a05 	vldr	s13, [r6, #20]
 8007c4e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007c52:	edd1 7a00 	vldr	s15, [r1]
 8007c56:	f106 0118 	add.w	r1, r6, #24
 8007c5a:	458b      	cmp	fp, r1
 8007c5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c60:	f67f af20 	bls.w	8007aa4 <forward_dense+0x3b8>
 8007c64:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8007c68:	edd6 6a06 	vldr	s13, [r6, #24]
 8007c6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007c70:	edd1 7a00 	vldr	s15, [r1]
 8007c74:	f106 011c 	add.w	r1, r6, #28
 8007c78:	458b      	cmp	fp, r1
 8007c7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c7e:	f67f af11 	bls.w	8007aa4 <forward_dense+0x3b8>
 8007c82:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8007c86:	edd6 6a07 	vldr	s13, [r6, #28]
 8007c8a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007c8e:	edd1 7a00 	vldr	s15, [r1]
 8007c92:	f106 0120 	add.w	r1, r6, #32
 8007c96:	458b      	cmp	fp, r1
 8007c98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007c9c:	f67f af02 	bls.w	8007aa4 <forward_dense+0x3b8>
 8007ca0:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8007ca4:	edd6 7a08 	vldr	s15, [r6, #32]
 8007ca8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007cac:	edd1 6a00 	vldr	s13, [r1]
 8007cb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cb4:	e6f6      	b.n	8007aa4 <forward_dense+0x3b8>
 8007cb6:	eeb0 7a48 	vmov.f32	s14, s16
 8007cba:	4650      	mov	r0, sl
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007cc2:	ecf0 7a01 	vldmia	r0!, {s15}
 8007cc6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007cca:	edd5 6a00 	vldr	s13, [r5]
 8007cce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cd2:	e6f5      	b.n	8007ac0 <forward_dense+0x3d4>
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	edda 7a00 	vldr	s15, [sl]
 8007cda:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cdc:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007ce0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ce4:	ed95 7a00 	vldr	s14, [r5]
 8007ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cec:	e7e7      	b.n	8007cbe <forward_dense+0x5d2>
 8007cee:	9803      	ldr	r0, [sp, #12]
 8007cf0:	9906      	ldr	r1, [sp, #24]
 8007cf2:	4288      	cmp	r0, r1
 8007cf4:	f67f adda 	bls.w	80078ac <forward_dense+0x1c0>
 8007cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cfa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8007cfe:	468b      	mov	fp, r1
 8007d00:	f100 0c01 	add.w	ip, r0, #1
 8007d04:	9805      	ldr	r0, [sp, #20]
 8007d06:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007d0a:	3801      	subs	r0, #1
 8007d0c:	9008      	str	r0, [sp, #32]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 80bf 	beq.w	8007e92 <forward_dense+0x7a6>
 8007d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d16:	ecf3 2a01 	vldmia	r3!, {s5}
 8007d1a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 8007ab4 <forward_dense+0x3c8>
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	f000 80bf 	beq.w	8007ea2 <forward_dense+0x7b6>
 8007d24:	1d10      	adds	r0, r2, #4
 8007d26:	f10a 0120 	add.w	r1, sl, #32
 8007d2a:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8007d2e:	3004      	adds	r0, #4
 8007d30:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8007d34:	3120      	adds	r1, #32
 8007d36:	f007 0e0f 	and.w	lr, r7, #15
 8007d3a:	093f      	lsrs	r7, r7, #4
 8007d3c:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8007d40:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8007d44:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 8007d48:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007d4c:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8007d50:	edde 7a00 	vldr	s15, [lr]
 8007d54:	ed97 3a00 	vldr	s6, [r7]
 8007d58:	0937      	lsrs	r7, r6, #4
 8007d5a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8007d5e:	f006 060f 	and.w	r6, r6, #15
 8007d62:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007d66:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 8007d6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007d6e:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 8007d72:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007d76:	ed97 3a00 	vldr	s6, [r7]
 8007d7a:	ed96 4a00 	vldr	s8, [r6]
 8007d7e:	092e      	lsrs	r6, r5, #4
 8007d80:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8007d84:	f005 050f 	and.w	r5, r5, #15
 8007d88:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007d8c:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 8007d90:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d94:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8007d98:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8007d9c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007da0:	eee4 7a05 	vfma.f32	s15, s8, s10
 8007da4:	ed96 4a00 	vldr	s8, [r6]
 8007da8:	ed95 5a00 	vldr	s10, [r5]
 8007dac:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 8007db0:	4560      	cmp	r0, ip
 8007db2:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8007db6:	f005 050f 	and.w	r5, r5, #15
 8007dba:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007dbe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007dc2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007dc6:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007dca:	ed96 5a00 	vldr	s10, [r6]
 8007dce:	ed95 6a00 	vldr	s12, [r5]
 8007dd2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007dd6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007dda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007dde:	d1a4      	bne.n	8007d2a <forward_dense+0x63e>
 8007de0:	f1ac 0804 	sub.w	r8, ip, #4
 8007de4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8007de8:	9905      	ldr	r1, [sp, #20]
 8007dea:	458e      	cmp	lr, r1
 8007dec:	d229      	bcs.n	8007e42 <forward_dense+0x756>
 8007dee:	9908      	ldr	r1, [sp, #32]
 8007df0:	f10e 0008 	add.w	r0, lr, #8
 8007df4:	f108 36ff 	add.w	r6, r8, #4294967295
 8007df8:	eba1 070e 	sub.w	r7, r1, lr
 8007dfc:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8007e00:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8007e04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e08:	3008      	adds	r0, #8
 8007e0a:	ed50 5a03 	vldr	s11, [r0, #-12]
 8007e0e:	f001 050f 	and.w	r5, r1, #15
 8007e12:	0909      	lsrs	r1, r1, #4
 8007e14:	ed50 6a04 	vldr	s13, [r0, #-16]
 8007e18:	42b7      	cmp	r7, r6
 8007e1a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e1e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007e22:	edd5 7a00 	vldr	s15, [r5]
 8007e26:	ed91 6a00 	vldr	s12, [r1]
 8007e2a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007e2e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e36:	d1e5      	bne.n	8007e04 <forward_dense+0x718>
 8007e38:	f109 0901 	add.w	r9, r9, #1
 8007e3c:	44c8      	add	r8, r9
 8007e3e:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8007e42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e44:	b1c1      	cbz	r1, 8007e78 <forward_dense+0x78c>
 8007e46:	f898 1000 	ldrb.w	r1, [r8]
 8007e4a:	edde 7a00 	vldr	s15, [lr]
 8007e4e:	0909      	lsrs	r1, r1, #4
 8007e50:	9804      	ldr	r0, [sp, #16]
 8007e52:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007e56:	4402      	add	r2, r0
 8007e58:	4484      	add	ip, r0
 8007e5a:	edd1 6a00 	vldr	s13, [r1]
 8007e5e:	9903      	ldr	r1, [sp, #12]
 8007e60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e64:	ee72 2a87 	vadd.f32	s5, s5, s14
 8007e68:	eceb 2a01 	vstmia	fp!, {s5}
 8007e6c:	4559      	cmp	r1, fp
 8007e6e:	f63f af4e 	bhi.w	8007d0e <forward_dense+0x622>
 8007e72:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8007e76:	e510      	b.n	800789a <forward_dense+0x1ae>
 8007e78:	9904      	ldr	r1, [sp, #16]
 8007e7a:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007e7e:	440a      	add	r2, r1
 8007e80:	448c      	add	ip, r1
 8007e82:	9903      	ldr	r1, [sp, #12]
 8007e84:	ecab 7a01 	vstmia	fp!, {s14}
 8007e88:	458b      	cmp	fp, r1
 8007e8a:	d2f2      	bcs.n	8007e72 <forward_dense+0x786>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f47f af41 	bne.w	8007d14 <forward_dense+0x628>
 8007e92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e94:	eef0 2a48 	vmov.f32	s5, s16
 8007e98:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8007f28 <forward_dense+0x83c>
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	f47f af41 	bne.w	8007d24 <forward_dense+0x638>
 8007ea2:	46d6      	mov	lr, sl
 8007ea4:	4690      	mov	r8, r2
 8007ea6:	e79f      	b.n	8007de8 <forward_dense+0x6fc>
 8007ea8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007eaa:	4651      	mov	r1, sl
 8007eac:	9d06      	ldr	r5, [sp, #24]
 8007eae:	9001      	str	r0, [sp, #4]
 8007eb0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007eb2:	9000      	str	r0, [sp, #0]
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f000 f9ff 	bl	80082b8 <lite_dense_if32of32wf32>
 8007eba:	462b      	mov	r3, r5
 8007ebc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ebe:	4413      	add	r3, r2
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	9306      	str	r3, [sp, #24]
 8007ec4:	e4f2      	b.n	80078ac <forward_dense+0x1c0>
 8007ec6:	b01b      	add	sp, #108	; 0x6c
 8007ec8:	ecbd 8b02 	vpop	{d8}
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	4601      	mov	r1, r0
 8007ed2:	e4eb      	b.n	80078ac <forward_dense+0x1c0>
 8007ed4:	4651      	mov	r1, sl
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	e572      	b.n	80079c0 <forward_dense+0x2d4>
 8007eda:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8007ede:	f1b9 0f00 	cmp.w	r9, #0
 8007ee2:	d016      	beq.n	8007f12 <forward_dense+0x826>
 8007ee4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007ee8:	f000 fb96 	bl	8008618 <ai_array_get_byte_size>
 8007eec:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	4650      	mov	r0, sl
 8007ef6:	f000 fbf9 	bl	80086ec <memcpy>
 8007efa:	e44b      	b.n	8007794 <forward_dense+0xa8>
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d00a      	beq.n	8007f16 <forward_dense+0x82a>
 8007f00:	f04f 0900 	mov.w	r9, #0
 8007f04:	e441      	b.n	800778a <forward_dense+0x9e>
 8007f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f08:	e417      	b.n	800773a <forward_dense+0x4e>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007f0e:	460b      	mov	r3, r1
 8007f10:	e413      	b.n	800773a <forward_dense+0x4e>
 8007f12:	46c2      	mov	sl, r8
 8007f14:	e43e      	b.n	8007794 <forward_dense+0xa8>
 8007f16:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8007f1a:	e43b      	b.n	8007794 <forward_dense+0xa8>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	deff      	udf	#255	; 0xff
 8007f22:	2300      	movs	r3, #0
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	deff      	udf	#255	; 0xff
 8007f28:	00000000 	.word	0x00000000

08007f2c <forward_relu>:
 8007f2c:	6982      	ldr	r2, [r0, #24]
 8007f2e:	8813      	ldrh	r3, [r2, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d05b      	beq.n	8007fec <forward_relu+0xc0>
 8007f34:	6851      	ldr	r1, [r2, #4]
 8007f36:	684a      	ldr	r2, [r1, #4]
 8007f38:	b102      	cbz	r2, 8007f3c <forward_relu+0x10>
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	f000 8123 	beq.w	8008188 <forward_relu+0x25c>
 8007f42:	b470      	push	{r4, r5, r6}
 8007f44:	690b      	ldr	r3, [r1, #16]
 8007f46:	b103      	cbz	r3, 8007f4a <forward_relu+0x1e>
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69c6      	ldr	r6, [r0, #28]
 8007f4c:	2e00      	cmp	r6, #0
 8007f4e:	f000 809e 	beq.w	800808e <forward_relu+0x162>
 8007f52:	6871      	ldr	r1, [r6, #4]
 8007f54:	6998      	ldr	r0, [r3, #24]
 8007f56:	2901      	cmp	r1, #1
 8007f58:	f000 80c3 	beq.w	80080e2 <forward_relu+0x1b6>
 8007f5c:	6893      	ldr	r3, [r2, #8]
 8007f5e:	6991      	ldr	r1, [r2, #24]
 8007f60:	0a1b      	lsrs	r3, r3, #8
 8007f62:	6880      	ldr	r0, [r0, #8]
 8007f64:	688d      	ldr	r5, [r1, #8]
 8007f66:	f000 80f2 	beq.w	800814e <forward_relu+0x222>
 8007f6a:	68d4      	ldr	r4, [r2, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	fb01 f202 	mul.w	r2, r1, r2
 8007f7c:	d1f9      	bne.n	8007f72 <forward_relu+0x46>
 8007f7e:	68b3      	ldr	r3, [r6, #8]
 8007f80:	ed93 7a02 	vldr	s14, [r3, #8]
 8007f84:	edd3 6a00 	vldr	s13, [r3]
 8007f88:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007f8c:	ed93 6a01 	vldr	s12, [r3, #4]
 8007f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f94:	d42c      	bmi.n	8007ff0 <forward_relu+0xc4>
 8007f96:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007f9a:	4413      	add	r3, r2
 8007f9c:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8007fa0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007fa4:	4295      	cmp	r5, r2
 8007fa6:	d81f      	bhi.n	8007fe8 <forward_relu+0xbc>
 8007fa8:	3204      	adds	r2, #4
 8007faa:	1d01      	adds	r1, r0, #4
 8007fac:	e00d      	b.n	8007fca <forward_relu+0x9e>
 8007fae:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb6:	db03      	blt.n	8007fc0 <forward_relu+0x94>
 8007fb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fbc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007fc0:	3b08      	subs	r3, #8
 8007fc2:	ed61 7a01 	vstmdb	r1!, {s15}
 8007fc6:	429d      	cmp	r5, r3
 8007fc8:	d80e      	bhi.n	8007fe8 <forward_relu+0xbc>
 8007fca:	4613      	mov	r3, r2
 8007fcc:	ed72 7a01 	vldmdb	r2!, {s15}
 8007fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd8:	d9e9      	bls.n	8007fae <forward_relu+0x82>
 8007fda:	3b08      	subs	r3, #8
 8007fdc:	eef0 7a47 	vmov.f32	s15, s14
 8007fe0:	429d      	cmp	r5, r3
 8007fe2:	ed61 7a01 	vstmdb	r1!, {s15}
 8007fe6:	d9f0      	bls.n	8007fca <forward_relu+0x9e>
 8007fe8:	bc70      	pop	{r4, r5, r6}
 8007fea:	4770      	bx	lr
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	deff      	udf	#255	; 0xff
 8007ff0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007ff4:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8007ff8:	4411      	add	r1, r2
 8007ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ffe:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008002:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008006:	d11f      	bne.n	8008048 <forward_relu+0x11c>
 8008008:	429d      	cmp	r5, r3
 800800a:	d8ed      	bhi.n	8007fe8 <forward_relu+0xbc>
 800800c:	1b5d      	subs	r5, r3, r5
 800800e:	1d1a      	adds	r2, r3, #4
 8008010:	1d01      	adds	r1, r0, #4
 8008012:	2000      	movs	r0, #0
 8008014:	f025 0503 	bic.w	r5, r5, #3
 8008018:	1b5b      	subs	r3, r3, r5
 800801a:	ed72 7a01 	vldmdb	r2!, {s15}
 800801e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008026:	dc0a      	bgt.n	800803e <forward_relu+0x112>
 8008028:	429a      	cmp	r2, r3
 800802a:	f841 0d04 	str.w	r0, [r1, #-4]!
 800802e:	d0db      	beq.n	8007fe8 <forward_relu+0xbc>
 8008030:	ed72 7a01 	vldmdb	r2!, {s15}
 8008034:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803c:	ddf4      	ble.n	8008028 <forward_relu+0xfc>
 800803e:	429a      	cmp	r2, r3
 8008040:	ed61 7a01 	vstmdb	r1!, {s15}
 8008044:	d1e9      	bne.n	800801a <forward_relu+0xee>
 8008046:	e7cf      	b.n	8007fe8 <forward_relu+0xbc>
 8008048:	429d      	cmp	r5, r3
 800804a:	d8cd      	bhi.n	8007fe8 <forward_relu+0xbc>
 800804c:	1b5d      	subs	r5, r3, r5
 800804e:	1d1a      	adds	r2, r3, #4
 8008050:	1d01      	adds	r1, r0, #4
 8008052:	f025 0503 	bic.w	r5, r5, #3
 8008056:	1b5b      	subs	r3, r3, r5
 8008058:	ed72 7a01 	vldmdb	r2!, {s15}
 800805c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008064:	db0e      	blt.n	8008084 <forward_relu+0x158>
 8008066:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800806a:	4293      	cmp	r3, r2
 800806c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008070:	ed61 7a01 	vstmdb	r1!, {s15}
 8008074:	d0b8      	beq.n	8007fe8 <forward_relu+0xbc>
 8008076:	ed72 7a01 	vldmdb	r2!, {s15}
 800807a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800807e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008082:	daf0      	bge.n	8008066 <forward_relu+0x13a>
 8008084:	4293      	cmp	r3, r2
 8008086:	ed61 7a01 	vstmdb	r1!, {s15}
 800808a:	d1e5      	bne.n	8008058 <forward_relu+0x12c>
 800808c:	e7ac      	b.n	8007fe8 <forward_relu+0xbc>
 800808e:	6999      	ldr	r1, [r3, #24]
 8008090:	6893      	ldr	r3, [r2, #8]
 8008092:	6990      	ldr	r0, [r2, #24]
 8008094:	0a1b      	lsrs	r3, r3, #8
 8008096:	6889      	ldr	r1, [r1, #8]
 8008098:	6884      	ldr	r4, [r0, #8]
 800809a:	d06e      	beq.n	800817a <forward_relu+0x24e>
 800809c:	68d5      	ldr	r5, [r2, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80080a4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80080a8:	429d      	cmp	r5, r3
 80080aa:	fb00 f202 	mul.w	r2, r0, r2
 80080ae:	d1f9      	bne.n	80080a4 <forward_relu+0x178>
 80080b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80080b4:	4413      	add	r3, r2
 80080b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80080ba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80080be:	4294      	cmp	r4, r2
 80080c0:	d892      	bhi.n	8007fe8 <forward_relu+0xbc>
 80080c2:	3204      	adds	r2, #4
 80080c4:	3104      	adds	r1, #4
 80080c6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008190 <forward_relu+0x264>
 80080ca:	4613      	mov	r3, r2
 80080cc:	ed72 7a01 	vldmdb	r2!, {s15}
 80080d0:	3b08      	subs	r3, #8
 80080d2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80080d6:	ed61 7a01 	vstmdb	r1!, {s15}
 80080da:	429c      	cmp	r4, r3
 80080dc:	d9f5      	bls.n	80080ca <forward_relu+0x19e>
 80080de:	bc70      	pop	{r4, r5, r6}
 80080e0:	4770      	bx	lr
 80080e2:	6993      	ldr	r3, [r2, #24]
 80080e4:	6880      	ldr	r0, [r0, #8]
 80080e6:	689c      	ldr	r4, [r3, #8]
 80080e8:	6893      	ldr	r3, [r2, #8]
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	d047      	beq.n	800817e <forward_relu+0x252>
 80080ee:	68d5      	ldr	r5, [r2, #12]
 80080f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80080f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80080f8:	42ab      	cmp	r3, r5
 80080fa:	fb02 f101 	mul.w	r1, r2, r1
 80080fe:	d1f9      	bne.n	80080f4 <forward_relu+0x1c8>
 8008100:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8008104:	68b3      	ldr	r3, [r6, #8]
 8008106:	440a      	add	r2, r1
 8008108:	ed93 7a00 	vldr	s14, [r3]
 800810c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008110:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008114:	429c      	cmp	r4, r3
 8008116:	f63f af67 	bhi.w	8007fe8 <forward_relu+0xbc>
 800811a:	1d02      	adds	r2, r0, #4
 800811c:	3304      	adds	r3, #4
 800811e:	2000      	movs	r0, #0
 8008120:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008124:	1f19      	subs	r1, r3, #4
 8008126:	3b08      	subs	r3, #8
 8008128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800812c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008130:	d406      	bmi.n	8008140 <forward_relu+0x214>
 8008132:	429c      	cmp	r4, r3
 8008134:	f842 0d04 	str.w	r0, [r2, #-4]!
 8008138:	f63f af56 	bhi.w	8007fe8 <forward_relu+0xbc>
 800813c:	460b      	mov	r3, r1
 800813e:	e7ef      	b.n	8008120 <forward_relu+0x1f4>
 8008140:	429c      	cmp	r4, r3
 8008142:	ed62 7a01 	vstmdb	r2!, {s15}
 8008146:	f63f af4f 	bhi.w	8007fe8 <forward_relu+0xbc>
 800814a:	460b      	mov	r3, r1
 800814c:	e7e8      	b.n	8008120 <forward_relu+0x1f4>
 800814e:	68b3      	ldr	r3, [r6, #8]
 8008150:	ed93 7a02 	vldr	s14, [r3, #8]
 8008154:	edd3 6a00 	vldr	s13, [r3]
 8008158:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800815c:	ed93 6a01 	vldr	s12, [r3, #4]
 8008160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008164:	d401      	bmi.n	800816a <forward_relu+0x23e>
 8008166:	462a      	mov	r2, r5
 8008168:	e71e      	b.n	8007fa8 <forward_relu+0x7c>
 800816a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800816e:	462b      	mov	r3, r5
 8008170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008174:	f47f af6a 	bne.w	800804c <forward_relu+0x120>
 8008178:	e748      	b.n	800800c <forward_relu+0xe0>
 800817a:	4622      	mov	r2, r4
 800817c:	e7a1      	b.n	80080c2 <forward_relu+0x196>
 800817e:	68b2      	ldr	r2, [r6, #8]
 8008180:	4623      	mov	r3, r4
 8008182:	ed92 7a00 	vldr	s14, [r2]
 8008186:	e7c8      	b.n	800811a <forward_relu+0x1ee>
 8008188:	2300      	movs	r3, #0
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	deff      	udf	#255	; 0xff
 800818e:	bf00      	nop
 8008190:	00000000 	.word	0x00000000

08008194 <ai_check_custom_types>:
 8008194:	b082      	sub	sp, #8
 8008196:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <ai_check_custom_types+0x4c>)
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	b118      	cbz	r0, 80081a4 <ai_check_custom_types+0x10>
 800819c:	7803      	ldrb	r3, [r0, #0]
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d002      	beq.n	80081a8 <ai_check_custom_types+0x14>
 80081a2:	2000      	movs	r0, #0
 80081a4:	b002      	add	sp, #8
 80081a6:	4770      	bx	lr
 80081a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d004      	beq.n	80081ba <ai_check_custom_types+0x26>
 80081b0:	2001      	movs	r0, #1
 80081b2:	f080 0001 	eor.w	r0, r0, #1
 80081b6:	b002      	add	sp, #8
 80081b8:	4770      	bx	lr
 80081ba:	7842      	ldrb	r2, [r0, #1]
 80081bc:	3001      	adds	r0, #1
 80081be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d1f4      	bne.n	80081b0 <ai_check_custom_types+0x1c>
 80081c6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80081ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d1ee      	bne.n	80081b0 <ai_check_custom_types+0x1c>
 80081d2:	7842      	ldrb	r2, [r0, #1]
 80081d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d1e9      	bne.n	80081b0 <ai_check_custom_types+0x1c>
 80081dc:	2000      	movs	r0, #0
 80081de:	e7e8      	b.n	80081b2 <ai_check_custom_types+0x1e>
 80081e0:	84048403 	.word	0x84048403

080081e4 <ai_layers_init_all>:
 80081e4:	2100      	movs	r1, #0
 80081e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80081e8:	b13b      	cbz	r3, 80081fa <ai_layers_init_all+0x16>
 80081ea:	691a      	ldr	r2, [r3, #16]
 80081ec:	3101      	adds	r1, #1
 80081ee:	60d8      	str	r0, [r3, #12]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	4613      	mov	r3, r2
 80081f4:	d001      	beq.n	80081fa <ai_layers_init_all+0x16>
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	d1f6      	bne.n	80081e8 <ai_layers_init_all+0x4>
 80081fa:	4608      	mov	r0, r1
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop

08008200 <ai_layers_post_init_all>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	2500      	movs	r5, #0
 8008204:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008206:	b16c      	cbz	r4, 8008224 <ai_layers_post_init_all+0x24>
 8008208:	6863      	ldr	r3, [r4, #4]
 800820a:	07db      	lsls	r3, r3, #31
 800820c:	d504      	bpl.n	8008218 <ai_layers_post_init_all+0x18>
 800820e:	6a23      	ldr	r3, [r4, #32]
 8008210:	4620      	mov	r0, r4
 8008212:	b10b      	cbz	r3, 8008218 <ai_layers_post_init_all+0x18>
 8008214:	3501      	adds	r5, #1
 8008216:	4798      	blx	r3
 8008218:	6923      	ldr	r3, [r4, #16]
 800821a:	42a3      	cmp	r3, r4
 800821c:	461c      	mov	r4, r3
 800821e:	d001      	beq.n	8008224 <ai_layers_post_init_all+0x24>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1f0      	bne.n	8008206 <ai_layers_post_init_all+0x6>
 8008224:	4628      	mov	r0, r5
 8008226:	bd38      	pop	{r3, r4, r5, pc}

08008228 <ai_layers_forward_all>:
 8008228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8008230:	4604      	mov	r4, r0
 8008232:	f1b8 0f00 	cmp.w	r8, #0
 8008236:	d02a      	beq.n	800828e <ai_layers_forward_all+0x66>
 8008238:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800823a:	6381      	str	r1, [r0, #56]	; 0x38
 800823c:	b319      	cbz	r1, 8008286 <ai_layers_forward_all+0x5e>
 800823e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008240:	2001      	movs	r0, #1
 8008242:	47c0      	blx	r8
 8008244:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008246:	b1f6      	cbz	r6, 8008286 <ai_layers_forward_all+0x5e>
 8008248:	2700      	movs	r7, #0
 800824a:	4631      	mov	r1, r6
 800824c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800824e:	2002      	movs	r0, #2
 8008250:	47c0      	blx	r8
 8008252:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008254:	4628      	mov	r0, r5
 8008256:	696b      	ldr	r3, [r5, #20]
 8008258:	4798      	blx	r3
 800825a:	692e      	ldr	r6, [r5, #16]
 800825c:	2003      	movs	r0, #3
 800825e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008260:	42b5      	cmp	r5, r6
 8008262:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008264:	d007      	beq.n	8008276 <ai_layers_forward_all+0x4e>
 8008266:	47c0      	blx	r8
 8008268:	3701      	adds	r7, #1
 800826a:	63a6      	str	r6, [r4, #56]	; 0x38
 800826c:	2e00      	cmp	r6, #0
 800826e:	d1ec      	bne.n	800824a <ai_layers_forward_all+0x22>
 8008270:	4638      	mov	r0, r7
 8008272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008276:	2003      	movs	r0, #3
 8008278:	3701      	adds	r7, #1
 800827a:	47c0      	blx	r8
 800827c:	2300      	movs	r3, #0
 800827e:	4638      	mov	r0, r7
 8008280:	63a3      	str	r3, [r4, #56]	; 0x38
 8008282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008286:	2700      	movs	r7, #0
 8008288:	4638      	mov	r0, r7
 800828a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800828e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008290:	6385      	str	r5, [r0, #56]	; 0x38
 8008292:	2d00      	cmp	r5, #0
 8008294:	d0f7      	beq.n	8008286 <ai_layers_forward_all+0x5e>
 8008296:	4647      	mov	r7, r8
 8008298:	696b      	ldr	r3, [r5, #20]
 800829a:	4628      	mov	r0, r5
 800829c:	4798      	blx	r3
 800829e:	462b      	mov	r3, r5
 80082a0:	692d      	ldr	r5, [r5, #16]
 80082a2:	429d      	cmp	r5, r3
 80082a4:	d004      	beq.n	80082b0 <ai_layers_forward_all+0x88>
 80082a6:	3701      	adds	r7, #1
 80082a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	d1f4      	bne.n	8008298 <ai_layers_forward_all+0x70>
 80082ae:	e7df      	b.n	8008270 <ai_layers_forward_all+0x48>
 80082b0:	2300      	movs	r3, #0
 80082b2:	3701      	adds	r7, #1
 80082b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80082b6:	e7db      	b.n	8008270 <ai_layers_forward_all+0x48>

080082b8 <lite_dense_if32of32wf32>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	ed2d 8b0c 	vpush	{d8-d13}
 80082c0:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 80082c4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80082c8:	4287      	cmp	r7, r0
 80082ca:	f240 8105 	bls.w	80084d8 <lite_dense_if32of32wf32+0x220>
 80082ce:	f1a6 0810 	sub.w	r8, r6, #16
 80082d2:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80082d6:	4605      	mov	r5, r0
 80082d8:	f006 0b0f 	and.w	fp, r6, #15
 80082dc:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80082e0:	f108 0801 	add.w	r8, r8, #1
 80082e4:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80082e8:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80082ec:	2e0f      	cmp	r6, #15
 80082ee:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8008504 <lite_dense_if32of32wf32+0x24c>
 80082f2:	f240 8102 	bls.w	80084fa <lite_dense_if32of32wf32+0x242>
 80082f6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80082fa:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80082fe:	46b6      	mov	lr, r6
 8008300:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8008304:	f1ae 0e10 	sub.w	lr, lr, #16
 8008308:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800830c:	3440      	adds	r4, #64	; 0x40
 800830e:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 8008312:	f1be 0f0f 	cmp.w	lr, #15
 8008316:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800831a:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800831e:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008322:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008326:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800832a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800832e:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8008332:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8008336:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800833a:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800833e:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8008342:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8008346:	eee5 7a86 	vfma.f32	s15, s11, s12
 800834a:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800834e:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8008352:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8008356:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800835a:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800835e:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8008362:	eeed 7a26 	vfma.f32	s15, s26, s13
 8008366:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800836a:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800836e:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8008372:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8008376:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800837a:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800837e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008382:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8008386:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800838a:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800838e:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8008392:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8008396:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800839a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800839e:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80083a2:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80083a6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80083aa:	eee9 7a89 	vfma.f32	s15, s19, s18
 80083ae:	eee8 7a88 	vfma.f32	s15, s17, s16
 80083b2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80083b6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80083ba:	eee2 7a22 	vfma.f32	s15, s4, s5
 80083be:	eee3 7a23 	vfma.f32	s15, s6, s7
 80083c2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80083c6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80083ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 80083ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083d2:	d895      	bhi.n	8008300 <lite_dense_if32of32wf32+0x48>
 80083d4:	eb02 0e0a 	add.w	lr, r2, sl
 80083d8:	465c      	mov	r4, fp
 80083da:	46c4      	mov	ip, r8
 80083dc:	2c00      	cmp	r4, #0
 80083de:	d075      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 80083e0:	eddc 6a00 	vldr	s13, [ip]
 80083e4:	2c01      	cmp	r4, #1
 80083e6:	edde 7a00 	vldr	s15, [lr]
 80083ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083ee:	d06d      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 80083f0:	eddc 6a01 	vldr	s13, [ip, #4]
 80083f4:	2c02      	cmp	r4, #2
 80083f6:	edde 7a01 	vldr	s15, [lr, #4]
 80083fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083fe:	d065      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008400:	eddc 6a02 	vldr	s13, [ip, #8]
 8008404:	2c03      	cmp	r4, #3
 8008406:	edde 7a02 	vldr	s15, [lr, #8]
 800840a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800840e:	d05d      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008410:	eddc 6a03 	vldr	s13, [ip, #12]
 8008414:	2c04      	cmp	r4, #4
 8008416:	edde 7a03 	vldr	s15, [lr, #12]
 800841a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800841e:	d055      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008420:	eddc 6a04 	vldr	s13, [ip, #16]
 8008424:	2c05      	cmp	r4, #5
 8008426:	edde 7a04 	vldr	s15, [lr, #16]
 800842a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800842e:	d04d      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008430:	eddc 6a05 	vldr	s13, [ip, #20]
 8008434:	2c06      	cmp	r4, #6
 8008436:	edde 7a05 	vldr	s15, [lr, #20]
 800843a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800843e:	d045      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008440:	eddc 6a06 	vldr	s13, [ip, #24]
 8008444:	2c07      	cmp	r4, #7
 8008446:	edde 7a06 	vldr	s15, [lr, #24]
 800844a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800844e:	d03d      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008450:	eddc 6a07 	vldr	s13, [ip, #28]
 8008454:	2c08      	cmp	r4, #8
 8008456:	edde 7a07 	vldr	s15, [lr, #28]
 800845a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800845e:	d035      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008460:	eddc 6a08 	vldr	s13, [ip, #32]
 8008464:	2c09      	cmp	r4, #9
 8008466:	edde 7a08 	vldr	s15, [lr, #32]
 800846a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800846e:	d02d      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008470:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8008474:	2c0a      	cmp	r4, #10
 8008476:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800847a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800847e:	d025      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008480:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8008484:	2c0b      	cmp	r4, #11
 8008486:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800848a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800848e:	d01d      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 8008490:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8008494:	2c0c      	cmp	r4, #12
 8008496:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800849a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800849e:	d015      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 80084a0:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80084a4:	3c0d      	subs	r4, #13
 80084a6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80084aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80084ae:	d00d      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 80084b0:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80084b4:	2c01      	cmp	r4, #1
 80084b6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80084ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80084be:	d005      	beq.n	80084cc <lite_dense_if32of32wf32+0x214>
 80084c0:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80084c4:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80084c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80084cc:	eca5 7a01 	vstmia	r5!, {s14}
 80084d0:	42af      	cmp	r7, r5
 80084d2:	444a      	add	r2, r9
 80084d4:	f63f af0a 	bhi.w	80082ec <lite_dense_if32of32wf32+0x34>
 80084d8:	b15b      	cbz	r3, 80084f2 <lite_dense_if32of32wf32+0x23a>
 80084da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80084dc:	b14a      	cbz	r2, 80084f2 <lite_dense_if32of32wf32+0x23a>
 80084de:	edd0 7a00 	vldr	s15, [r0]
 80084e2:	ecb3 7a01 	vldmia	r3!, {s14}
 80084e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084ea:	ece0 7a01 	vstmia	r0!, {s15}
 80084ee:	4287      	cmp	r7, r0
 80084f0:	d1f5      	bne.n	80084de <lite_dense_if32of32wf32+0x226>
 80084f2:	ecbd 8b0c 	vpop	{d8-d13}
 80084f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fa:	4634      	mov	r4, r6
 80084fc:	4696      	mov	lr, r2
 80084fe:	468c      	mov	ip, r1
 8008500:	e76c      	b.n	80083dc <lite_dense_if32of32wf32+0x124>
 8008502:	bf00      	nop
 8008504:	00000000 	.word	0x00000000

08008508 <ai_version_get>:
 8008508:	0212      	lsls	r2, r2, #8
 800850a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800850e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008512:	4770      	bx	lr

08008514 <get_tensor_byte_size>:
 8008514:	b430      	push	{r4, r5}
 8008516:	6985      	ldr	r5, [r0, #24]
 8008518:	68c4      	ldr	r4, [r0, #12]
 800851a:	6941      	ldr	r1, [r0, #20]
 800851c:	4b06      	ldr	r3, [pc, #24]	; (8008538 <get_tensor_byte_size+0x24>)
 800851e:	6828      	ldr	r0, [r5, #0]
 8008520:	4a06      	ldr	r2, [pc, #24]	; (800853c <get_tensor_byte_size+0x28>)
 8008522:	4003      	ands	r3, r0
 8008524:	68c9      	ldr	r1, [r1, #12]
 8008526:	68e0      	ldr	r0, [r4, #12]
 8008528:	4293      	cmp	r3, r2
 800852a:	fb01 f000 	mul.w	r0, r1, r0
 800852e:	d101      	bne.n	8008534 <get_tensor_byte_size+0x20>
 8008530:	3007      	adds	r0, #7
 8008532:	08c0      	lsrs	r0, r0, #3
 8008534:	bc30      	pop	{r4, r5}
 8008536:	4770      	bx	lr
 8008538:	017fffff 	.word	0x017fffff
 800853c:	000400c0 	.word	0x000400c0

08008540 <ai_array_to_buffer_fmt>:
 8008540:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008544:	2b02      	cmp	r3, #2
 8008546:	d050      	beq.n	80085ea <ai_array_to_buffer_fmt+0xaa>
 8008548:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800854c:	4b29      	ldr	r3, [pc, #164]	; (80085f4 <ai_array_to_buffer_fmt+0xb4>)
 800854e:	429a      	cmp	r2, r3
 8008550:	d00b      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 8008552:	dc1c      	bgt.n	800858e <ai_array_to_buffer_fmt+0x4e>
 8008554:	4b28      	ldr	r3, [pc, #160]	; (80085f8 <ai_array_to_buffer_fmt+0xb8>)
 8008556:	429a      	cmp	r2, r3
 8008558:	d007      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 800855a:	dd0b      	ble.n	8008574 <ai_array_to_buffer_fmt+0x34>
 800855c:	4b27      	ldr	r3, [pc, #156]	; (80085fc <ai_array_to_buffer_fmt+0xbc>)
 800855e:	429a      	cmp	r2, r3
 8008560:	d003      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 8008562:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8008566:	429a      	cmp	r2, r3
 8008568:	d131      	bne.n	80085ce <ai_array_to_buffer_fmt+0x8e>
 800856a:	4613      	mov	r3, r2
 800856c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008570:	4318      	orrs	r0, r3
 8008572:	4770      	bx	lr
 8008574:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008578:	429a      	cmp	r2, r3
 800857a:	d0f6      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 800857c:	dd2c      	ble.n	80085d8 <ai_array_to_buffer_fmt+0x98>
 800857e:	4b20      	ldr	r3, [pc, #128]	; (8008600 <ai_array_to_buffer_fmt+0xc0>)
 8008580:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008584:	429a      	cmp	r2, r3
 8008586:	bf18      	it	ne
 8008588:	2340      	movne	r3, #64	; 0x40
 800858a:	4318      	orrs	r0, r3
 800858c:	4770      	bx	lr
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <ai_array_to_buffer_fmt+0xc4>)
 8008590:	429a      	cmp	r2, r3
 8008592:	d0ea      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 8008594:	dd0e      	ble.n	80085b4 <ai_array_to_buffer_fmt+0x74>
 8008596:	4b1c      	ldr	r3, [pc, #112]	; (8008608 <ai_array_to_buffer_fmt+0xc8>)
 8008598:	429a      	cmp	r2, r3
 800859a:	d0e6      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 800859c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d0e2      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 80085a4:	4b19      	ldr	r3, [pc, #100]	; (800860c <ai_array_to_buffer_fmt+0xcc>)
 80085a6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80085aa:	429a      	cmp	r2, r3
 80085ac:	bf18      	it	ne
 80085ae:	2340      	movne	r3, #64	; 0x40
 80085b0:	4318      	orrs	r0, r3
 80085b2:	4770      	bx	lr
 80085b4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d0d6      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 80085bc:	3307      	adds	r3, #7
 80085be:	429a      	cmp	r2, r3
 80085c0:	d0d3      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 80085c2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80085c6:	429a      	cmp	r2, r3
 80085c8:	bf18      	it	ne
 80085ca:	2340      	movne	r3, #64	; 0x40
 80085cc:	e7ce      	b.n	800856c <ai_array_to_buffer_fmt+0x2c>
 80085ce:	4b10      	ldr	r3, [pc, #64]	; (8008610 <ai_array_to_buffer_fmt+0xd0>)
 80085d0:	429a      	cmp	r2, r3
 80085d2:	bf18      	it	ne
 80085d4:	2340      	movne	r3, #64	; 0x40
 80085d6:	e7c9      	b.n	800856c <ai_array_to_buffer_fmt+0x2c>
 80085d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80085dc:	429a      	cmp	r2, r3
 80085de:	d0c4      	beq.n	800856a <ai_array_to_buffer_fmt+0x2a>
 80085e0:	3380      	adds	r3, #128	; 0x80
 80085e2:	429a      	cmp	r2, r3
 80085e4:	bf18      	it	ne
 80085e6:	2340      	movne	r3, #64	; 0x40
 80085e8:	e7c0      	b.n	800856c <ai_array_to_buffer_fmt+0x2c>
 80085ea:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <ai_array_to_buffer_fmt+0xd4>)
 80085ec:	4003      	ands	r3, r0
 80085ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085f2:	e7bb      	b.n	800856c <ai_array_to_buffer_fmt+0x2c>
 80085f4:	00840040 	.word	0x00840040
 80085f8:	00040840 	.word	0x00040840
 80085fc:	00041040 	.word	0x00041040
 8008600:	00040447 	.word	0x00040447
 8008604:	00840840 	.word	0x00840840
 8008608:	00841040 	.word	0x00841040
 800860c:	0084084f 	.word	0x0084084f
 8008610:	0004084f 	.word	0x0004084f
 8008614:	00803fff 	.word	0x00803fff

08008618 <ai_array_get_byte_size>:
 8008618:	b319      	cbz	r1, 8008662 <ai_array_get_byte_size+0x4a>
 800861a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800861e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008622:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8008626:	11c0      	asrs	r0, r0, #7
 8008628:	fb03 f101 	mul.w	r1, r3, r1
 800862c:	2a04      	cmp	r2, #4
 800862e:	f101 0107 	add.w	r1, r1, #7
 8008632:	f021 0107 	bic.w	r1, r1, #7
 8008636:	fa21 f10c 	lsr.w	r1, r1, ip
 800863a:	d00b      	beq.n	8008654 <ai_array_get_byte_size+0x3c>
 800863c:	2a08      	cmp	r2, #8
 800863e:	d002      	beq.n	8008646 <ai_array_get_byte_size+0x2e>
 8008640:	3107      	adds	r1, #7
 8008642:	08c8      	lsrs	r0, r1, #3
 8008644:	4770      	bx	lr
 8008646:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800864a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800864e:	3107      	adds	r1, #7
 8008650:	08c8      	lsrs	r0, r1, #3
 8008652:	4770      	bx	lr
 8008654:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008658:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800865c:	3107      	adds	r1, #7
 800865e:	08c8      	lsrs	r0, r1, #3
 8008660:	4770      	bx	lr
 8008662:	4608      	mov	r0, r1
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop

08008668 <ai_array_get_data_byte_size>:
 8008668:	b161      	cbz	r1, 8008684 <ai_array_get_data_byte_size+0x1c>
 800866a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800866e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8008672:	fb03 f101 	mul.w	r1, r3, r1
 8008676:	1dc8      	adds	r0, r1, #7
 8008678:	f020 0007 	bic.w	r0, r0, #7
 800867c:	40d0      	lsrs	r0, r2
 800867e:	3007      	adds	r0, #7
 8008680:	08c0      	lsrs	r0, r0, #3
 8008682:	4770      	bx	lr
 8008684:	4608      	mov	r0, r1
 8008686:	4770      	bx	lr

08008688 <__errno>:
 8008688:	4b01      	ldr	r3, [pc, #4]	; (8008690 <__errno+0x8>)
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	240006a4 	.word	0x240006a4

08008694 <__libc_init_array>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4d0d      	ldr	r5, [pc, #52]	; (80086cc <__libc_init_array+0x38>)
 8008698:	4c0d      	ldr	r4, [pc, #52]	; (80086d0 <__libc_init_array+0x3c>)
 800869a:	1b64      	subs	r4, r4, r5
 800869c:	10a4      	asrs	r4, r4, #2
 800869e:	2600      	movs	r6, #0
 80086a0:	42a6      	cmp	r6, r4
 80086a2:	d109      	bne.n	80086b8 <__libc_init_array+0x24>
 80086a4:	4d0b      	ldr	r5, [pc, #44]	; (80086d4 <__libc_init_array+0x40>)
 80086a6:	4c0c      	ldr	r4, [pc, #48]	; (80086d8 <__libc_init_array+0x44>)
 80086a8:	f002 fe9c 	bl	800b3e4 <_init>
 80086ac:	1b64      	subs	r4, r4, r5
 80086ae:	10a4      	asrs	r4, r4, #2
 80086b0:	2600      	movs	r6, #0
 80086b2:	42a6      	cmp	r6, r4
 80086b4:	d105      	bne.n	80086c2 <__libc_init_array+0x2e>
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086bc:	4798      	blx	r3
 80086be:	3601      	adds	r6, #1
 80086c0:	e7ee      	b.n	80086a0 <__libc_init_array+0xc>
 80086c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c6:	4798      	blx	r3
 80086c8:	3601      	adds	r6, #1
 80086ca:	e7f2      	b.n	80086b2 <__libc_init_array+0x1e>
 80086cc:	0800be6c 	.word	0x0800be6c
 80086d0:	0800be6c 	.word	0x0800be6c
 80086d4:	0800be6c 	.word	0x0800be6c
 80086d8:	0800be70 	.word	0x0800be70

080086dc <malloc>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <malloc+0xc>)
 80086de:	4601      	mov	r1, r0
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	f000 b885 	b.w	80087f0 <_malloc_r>
 80086e6:	bf00      	nop
 80086e8:	240006a4 	.word	0x240006a4

080086ec <memcpy>:
 80086ec:	440a      	add	r2, r1
 80086ee:	4291      	cmp	r1, r2
 80086f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086f4:	d100      	bne.n	80086f8 <memcpy+0xc>
 80086f6:	4770      	bx	lr
 80086f8:	b510      	push	{r4, lr}
 80086fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008702:	4291      	cmp	r1, r2
 8008704:	d1f9      	bne.n	80086fa <memcpy+0xe>
 8008706:	bd10      	pop	{r4, pc}

08008708 <memset>:
 8008708:	4402      	add	r2, r0
 800870a:	4603      	mov	r3, r0
 800870c:	4293      	cmp	r3, r2
 800870e:	d100      	bne.n	8008712 <memset+0xa>
 8008710:	4770      	bx	lr
 8008712:	f803 1b01 	strb.w	r1, [r3], #1
 8008716:	e7f9      	b.n	800870c <memset+0x4>

08008718 <_free_r>:
 8008718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800871a:	2900      	cmp	r1, #0
 800871c:	d044      	beq.n	80087a8 <_free_r+0x90>
 800871e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008722:	9001      	str	r0, [sp, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f1a1 0404 	sub.w	r4, r1, #4
 800872a:	bfb8      	it	lt
 800872c:	18e4      	addlt	r4, r4, r3
 800872e:	f001 fb45 	bl	8009dbc <__malloc_lock>
 8008732:	4a1e      	ldr	r2, [pc, #120]	; (80087ac <_free_r+0x94>)
 8008734:	9801      	ldr	r0, [sp, #4]
 8008736:	6813      	ldr	r3, [r2, #0]
 8008738:	b933      	cbnz	r3, 8008748 <_free_r+0x30>
 800873a:	6063      	str	r3, [r4, #4]
 800873c:	6014      	str	r4, [r2, #0]
 800873e:	b003      	add	sp, #12
 8008740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008744:	f001 bb40 	b.w	8009dc8 <__malloc_unlock>
 8008748:	42a3      	cmp	r3, r4
 800874a:	d908      	bls.n	800875e <_free_r+0x46>
 800874c:	6825      	ldr	r5, [r4, #0]
 800874e:	1961      	adds	r1, r4, r5
 8008750:	428b      	cmp	r3, r1
 8008752:	bf01      	itttt	eq
 8008754:	6819      	ldreq	r1, [r3, #0]
 8008756:	685b      	ldreq	r3, [r3, #4]
 8008758:	1949      	addeq	r1, r1, r5
 800875a:	6021      	streq	r1, [r4, #0]
 800875c:	e7ed      	b.n	800873a <_free_r+0x22>
 800875e:	461a      	mov	r2, r3
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	b10b      	cbz	r3, 8008768 <_free_r+0x50>
 8008764:	42a3      	cmp	r3, r4
 8008766:	d9fa      	bls.n	800875e <_free_r+0x46>
 8008768:	6811      	ldr	r1, [r2, #0]
 800876a:	1855      	adds	r5, r2, r1
 800876c:	42a5      	cmp	r5, r4
 800876e:	d10b      	bne.n	8008788 <_free_r+0x70>
 8008770:	6824      	ldr	r4, [r4, #0]
 8008772:	4421      	add	r1, r4
 8008774:	1854      	adds	r4, r2, r1
 8008776:	42a3      	cmp	r3, r4
 8008778:	6011      	str	r1, [r2, #0]
 800877a:	d1e0      	bne.n	800873e <_free_r+0x26>
 800877c:	681c      	ldr	r4, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	6053      	str	r3, [r2, #4]
 8008782:	4421      	add	r1, r4
 8008784:	6011      	str	r1, [r2, #0]
 8008786:	e7da      	b.n	800873e <_free_r+0x26>
 8008788:	d902      	bls.n	8008790 <_free_r+0x78>
 800878a:	230c      	movs	r3, #12
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	e7d6      	b.n	800873e <_free_r+0x26>
 8008790:	6825      	ldr	r5, [r4, #0]
 8008792:	1961      	adds	r1, r4, r5
 8008794:	428b      	cmp	r3, r1
 8008796:	bf04      	itt	eq
 8008798:	6819      	ldreq	r1, [r3, #0]
 800879a:	685b      	ldreq	r3, [r3, #4]
 800879c:	6063      	str	r3, [r4, #4]
 800879e:	bf04      	itt	eq
 80087a0:	1949      	addeq	r1, r1, r5
 80087a2:	6021      	streq	r1, [r4, #0]
 80087a4:	6054      	str	r4, [r2, #4]
 80087a6:	e7ca      	b.n	800873e <_free_r+0x26>
 80087a8:	b003      	add	sp, #12
 80087aa:	bd30      	pop	{r4, r5, pc}
 80087ac:	24000a74 	.word	0x24000a74

080087b0 <sbrk_aligned>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	4e0e      	ldr	r6, [pc, #56]	; (80087ec <sbrk_aligned+0x3c>)
 80087b4:	460c      	mov	r4, r1
 80087b6:	6831      	ldr	r1, [r6, #0]
 80087b8:	4605      	mov	r5, r0
 80087ba:	b911      	cbnz	r1, 80087c2 <sbrk_aligned+0x12>
 80087bc:	f000 fcce 	bl	800915c <_sbrk_r>
 80087c0:	6030      	str	r0, [r6, #0]
 80087c2:	4621      	mov	r1, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 fcc9 	bl	800915c <_sbrk_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d00a      	beq.n	80087e4 <sbrk_aligned+0x34>
 80087ce:	1cc4      	adds	r4, r0, #3
 80087d0:	f024 0403 	bic.w	r4, r4, #3
 80087d4:	42a0      	cmp	r0, r4
 80087d6:	d007      	beq.n	80087e8 <sbrk_aligned+0x38>
 80087d8:	1a21      	subs	r1, r4, r0
 80087da:	4628      	mov	r0, r5
 80087dc:	f000 fcbe 	bl	800915c <_sbrk_r>
 80087e0:	3001      	adds	r0, #1
 80087e2:	d101      	bne.n	80087e8 <sbrk_aligned+0x38>
 80087e4:	f04f 34ff 	mov.w	r4, #4294967295
 80087e8:	4620      	mov	r0, r4
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	24000a78 	.word	0x24000a78

080087f0 <_malloc_r>:
 80087f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f4:	1ccd      	adds	r5, r1, #3
 80087f6:	f025 0503 	bic.w	r5, r5, #3
 80087fa:	3508      	adds	r5, #8
 80087fc:	2d0c      	cmp	r5, #12
 80087fe:	bf38      	it	cc
 8008800:	250c      	movcc	r5, #12
 8008802:	2d00      	cmp	r5, #0
 8008804:	4607      	mov	r7, r0
 8008806:	db01      	blt.n	800880c <_malloc_r+0x1c>
 8008808:	42a9      	cmp	r1, r5
 800880a:	d905      	bls.n	8008818 <_malloc_r+0x28>
 800880c:	230c      	movs	r3, #12
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	2600      	movs	r6, #0
 8008812:	4630      	mov	r0, r6
 8008814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008818:	4e2e      	ldr	r6, [pc, #184]	; (80088d4 <_malloc_r+0xe4>)
 800881a:	f001 facf 	bl	8009dbc <__malloc_lock>
 800881e:	6833      	ldr	r3, [r6, #0]
 8008820:	461c      	mov	r4, r3
 8008822:	bb34      	cbnz	r4, 8008872 <_malloc_r+0x82>
 8008824:	4629      	mov	r1, r5
 8008826:	4638      	mov	r0, r7
 8008828:	f7ff ffc2 	bl	80087b0 <sbrk_aligned>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	4604      	mov	r4, r0
 8008830:	d14d      	bne.n	80088ce <_malloc_r+0xde>
 8008832:	6834      	ldr	r4, [r6, #0]
 8008834:	4626      	mov	r6, r4
 8008836:	2e00      	cmp	r6, #0
 8008838:	d140      	bne.n	80088bc <_malloc_r+0xcc>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	4631      	mov	r1, r6
 800883e:	4638      	mov	r0, r7
 8008840:	eb04 0803 	add.w	r8, r4, r3
 8008844:	f000 fc8a 	bl	800915c <_sbrk_r>
 8008848:	4580      	cmp	r8, r0
 800884a:	d13a      	bne.n	80088c2 <_malloc_r+0xd2>
 800884c:	6821      	ldr	r1, [r4, #0]
 800884e:	3503      	adds	r5, #3
 8008850:	1a6d      	subs	r5, r5, r1
 8008852:	f025 0503 	bic.w	r5, r5, #3
 8008856:	3508      	adds	r5, #8
 8008858:	2d0c      	cmp	r5, #12
 800885a:	bf38      	it	cc
 800885c:	250c      	movcc	r5, #12
 800885e:	4629      	mov	r1, r5
 8008860:	4638      	mov	r0, r7
 8008862:	f7ff ffa5 	bl	80087b0 <sbrk_aligned>
 8008866:	3001      	adds	r0, #1
 8008868:	d02b      	beq.n	80088c2 <_malloc_r+0xd2>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	442b      	add	r3, r5
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	e00e      	b.n	8008890 <_malloc_r+0xa0>
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	1b52      	subs	r2, r2, r5
 8008876:	d41e      	bmi.n	80088b6 <_malloc_r+0xc6>
 8008878:	2a0b      	cmp	r2, #11
 800887a:	d916      	bls.n	80088aa <_malloc_r+0xba>
 800887c:	1961      	adds	r1, r4, r5
 800887e:	42a3      	cmp	r3, r4
 8008880:	6025      	str	r5, [r4, #0]
 8008882:	bf18      	it	ne
 8008884:	6059      	strne	r1, [r3, #4]
 8008886:	6863      	ldr	r3, [r4, #4]
 8008888:	bf08      	it	eq
 800888a:	6031      	streq	r1, [r6, #0]
 800888c:	5162      	str	r2, [r4, r5]
 800888e:	604b      	str	r3, [r1, #4]
 8008890:	4638      	mov	r0, r7
 8008892:	f104 060b 	add.w	r6, r4, #11
 8008896:	f001 fa97 	bl	8009dc8 <__malloc_unlock>
 800889a:	f026 0607 	bic.w	r6, r6, #7
 800889e:	1d23      	adds	r3, r4, #4
 80088a0:	1af2      	subs	r2, r6, r3
 80088a2:	d0b6      	beq.n	8008812 <_malloc_r+0x22>
 80088a4:	1b9b      	subs	r3, r3, r6
 80088a6:	50a3      	str	r3, [r4, r2]
 80088a8:	e7b3      	b.n	8008812 <_malloc_r+0x22>
 80088aa:	6862      	ldr	r2, [r4, #4]
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	bf0c      	ite	eq
 80088b0:	6032      	streq	r2, [r6, #0]
 80088b2:	605a      	strne	r2, [r3, #4]
 80088b4:	e7ec      	b.n	8008890 <_malloc_r+0xa0>
 80088b6:	4623      	mov	r3, r4
 80088b8:	6864      	ldr	r4, [r4, #4]
 80088ba:	e7b2      	b.n	8008822 <_malloc_r+0x32>
 80088bc:	4634      	mov	r4, r6
 80088be:	6876      	ldr	r6, [r6, #4]
 80088c0:	e7b9      	b.n	8008836 <_malloc_r+0x46>
 80088c2:	230c      	movs	r3, #12
 80088c4:	603b      	str	r3, [r7, #0]
 80088c6:	4638      	mov	r0, r7
 80088c8:	f001 fa7e 	bl	8009dc8 <__malloc_unlock>
 80088cc:	e7a1      	b.n	8008812 <_malloc_r+0x22>
 80088ce:	6025      	str	r5, [r4, #0]
 80088d0:	e7de      	b.n	8008890 <_malloc_r+0xa0>
 80088d2:	bf00      	nop
 80088d4:	24000a74 	.word	0x24000a74

080088d8 <__cvt>:
 80088d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088da:	ed2d 8b02 	vpush	{d8}
 80088de:	eeb0 8b40 	vmov.f64	d8, d0
 80088e2:	b085      	sub	sp, #20
 80088e4:	4617      	mov	r7, r2
 80088e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80088e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80088ea:	ee18 2a90 	vmov	r2, s17
 80088ee:	f025 0520 	bic.w	r5, r5, #32
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	bfb6      	itet	lt
 80088f6:	222d      	movlt	r2, #45	; 0x2d
 80088f8:	2200      	movge	r2, #0
 80088fa:	eeb1 8b40 	vneglt.f64	d8, d0
 80088fe:	2d46      	cmp	r5, #70	; 0x46
 8008900:	460c      	mov	r4, r1
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	d004      	beq.n	8008910 <__cvt+0x38>
 8008906:	2d45      	cmp	r5, #69	; 0x45
 8008908:	d100      	bne.n	800890c <__cvt+0x34>
 800890a:	3401      	adds	r4, #1
 800890c:	2102      	movs	r1, #2
 800890e:	e000      	b.n	8008912 <__cvt+0x3a>
 8008910:	2103      	movs	r1, #3
 8008912:	ab03      	add	r3, sp, #12
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	ab02      	add	r3, sp, #8
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	4622      	mov	r2, r4
 800891c:	4633      	mov	r3, r6
 800891e:	eeb0 0b48 	vmov.f64	d0, d8
 8008922:	f000 fcd9 	bl	80092d8 <_dtoa_r>
 8008926:	2d47      	cmp	r5, #71	; 0x47
 8008928:	d101      	bne.n	800892e <__cvt+0x56>
 800892a:	07fb      	lsls	r3, r7, #31
 800892c:	d51a      	bpl.n	8008964 <__cvt+0x8c>
 800892e:	2d46      	cmp	r5, #70	; 0x46
 8008930:	eb00 0204 	add.w	r2, r0, r4
 8008934:	d10c      	bne.n	8008950 <__cvt+0x78>
 8008936:	7803      	ldrb	r3, [r0, #0]
 8008938:	2b30      	cmp	r3, #48	; 0x30
 800893a:	d107      	bne.n	800894c <__cvt+0x74>
 800893c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008944:	bf1c      	itt	ne
 8008946:	f1c4 0401 	rsbne	r4, r4, #1
 800894a:	6034      	strne	r4, [r6, #0]
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	441a      	add	r2, r3
 8008950:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008958:	bf08      	it	eq
 800895a:	9203      	streq	r2, [sp, #12]
 800895c:	2130      	movs	r1, #48	; 0x30
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	4293      	cmp	r3, r2
 8008962:	d307      	bcc.n	8008974 <__cvt+0x9c>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008968:	1a1b      	subs	r3, r3, r0
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	b005      	add	sp, #20
 800896e:	ecbd 8b02 	vpop	{d8}
 8008972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008974:	1c5c      	adds	r4, r3, #1
 8008976:	9403      	str	r4, [sp, #12]
 8008978:	7019      	strb	r1, [r3, #0]
 800897a:	e7f0      	b.n	800895e <__cvt+0x86>

0800897c <__exponent>:
 800897c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800897e:	4603      	mov	r3, r0
 8008980:	2900      	cmp	r1, #0
 8008982:	bfb8      	it	lt
 8008984:	4249      	neglt	r1, r1
 8008986:	f803 2b02 	strb.w	r2, [r3], #2
 800898a:	bfb4      	ite	lt
 800898c:	222d      	movlt	r2, #45	; 0x2d
 800898e:	222b      	movge	r2, #43	; 0x2b
 8008990:	2909      	cmp	r1, #9
 8008992:	7042      	strb	r2, [r0, #1]
 8008994:	dd2a      	ble.n	80089ec <__exponent+0x70>
 8008996:	f10d 0407 	add.w	r4, sp, #7
 800899a:	46a4      	mov	ip, r4
 800899c:	270a      	movs	r7, #10
 800899e:	46a6      	mov	lr, r4
 80089a0:	460a      	mov	r2, r1
 80089a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80089a6:	fb07 1516 	mls	r5, r7, r6, r1
 80089aa:	3530      	adds	r5, #48	; 0x30
 80089ac:	2a63      	cmp	r2, #99	; 0x63
 80089ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80089b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80089b6:	4631      	mov	r1, r6
 80089b8:	dcf1      	bgt.n	800899e <__exponent+0x22>
 80089ba:	3130      	adds	r1, #48	; 0x30
 80089bc:	f1ae 0502 	sub.w	r5, lr, #2
 80089c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80089c4:	1c44      	adds	r4, r0, #1
 80089c6:	4629      	mov	r1, r5
 80089c8:	4561      	cmp	r1, ip
 80089ca:	d30a      	bcc.n	80089e2 <__exponent+0x66>
 80089cc:	f10d 0209 	add.w	r2, sp, #9
 80089d0:	eba2 020e 	sub.w	r2, r2, lr
 80089d4:	4565      	cmp	r5, ip
 80089d6:	bf88      	it	hi
 80089d8:	2200      	movhi	r2, #0
 80089da:	4413      	add	r3, r2
 80089dc:	1a18      	subs	r0, r3, r0
 80089de:	b003      	add	sp, #12
 80089e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089ea:	e7ed      	b.n	80089c8 <__exponent+0x4c>
 80089ec:	2330      	movs	r3, #48	; 0x30
 80089ee:	3130      	adds	r1, #48	; 0x30
 80089f0:	7083      	strb	r3, [r0, #2]
 80089f2:	70c1      	strb	r1, [r0, #3]
 80089f4:	1d03      	adds	r3, r0, #4
 80089f6:	e7f1      	b.n	80089dc <__exponent+0x60>

080089f8 <_printf_float>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	b08b      	sub	sp, #44	; 0x2c
 80089fe:	460c      	mov	r4, r1
 8008a00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008a04:	4616      	mov	r6, r2
 8008a06:	461f      	mov	r7, r3
 8008a08:	4605      	mov	r5, r0
 8008a0a:	f001 f9d3 	bl	8009db4 <_localeconv_r>
 8008a0e:	f8d0 b000 	ldr.w	fp, [r0]
 8008a12:	4658      	mov	r0, fp
 8008a14:	f7f7 fc64 	bl	80002e0 <strlen>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	9308      	str	r3, [sp, #32]
 8008a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008a24:	6822      	ldr	r2, [r4, #0]
 8008a26:	3307      	adds	r3, #7
 8008a28:	f023 0307 	bic.w	r3, r3, #7
 8008a2c:	f103 0108 	add.w	r1, r3, #8
 8008a30:	f8c8 1000 	str.w	r1, [r8]
 8008a34:	4682      	mov	sl, r0
 8008a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a3a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008a3e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008ca0 <_printf_float+0x2a8>
 8008a42:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008a46:	eeb0 6bc0 	vabs.f64	d6, d0
 8008a4a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a52:	dd24      	ble.n	8008a9e <_printf_float+0xa6>
 8008a54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5c:	d502      	bpl.n	8008a64 <_printf_float+0x6c>
 8008a5e:	232d      	movs	r3, #45	; 0x2d
 8008a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a64:	4b90      	ldr	r3, [pc, #576]	; (8008ca8 <_printf_float+0x2b0>)
 8008a66:	4891      	ldr	r0, [pc, #580]	; (8008cac <_printf_float+0x2b4>)
 8008a68:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a6c:	bf94      	ite	ls
 8008a6e:	4698      	movls	r8, r3
 8008a70:	4680      	movhi	r8, r0
 8008a72:	2303      	movs	r3, #3
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	f022 0204 	bic.w	r2, r2, #4
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	6022      	str	r2, [r4, #0]
 8008a7e:	9304      	str	r3, [sp, #16]
 8008a80:	9700      	str	r7, [sp, #0]
 8008a82:	4633      	mov	r3, r6
 8008a84:	aa09      	add	r2, sp, #36	; 0x24
 8008a86:	4621      	mov	r1, r4
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f000 f9d3 	bl	8008e34 <_printf_common>
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f040 808a 	bne.w	8008ba8 <_printf_float+0x1b0>
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295
 8008a98:	b00b      	add	sp, #44	; 0x2c
 8008a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa6:	d709      	bvc.n	8008abc <_printf_float+0xc4>
 8008aa8:	ee10 3a90 	vmov	r3, s1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	bfbc      	itt	lt
 8008ab0:	232d      	movlt	r3, #45	; 0x2d
 8008ab2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ab6:	487e      	ldr	r0, [pc, #504]	; (8008cb0 <_printf_float+0x2b8>)
 8008ab8:	4b7e      	ldr	r3, [pc, #504]	; (8008cb4 <_printf_float+0x2bc>)
 8008aba:	e7d5      	b.n	8008a68 <_printf_float+0x70>
 8008abc:	6863      	ldr	r3, [r4, #4]
 8008abe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008ac2:	9104      	str	r1, [sp, #16]
 8008ac4:	1c59      	adds	r1, r3, #1
 8008ac6:	d13c      	bne.n	8008b42 <_printf_float+0x14a>
 8008ac8:	2306      	movs	r3, #6
 8008aca:	6063      	str	r3, [r4, #4]
 8008acc:	2300      	movs	r3, #0
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	ab08      	add	r3, sp, #32
 8008ad2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008ad6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ada:	ab07      	add	r3, sp, #28
 8008adc:	6861      	ldr	r1, [r4, #4]
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	6022      	str	r2, [r4, #0]
 8008ae2:	f10d 031b 	add.w	r3, sp, #27
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f7ff fef6 	bl	80088d8 <__cvt>
 8008aec:	9b04      	ldr	r3, [sp, #16]
 8008aee:	9907      	ldr	r1, [sp, #28]
 8008af0:	2b47      	cmp	r3, #71	; 0x47
 8008af2:	4680      	mov	r8, r0
 8008af4:	d108      	bne.n	8008b08 <_printf_float+0x110>
 8008af6:	1cc8      	adds	r0, r1, #3
 8008af8:	db02      	blt.n	8008b00 <_printf_float+0x108>
 8008afa:	6863      	ldr	r3, [r4, #4]
 8008afc:	4299      	cmp	r1, r3
 8008afe:	dd41      	ble.n	8008b84 <_printf_float+0x18c>
 8008b00:	f1a9 0902 	sub.w	r9, r9, #2
 8008b04:	fa5f f989 	uxtb.w	r9, r9
 8008b08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b0c:	d820      	bhi.n	8008b50 <_printf_float+0x158>
 8008b0e:	3901      	subs	r1, #1
 8008b10:	464a      	mov	r2, r9
 8008b12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b16:	9107      	str	r1, [sp, #28]
 8008b18:	f7ff ff30 	bl	800897c <__exponent>
 8008b1c:	9a08      	ldr	r2, [sp, #32]
 8008b1e:	9004      	str	r0, [sp, #16]
 8008b20:	1813      	adds	r3, r2, r0
 8008b22:	2a01      	cmp	r2, #1
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	dc02      	bgt.n	8008b2e <_printf_float+0x136>
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	07d2      	lsls	r2, r2, #31
 8008b2c:	d501      	bpl.n	8008b32 <_printf_float+0x13a>
 8008b2e:	3301      	adds	r3, #1
 8008b30:	6123      	str	r3, [r4, #16]
 8008b32:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0a2      	beq.n	8008a80 <_printf_float+0x88>
 8008b3a:	232d      	movs	r3, #45	; 0x2d
 8008b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b40:	e79e      	b.n	8008a80 <_printf_float+0x88>
 8008b42:	9904      	ldr	r1, [sp, #16]
 8008b44:	2947      	cmp	r1, #71	; 0x47
 8008b46:	d1c1      	bne.n	8008acc <_printf_float+0xd4>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1bf      	bne.n	8008acc <_printf_float+0xd4>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e7bc      	b.n	8008aca <_printf_float+0xd2>
 8008b50:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008b54:	d118      	bne.n	8008b88 <_printf_float+0x190>
 8008b56:	2900      	cmp	r1, #0
 8008b58:	6863      	ldr	r3, [r4, #4]
 8008b5a:	dd0b      	ble.n	8008b74 <_printf_float+0x17c>
 8008b5c:	6121      	str	r1, [r4, #16]
 8008b5e:	b913      	cbnz	r3, 8008b66 <_printf_float+0x16e>
 8008b60:	6822      	ldr	r2, [r4, #0]
 8008b62:	07d0      	lsls	r0, r2, #31
 8008b64:	d502      	bpl.n	8008b6c <_printf_float+0x174>
 8008b66:	3301      	adds	r3, #1
 8008b68:	440b      	add	r3, r1
 8008b6a:	6123      	str	r3, [r4, #16]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	e7de      	b.n	8008b32 <_printf_float+0x13a>
 8008b74:	b913      	cbnz	r3, 8008b7c <_printf_float+0x184>
 8008b76:	6822      	ldr	r2, [r4, #0]
 8008b78:	07d2      	lsls	r2, r2, #31
 8008b7a:	d501      	bpl.n	8008b80 <_printf_float+0x188>
 8008b7c:	3302      	adds	r3, #2
 8008b7e:	e7f4      	b.n	8008b6a <_printf_float+0x172>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e7f2      	b.n	8008b6a <_printf_float+0x172>
 8008b84:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b88:	9b08      	ldr	r3, [sp, #32]
 8008b8a:	4299      	cmp	r1, r3
 8008b8c:	db05      	blt.n	8008b9a <_printf_float+0x1a2>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	6121      	str	r1, [r4, #16]
 8008b92:	07d8      	lsls	r0, r3, #31
 8008b94:	d5ea      	bpl.n	8008b6c <_printf_float+0x174>
 8008b96:	1c4b      	adds	r3, r1, #1
 8008b98:	e7e7      	b.n	8008b6a <_printf_float+0x172>
 8008b9a:	2900      	cmp	r1, #0
 8008b9c:	bfd4      	ite	le
 8008b9e:	f1c1 0202 	rsble	r2, r1, #2
 8008ba2:	2201      	movgt	r2, #1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	e7e0      	b.n	8008b6a <_printf_float+0x172>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	055a      	lsls	r2, r3, #21
 8008bac:	d407      	bmi.n	8008bbe <_printf_float+0x1c6>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	47b8      	blx	r7
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d12a      	bne.n	8008c12 <_printf_float+0x21a>
 8008bbc:	e76a      	b.n	8008a94 <_printf_float+0x9c>
 8008bbe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008bc2:	f240 80e2 	bls.w	8008d8a <_printf_float+0x392>
 8008bc6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008bca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd2:	d133      	bne.n	8008c3c <_printf_float+0x244>
 8008bd4:	4a38      	ldr	r2, [pc, #224]	; (8008cb8 <_printf_float+0x2c0>)
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4628      	mov	r0, r5
 8008bdc:	47b8      	blx	r7
 8008bde:	3001      	adds	r0, #1
 8008be0:	f43f af58 	beq.w	8008a94 <_printf_float+0x9c>
 8008be4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	db02      	blt.n	8008bf2 <_printf_float+0x1fa>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	07d8      	lsls	r0, r3, #31
 8008bf0:	d50f      	bpl.n	8008c12 <_printf_float+0x21a>
 8008bf2:	4653      	mov	r3, sl
 8008bf4:	465a      	mov	r2, fp
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	47b8      	blx	r7
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	f43f af49 	beq.w	8008a94 <_printf_float+0x9c>
 8008c02:	f04f 0800 	mov.w	r8, #0
 8008c06:	f104 091a 	add.w	r9, r4, #26
 8008c0a:	9b08      	ldr	r3, [sp, #32]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4543      	cmp	r3, r8
 8008c10:	dc09      	bgt.n	8008c26 <_printf_float+0x22e>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	079b      	lsls	r3, r3, #30
 8008c16:	f100 8108 	bmi.w	8008e2a <_printf_float+0x432>
 8008c1a:	68e0      	ldr	r0, [r4, #12]
 8008c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1e:	4298      	cmp	r0, r3
 8008c20:	bfb8      	it	lt
 8008c22:	4618      	movlt	r0, r3
 8008c24:	e738      	b.n	8008a98 <_printf_float+0xa0>
 8008c26:	2301      	movs	r3, #1
 8008c28:	464a      	mov	r2, r9
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b8      	blx	r7
 8008c30:	3001      	adds	r0, #1
 8008c32:	f43f af2f 	beq.w	8008a94 <_printf_float+0x9c>
 8008c36:	f108 0801 	add.w	r8, r8, #1
 8008c3a:	e7e6      	b.n	8008c0a <_printf_float+0x212>
 8008c3c:	9b07      	ldr	r3, [sp, #28]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dc3c      	bgt.n	8008cbc <_printf_float+0x2c4>
 8008c42:	4a1d      	ldr	r2, [pc, #116]	; (8008cb8 <_printf_float+0x2c0>)
 8008c44:	2301      	movs	r3, #1
 8008c46:	4631      	mov	r1, r6
 8008c48:	4628      	mov	r0, r5
 8008c4a:	47b8      	blx	r7
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	f43f af21 	beq.w	8008a94 <_printf_float+0x9c>
 8008c52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	d102      	bne.n	8008c60 <_printf_float+0x268>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	07d9      	lsls	r1, r3, #31
 8008c5e:	d5d8      	bpl.n	8008c12 <_printf_float+0x21a>
 8008c60:	4653      	mov	r3, sl
 8008c62:	465a      	mov	r2, fp
 8008c64:	4631      	mov	r1, r6
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f af12 	beq.w	8008a94 <_printf_float+0x9c>
 8008c70:	f04f 0900 	mov.w	r9, #0
 8008c74:	f104 0a1a 	add.w	sl, r4, #26
 8008c78:	9b07      	ldr	r3, [sp, #28]
 8008c7a:	425b      	negs	r3, r3
 8008c7c:	454b      	cmp	r3, r9
 8008c7e:	dc01      	bgt.n	8008c84 <_printf_float+0x28c>
 8008c80:	9b08      	ldr	r3, [sp, #32]
 8008c82:	e795      	b.n	8008bb0 <_printf_float+0x1b8>
 8008c84:	2301      	movs	r3, #1
 8008c86:	4652      	mov	r2, sl
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b8      	blx	r7
 8008c8e:	3001      	adds	r0, #1
 8008c90:	f43f af00 	beq.w	8008a94 <_printf_float+0x9c>
 8008c94:	f109 0901 	add.w	r9, r9, #1
 8008c98:	e7ee      	b.n	8008c78 <_printf_float+0x280>
 8008c9a:	bf00      	nop
 8008c9c:	f3af 8000 	nop.w
 8008ca0:	ffffffff 	.word	0xffffffff
 8008ca4:	7fefffff 	.word	0x7fefffff
 8008ca8:	0800ba8c 	.word	0x0800ba8c
 8008cac:	0800ba90 	.word	0x0800ba90
 8008cb0:	0800ba98 	.word	0x0800ba98
 8008cb4:	0800ba94 	.word	0x0800ba94
 8008cb8:	0800ba9c 	.word	0x0800ba9c
 8008cbc:	9a08      	ldr	r2, [sp, #32]
 8008cbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	bfa8      	it	ge
 8008cc4:	461a      	movge	r2, r3
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	4691      	mov	r9, r2
 8008cca:	dc38      	bgt.n	8008d3e <_printf_float+0x346>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd4:	f104 021a 	add.w	r2, r4, #26
 8008cd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cda:	9905      	ldr	r1, [sp, #20]
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	eba3 0309 	sub.w	r3, r3, r9
 8008ce2:	428b      	cmp	r3, r1
 8008ce4:	dc33      	bgt.n	8008d4e <_printf_float+0x356>
 8008ce6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	db3c      	blt.n	8008d68 <_printf_float+0x370>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	07da      	lsls	r2, r3, #31
 8008cf2:	d439      	bmi.n	8008d68 <_printf_float+0x370>
 8008cf4:	9b08      	ldr	r3, [sp, #32]
 8008cf6:	9a04      	ldr	r2, [sp, #16]
 8008cf8:	9907      	ldr	r1, [sp, #28]
 8008cfa:	1a9a      	subs	r2, r3, r2
 8008cfc:	eba3 0901 	sub.w	r9, r3, r1
 8008d00:	4591      	cmp	r9, r2
 8008d02:	bfa8      	it	ge
 8008d04:	4691      	movge	r9, r2
 8008d06:	f1b9 0f00 	cmp.w	r9, #0
 8008d0a:	dc35      	bgt.n	8008d78 <_printf_float+0x380>
 8008d0c:	f04f 0800 	mov.w	r8, #0
 8008d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d14:	f104 0a1a 	add.w	sl, r4, #26
 8008d18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	eba3 0309 	sub.w	r3, r3, r9
 8008d22:	4543      	cmp	r3, r8
 8008d24:	f77f af75 	ble.w	8008c12 <_printf_float+0x21a>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	4652      	mov	r2, sl
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	f43f aeae 	beq.w	8008a94 <_printf_float+0x9c>
 8008d38:	f108 0801 	add.w	r8, r8, #1
 8008d3c:	e7ec      	b.n	8008d18 <_printf_float+0x320>
 8008d3e:	4613      	mov	r3, r2
 8008d40:	4631      	mov	r1, r6
 8008d42:	4642      	mov	r2, r8
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d1bf      	bne.n	8008ccc <_printf_float+0x2d4>
 8008d4c:	e6a2      	b.n	8008a94 <_printf_float+0x9c>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4631      	mov	r1, r6
 8008d52:	4628      	mov	r0, r5
 8008d54:	9204      	str	r2, [sp, #16]
 8008d56:	47b8      	blx	r7
 8008d58:	3001      	adds	r0, #1
 8008d5a:	f43f ae9b 	beq.w	8008a94 <_printf_float+0x9c>
 8008d5e:	9b05      	ldr	r3, [sp, #20]
 8008d60:	9a04      	ldr	r2, [sp, #16]
 8008d62:	3301      	adds	r3, #1
 8008d64:	9305      	str	r3, [sp, #20]
 8008d66:	e7b7      	b.n	8008cd8 <_printf_float+0x2e0>
 8008d68:	4653      	mov	r3, sl
 8008d6a:	465a      	mov	r2, fp
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	d1be      	bne.n	8008cf4 <_printf_float+0x2fc>
 8008d76:	e68d      	b.n	8008a94 <_printf_float+0x9c>
 8008d78:	9a04      	ldr	r2, [sp, #16]
 8008d7a:	464b      	mov	r3, r9
 8008d7c:	4442      	add	r2, r8
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4628      	mov	r0, r5
 8008d82:	47b8      	blx	r7
 8008d84:	3001      	adds	r0, #1
 8008d86:	d1c1      	bne.n	8008d0c <_printf_float+0x314>
 8008d88:	e684      	b.n	8008a94 <_printf_float+0x9c>
 8008d8a:	9a08      	ldr	r2, [sp, #32]
 8008d8c:	2a01      	cmp	r2, #1
 8008d8e:	dc01      	bgt.n	8008d94 <_printf_float+0x39c>
 8008d90:	07db      	lsls	r3, r3, #31
 8008d92:	d537      	bpl.n	8008e04 <_printf_float+0x40c>
 8008d94:	2301      	movs	r3, #1
 8008d96:	4642      	mov	r2, r8
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f ae78 	beq.w	8008a94 <_printf_float+0x9c>
 8008da4:	4653      	mov	r3, sl
 8008da6:	465a      	mov	r2, fp
 8008da8:	4631      	mov	r1, r6
 8008daa:	4628      	mov	r0, r5
 8008dac:	47b8      	blx	r7
 8008dae:	3001      	adds	r0, #1
 8008db0:	f43f ae70 	beq.w	8008a94 <_printf_float+0x9c>
 8008db4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008db8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc0:	d01b      	beq.n	8008dfa <_printf_float+0x402>
 8008dc2:	9b08      	ldr	r3, [sp, #32]
 8008dc4:	f108 0201 	add.w	r2, r8, #1
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d10e      	bne.n	8008df2 <_printf_float+0x3fa>
 8008dd4:	e65e      	b.n	8008a94 <_printf_float+0x9c>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	464a      	mov	r2, r9
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4628      	mov	r0, r5
 8008dde:	47b8      	blx	r7
 8008de0:	3001      	adds	r0, #1
 8008de2:	f43f ae57 	beq.w	8008a94 <_printf_float+0x9c>
 8008de6:	f108 0801 	add.w	r8, r8, #1
 8008dea:	9b08      	ldr	r3, [sp, #32]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	4543      	cmp	r3, r8
 8008df0:	dcf1      	bgt.n	8008dd6 <_printf_float+0x3de>
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008df8:	e6db      	b.n	8008bb2 <_printf_float+0x1ba>
 8008dfa:	f04f 0800 	mov.w	r8, #0
 8008dfe:	f104 091a 	add.w	r9, r4, #26
 8008e02:	e7f2      	b.n	8008dea <_printf_float+0x3f2>
 8008e04:	2301      	movs	r3, #1
 8008e06:	4642      	mov	r2, r8
 8008e08:	e7df      	b.n	8008dca <_printf_float+0x3d2>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	464a      	mov	r2, r9
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4628      	mov	r0, r5
 8008e12:	47b8      	blx	r7
 8008e14:	3001      	adds	r0, #1
 8008e16:	f43f ae3d 	beq.w	8008a94 <_printf_float+0x9c>
 8008e1a:	f108 0801 	add.w	r8, r8, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	4543      	cmp	r3, r8
 8008e26:	dcf0      	bgt.n	8008e0a <_printf_float+0x412>
 8008e28:	e6f7      	b.n	8008c1a <_printf_float+0x222>
 8008e2a:	f04f 0800 	mov.w	r8, #0
 8008e2e:	f104 0919 	add.w	r9, r4, #25
 8008e32:	e7f4      	b.n	8008e1e <_printf_float+0x426>

08008e34 <_printf_common>:
 8008e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	4616      	mov	r6, r2
 8008e3a:	4699      	mov	r9, r3
 8008e3c:	688a      	ldr	r2, [r1, #8]
 8008e3e:	690b      	ldr	r3, [r1, #16]
 8008e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e44:	4293      	cmp	r3, r2
 8008e46:	bfb8      	it	lt
 8008e48:	4613      	movlt	r3, r2
 8008e4a:	6033      	str	r3, [r6, #0]
 8008e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e50:	4607      	mov	r7, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	b10a      	cbz	r2, 8008e5a <_printf_common+0x26>
 8008e56:	3301      	adds	r3, #1
 8008e58:	6033      	str	r3, [r6, #0]
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	0699      	lsls	r1, r3, #26
 8008e5e:	bf42      	ittt	mi
 8008e60:	6833      	ldrmi	r3, [r6, #0]
 8008e62:	3302      	addmi	r3, #2
 8008e64:	6033      	strmi	r3, [r6, #0]
 8008e66:	6825      	ldr	r5, [r4, #0]
 8008e68:	f015 0506 	ands.w	r5, r5, #6
 8008e6c:	d106      	bne.n	8008e7c <_printf_common+0x48>
 8008e6e:	f104 0a19 	add.w	sl, r4, #25
 8008e72:	68e3      	ldr	r3, [r4, #12]
 8008e74:	6832      	ldr	r2, [r6, #0]
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	42ab      	cmp	r3, r5
 8008e7a:	dc26      	bgt.n	8008eca <_printf_common+0x96>
 8008e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e80:	1e13      	subs	r3, r2, #0
 8008e82:	6822      	ldr	r2, [r4, #0]
 8008e84:	bf18      	it	ne
 8008e86:	2301      	movne	r3, #1
 8008e88:	0692      	lsls	r2, r2, #26
 8008e8a:	d42b      	bmi.n	8008ee4 <_printf_common+0xb0>
 8008e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e90:	4649      	mov	r1, r9
 8008e92:	4638      	mov	r0, r7
 8008e94:	47c0      	blx	r8
 8008e96:	3001      	adds	r0, #1
 8008e98:	d01e      	beq.n	8008ed8 <_printf_common+0xa4>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	68e5      	ldr	r5, [r4, #12]
 8008e9e:	6832      	ldr	r2, [r6, #0]
 8008ea0:	f003 0306 	and.w	r3, r3, #6
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	bf08      	it	eq
 8008ea8:	1aad      	subeq	r5, r5, r2
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	6922      	ldr	r2, [r4, #16]
 8008eae:	bf0c      	ite	eq
 8008eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb4:	2500      	movne	r5, #0
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	bfc4      	itt	gt
 8008eba:	1a9b      	subgt	r3, r3, r2
 8008ebc:	18ed      	addgt	r5, r5, r3
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	341a      	adds	r4, #26
 8008ec2:	42b5      	cmp	r5, r6
 8008ec4:	d11a      	bne.n	8008efc <_printf_common+0xc8>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e008      	b.n	8008edc <_printf_common+0xa8>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	4652      	mov	r2, sl
 8008ece:	4649      	mov	r1, r9
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	47c0      	blx	r8
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d103      	bne.n	8008ee0 <_printf_common+0xac>
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	e7c6      	b.n	8008e72 <_printf_common+0x3e>
 8008ee4:	18e1      	adds	r1, r4, r3
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	2030      	movs	r0, #48	; 0x30
 8008eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eee:	4422      	add	r2, r4
 8008ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ef8:	3302      	adds	r3, #2
 8008efa:	e7c7      	b.n	8008e8c <_printf_common+0x58>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4622      	mov	r2, r4
 8008f00:	4649      	mov	r1, r9
 8008f02:	4638      	mov	r0, r7
 8008f04:	47c0      	blx	r8
 8008f06:	3001      	adds	r0, #1
 8008f08:	d0e6      	beq.n	8008ed8 <_printf_common+0xa4>
 8008f0a:	3601      	adds	r6, #1
 8008f0c:	e7d9      	b.n	8008ec2 <_printf_common+0x8e>
	...

08008f10 <_printf_i>:
 8008f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f14:	7e0f      	ldrb	r7, [r1, #24]
 8008f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f18:	2f78      	cmp	r7, #120	; 0x78
 8008f1a:	4691      	mov	r9, r2
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	469a      	mov	sl, r3
 8008f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f26:	d807      	bhi.n	8008f38 <_printf_i+0x28>
 8008f28:	2f62      	cmp	r7, #98	; 0x62
 8008f2a:	d80a      	bhi.n	8008f42 <_printf_i+0x32>
 8008f2c:	2f00      	cmp	r7, #0
 8008f2e:	f000 80d8 	beq.w	80090e2 <_printf_i+0x1d2>
 8008f32:	2f58      	cmp	r7, #88	; 0x58
 8008f34:	f000 80a3 	beq.w	800907e <_printf_i+0x16e>
 8008f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f40:	e03a      	b.n	8008fb8 <_printf_i+0xa8>
 8008f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f46:	2b15      	cmp	r3, #21
 8008f48:	d8f6      	bhi.n	8008f38 <_printf_i+0x28>
 8008f4a:	a101      	add	r1, pc, #4	; (adr r1, 8008f50 <_printf_i+0x40>)
 8008f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f50:	08008fa9 	.word	0x08008fa9
 8008f54:	08008fbd 	.word	0x08008fbd
 8008f58:	08008f39 	.word	0x08008f39
 8008f5c:	08008f39 	.word	0x08008f39
 8008f60:	08008f39 	.word	0x08008f39
 8008f64:	08008f39 	.word	0x08008f39
 8008f68:	08008fbd 	.word	0x08008fbd
 8008f6c:	08008f39 	.word	0x08008f39
 8008f70:	08008f39 	.word	0x08008f39
 8008f74:	08008f39 	.word	0x08008f39
 8008f78:	08008f39 	.word	0x08008f39
 8008f7c:	080090c9 	.word	0x080090c9
 8008f80:	08008fed 	.word	0x08008fed
 8008f84:	080090ab 	.word	0x080090ab
 8008f88:	08008f39 	.word	0x08008f39
 8008f8c:	08008f39 	.word	0x08008f39
 8008f90:	080090eb 	.word	0x080090eb
 8008f94:	08008f39 	.word	0x08008f39
 8008f98:	08008fed 	.word	0x08008fed
 8008f9c:	08008f39 	.word	0x08008f39
 8008fa0:	08008f39 	.word	0x08008f39
 8008fa4:	080090b3 	.word	0x080090b3
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	1d1a      	adds	r2, r3, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	602a      	str	r2, [r5, #0]
 8008fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e0a3      	b.n	8009104 <_printf_i+0x1f4>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	6829      	ldr	r1, [r5, #0]
 8008fc0:	0606      	lsls	r6, r0, #24
 8008fc2:	f101 0304 	add.w	r3, r1, #4
 8008fc6:	d50a      	bpl.n	8008fde <_printf_i+0xce>
 8008fc8:	680e      	ldr	r6, [r1, #0]
 8008fca:	602b      	str	r3, [r5, #0]
 8008fcc:	2e00      	cmp	r6, #0
 8008fce:	da03      	bge.n	8008fd8 <_printf_i+0xc8>
 8008fd0:	232d      	movs	r3, #45	; 0x2d
 8008fd2:	4276      	negs	r6, r6
 8008fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd8:	485e      	ldr	r0, [pc, #376]	; (8009154 <_printf_i+0x244>)
 8008fda:	230a      	movs	r3, #10
 8008fdc:	e019      	b.n	8009012 <_printf_i+0x102>
 8008fde:	680e      	ldr	r6, [r1, #0]
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fe6:	bf18      	it	ne
 8008fe8:	b236      	sxthne	r6, r6
 8008fea:	e7ef      	b.n	8008fcc <_printf_i+0xbc>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	6820      	ldr	r0, [r4, #0]
 8008ff0:	1d19      	adds	r1, r3, #4
 8008ff2:	6029      	str	r1, [r5, #0]
 8008ff4:	0601      	lsls	r1, r0, #24
 8008ff6:	d501      	bpl.n	8008ffc <_printf_i+0xec>
 8008ff8:	681e      	ldr	r6, [r3, #0]
 8008ffa:	e002      	b.n	8009002 <_printf_i+0xf2>
 8008ffc:	0646      	lsls	r6, r0, #25
 8008ffe:	d5fb      	bpl.n	8008ff8 <_printf_i+0xe8>
 8009000:	881e      	ldrh	r6, [r3, #0]
 8009002:	4854      	ldr	r0, [pc, #336]	; (8009154 <_printf_i+0x244>)
 8009004:	2f6f      	cmp	r7, #111	; 0x6f
 8009006:	bf0c      	ite	eq
 8009008:	2308      	moveq	r3, #8
 800900a:	230a      	movne	r3, #10
 800900c:	2100      	movs	r1, #0
 800900e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009012:	6865      	ldr	r5, [r4, #4]
 8009014:	60a5      	str	r5, [r4, #8]
 8009016:	2d00      	cmp	r5, #0
 8009018:	bfa2      	ittt	ge
 800901a:	6821      	ldrge	r1, [r4, #0]
 800901c:	f021 0104 	bicge.w	r1, r1, #4
 8009020:	6021      	strge	r1, [r4, #0]
 8009022:	b90e      	cbnz	r6, 8009028 <_printf_i+0x118>
 8009024:	2d00      	cmp	r5, #0
 8009026:	d04d      	beq.n	80090c4 <_printf_i+0x1b4>
 8009028:	4615      	mov	r5, r2
 800902a:	fbb6 f1f3 	udiv	r1, r6, r3
 800902e:	fb03 6711 	mls	r7, r3, r1, r6
 8009032:	5dc7      	ldrb	r7, [r0, r7]
 8009034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009038:	4637      	mov	r7, r6
 800903a:	42bb      	cmp	r3, r7
 800903c:	460e      	mov	r6, r1
 800903e:	d9f4      	bls.n	800902a <_printf_i+0x11a>
 8009040:	2b08      	cmp	r3, #8
 8009042:	d10b      	bne.n	800905c <_printf_i+0x14c>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	07de      	lsls	r6, r3, #31
 8009048:	d508      	bpl.n	800905c <_printf_i+0x14c>
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	6861      	ldr	r1, [r4, #4]
 800904e:	4299      	cmp	r1, r3
 8009050:	bfde      	ittt	le
 8009052:	2330      	movle	r3, #48	; 0x30
 8009054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009058:	f105 35ff 	addle.w	r5, r5, #4294967295
 800905c:	1b52      	subs	r2, r2, r5
 800905e:	6122      	str	r2, [r4, #16]
 8009060:	f8cd a000 	str.w	sl, [sp]
 8009064:	464b      	mov	r3, r9
 8009066:	aa03      	add	r2, sp, #12
 8009068:	4621      	mov	r1, r4
 800906a:	4640      	mov	r0, r8
 800906c:	f7ff fee2 	bl	8008e34 <_printf_common>
 8009070:	3001      	adds	r0, #1
 8009072:	d14c      	bne.n	800910e <_printf_i+0x1fe>
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	b004      	add	sp, #16
 800907a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907e:	4835      	ldr	r0, [pc, #212]	; (8009154 <_printf_i+0x244>)
 8009080:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009084:	6829      	ldr	r1, [r5, #0]
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	f851 6b04 	ldr.w	r6, [r1], #4
 800908c:	6029      	str	r1, [r5, #0]
 800908e:	061d      	lsls	r5, r3, #24
 8009090:	d514      	bpl.n	80090bc <_printf_i+0x1ac>
 8009092:	07df      	lsls	r7, r3, #31
 8009094:	bf44      	itt	mi
 8009096:	f043 0320 	orrmi.w	r3, r3, #32
 800909a:	6023      	strmi	r3, [r4, #0]
 800909c:	b91e      	cbnz	r6, 80090a6 <_printf_i+0x196>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	f023 0320 	bic.w	r3, r3, #32
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	2310      	movs	r3, #16
 80090a8:	e7b0      	b.n	800900c <_printf_i+0xfc>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	f043 0320 	orr.w	r3, r3, #32
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	2378      	movs	r3, #120	; 0x78
 80090b4:	4828      	ldr	r0, [pc, #160]	; (8009158 <_printf_i+0x248>)
 80090b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ba:	e7e3      	b.n	8009084 <_printf_i+0x174>
 80090bc:	0659      	lsls	r1, r3, #25
 80090be:	bf48      	it	mi
 80090c0:	b2b6      	uxthmi	r6, r6
 80090c2:	e7e6      	b.n	8009092 <_printf_i+0x182>
 80090c4:	4615      	mov	r5, r2
 80090c6:	e7bb      	b.n	8009040 <_printf_i+0x130>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	6826      	ldr	r6, [r4, #0]
 80090cc:	6961      	ldr	r1, [r4, #20]
 80090ce:	1d18      	adds	r0, r3, #4
 80090d0:	6028      	str	r0, [r5, #0]
 80090d2:	0635      	lsls	r5, r6, #24
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	d501      	bpl.n	80090dc <_printf_i+0x1cc>
 80090d8:	6019      	str	r1, [r3, #0]
 80090da:	e002      	b.n	80090e2 <_printf_i+0x1d2>
 80090dc:	0670      	lsls	r0, r6, #25
 80090de:	d5fb      	bpl.n	80090d8 <_printf_i+0x1c8>
 80090e0:	8019      	strh	r1, [r3, #0]
 80090e2:	2300      	movs	r3, #0
 80090e4:	6123      	str	r3, [r4, #16]
 80090e6:	4615      	mov	r5, r2
 80090e8:	e7ba      	b.n	8009060 <_printf_i+0x150>
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	1d1a      	adds	r2, r3, #4
 80090ee:	602a      	str	r2, [r5, #0]
 80090f0:	681d      	ldr	r5, [r3, #0]
 80090f2:	6862      	ldr	r2, [r4, #4]
 80090f4:	2100      	movs	r1, #0
 80090f6:	4628      	mov	r0, r5
 80090f8:	f7f7 f8fa 	bl	80002f0 <memchr>
 80090fc:	b108      	cbz	r0, 8009102 <_printf_i+0x1f2>
 80090fe:	1b40      	subs	r0, r0, r5
 8009100:	6060      	str	r0, [r4, #4]
 8009102:	6863      	ldr	r3, [r4, #4]
 8009104:	6123      	str	r3, [r4, #16]
 8009106:	2300      	movs	r3, #0
 8009108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800910c:	e7a8      	b.n	8009060 <_printf_i+0x150>
 800910e:	6923      	ldr	r3, [r4, #16]
 8009110:	462a      	mov	r2, r5
 8009112:	4649      	mov	r1, r9
 8009114:	4640      	mov	r0, r8
 8009116:	47d0      	blx	sl
 8009118:	3001      	adds	r0, #1
 800911a:	d0ab      	beq.n	8009074 <_printf_i+0x164>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	079b      	lsls	r3, r3, #30
 8009120:	d413      	bmi.n	800914a <_printf_i+0x23a>
 8009122:	68e0      	ldr	r0, [r4, #12]
 8009124:	9b03      	ldr	r3, [sp, #12]
 8009126:	4298      	cmp	r0, r3
 8009128:	bfb8      	it	lt
 800912a:	4618      	movlt	r0, r3
 800912c:	e7a4      	b.n	8009078 <_printf_i+0x168>
 800912e:	2301      	movs	r3, #1
 8009130:	4632      	mov	r2, r6
 8009132:	4649      	mov	r1, r9
 8009134:	4640      	mov	r0, r8
 8009136:	47d0      	blx	sl
 8009138:	3001      	adds	r0, #1
 800913a:	d09b      	beq.n	8009074 <_printf_i+0x164>
 800913c:	3501      	adds	r5, #1
 800913e:	68e3      	ldr	r3, [r4, #12]
 8009140:	9903      	ldr	r1, [sp, #12]
 8009142:	1a5b      	subs	r3, r3, r1
 8009144:	42ab      	cmp	r3, r5
 8009146:	dcf2      	bgt.n	800912e <_printf_i+0x21e>
 8009148:	e7eb      	b.n	8009122 <_printf_i+0x212>
 800914a:	2500      	movs	r5, #0
 800914c:	f104 0619 	add.w	r6, r4, #25
 8009150:	e7f5      	b.n	800913e <_printf_i+0x22e>
 8009152:	bf00      	nop
 8009154:	0800ba9e 	.word	0x0800ba9e
 8009158:	0800baaf 	.word	0x0800baaf

0800915c <_sbrk_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d06      	ldr	r5, [pc, #24]	; (8009178 <_sbrk_r+0x1c>)
 8009160:	2300      	movs	r3, #0
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	f7f7 ffe6 	bl	8001138 <_sbrk>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_sbrk_r+0x1a>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_sbrk_r+0x1a>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	24000a7c 	.word	0x24000a7c

0800917c <siprintf>:
 800917c:	b40e      	push	{r1, r2, r3}
 800917e:	b500      	push	{lr}
 8009180:	b09c      	sub	sp, #112	; 0x70
 8009182:	ab1d      	add	r3, sp, #116	; 0x74
 8009184:	9002      	str	r0, [sp, #8]
 8009186:	9006      	str	r0, [sp, #24]
 8009188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800918c:	4809      	ldr	r0, [pc, #36]	; (80091b4 <siprintf+0x38>)
 800918e:	9107      	str	r1, [sp, #28]
 8009190:	9104      	str	r1, [sp, #16]
 8009192:	4909      	ldr	r1, [pc, #36]	; (80091b8 <siprintf+0x3c>)
 8009194:	f853 2b04 	ldr.w	r2, [r3], #4
 8009198:	9105      	str	r1, [sp, #20]
 800919a:	6800      	ldr	r0, [r0, #0]
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	a902      	add	r1, sp, #8
 80091a0:	f001 fa3c 	bl	800a61c <_svfiprintf_r>
 80091a4:	9b02      	ldr	r3, [sp, #8]
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	b01c      	add	sp, #112	; 0x70
 80091ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b0:	b003      	add	sp, #12
 80091b2:	4770      	bx	lr
 80091b4:	240006a4 	.word	0x240006a4
 80091b8:	ffff0208 	.word	0xffff0208

080091bc <quorem>:
 80091bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	6903      	ldr	r3, [r0, #16]
 80091c2:	690c      	ldr	r4, [r1, #16]
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	4607      	mov	r7, r0
 80091c8:	f2c0 8081 	blt.w	80092ce <quorem+0x112>
 80091cc:	3c01      	subs	r4, #1
 80091ce:	f101 0814 	add.w	r8, r1, #20
 80091d2:	f100 0514 	add.w	r5, r0, #20
 80091d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091e4:	3301      	adds	r3, #1
 80091e6:	429a      	cmp	r2, r3
 80091e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80091f4:	d331      	bcc.n	800925a <quorem+0x9e>
 80091f6:	f04f 0e00 	mov.w	lr, #0
 80091fa:	4640      	mov	r0, r8
 80091fc:	46ac      	mov	ip, r5
 80091fe:	46f2      	mov	sl, lr
 8009200:	f850 2b04 	ldr.w	r2, [r0], #4
 8009204:	b293      	uxth	r3, r2
 8009206:	fb06 e303 	mla	r3, r6, r3, lr
 800920a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800920e:	b29b      	uxth	r3, r3
 8009210:	ebaa 0303 	sub.w	r3, sl, r3
 8009214:	f8dc a000 	ldr.w	sl, [ip]
 8009218:	0c12      	lsrs	r2, r2, #16
 800921a:	fa13 f38a 	uxtah	r3, r3, sl
 800921e:	fb06 e202 	mla	r2, r6, r2, lr
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	9b00      	ldr	r3, [sp, #0]
 8009226:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800922a:	b292      	uxth	r2, r2
 800922c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009234:	f8bd 3000 	ldrh.w	r3, [sp]
 8009238:	4581      	cmp	r9, r0
 800923a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800923e:	f84c 3b04 	str.w	r3, [ip], #4
 8009242:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009246:	d2db      	bcs.n	8009200 <quorem+0x44>
 8009248:	f855 300b 	ldr.w	r3, [r5, fp]
 800924c:	b92b      	cbnz	r3, 800925a <quorem+0x9e>
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	3b04      	subs	r3, #4
 8009252:	429d      	cmp	r5, r3
 8009254:	461a      	mov	r2, r3
 8009256:	d32e      	bcc.n	80092b6 <quorem+0xfa>
 8009258:	613c      	str	r4, [r7, #16]
 800925a:	4638      	mov	r0, r7
 800925c:	f001 f83c 	bl	800a2d8 <__mcmp>
 8009260:	2800      	cmp	r0, #0
 8009262:	db24      	blt.n	80092ae <quorem+0xf2>
 8009264:	3601      	adds	r6, #1
 8009266:	4628      	mov	r0, r5
 8009268:	f04f 0c00 	mov.w	ip, #0
 800926c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009270:	f8d0 e000 	ldr.w	lr, [r0]
 8009274:	b293      	uxth	r3, r2
 8009276:	ebac 0303 	sub.w	r3, ip, r3
 800927a:	0c12      	lsrs	r2, r2, #16
 800927c:	fa13 f38e 	uxtah	r3, r3, lr
 8009280:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009288:	b29b      	uxth	r3, r3
 800928a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800928e:	45c1      	cmp	r9, r8
 8009290:	f840 3b04 	str.w	r3, [r0], #4
 8009294:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009298:	d2e8      	bcs.n	800926c <quorem+0xb0>
 800929a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800929e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092a2:	b922      	cbnz	r2, 80092ae <quorem+0xf2>
 80092a4:	3b04      	subs	r3, #4
 80092a6:	429d      	cmp	r5, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	d30a      	bcc.n	80092c2 <quorem+0x106>
 80092ac:	613c      	str	r4, [r7, #16]
 80092ae:	4630      	mov	r0, r6
 80092b0:	b003      	add	sp, #12
 80092b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b6:	6812      	ldr	r2, [r2, #0]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	d1cc      	bne.n	8009258 <quorem+0x9c>
 80092be:	3c01      	subs	r4, #1
 80092c0:	e7c7      	b.n	8009252 <quorem+0x96>
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	3b04      	subs	r3, #4
 80092c6:	2a00      	cmp	r2, #0
 80092c8:	d1f0      	bne.n	80092ac <quorem+0xf0>
 80092ca:	3c01      	subs	r4, #1
 80092cc:	e7eb      	b.n	80092a6 <quorem+0xea>
 80092ce:	2000      	movs	r0, #0
 80092d0:	e7ee      	b.n	80092b0 <quorem+0xf4>
 80092d2:	0000      	movs	r0, r0
 80092d4:	0000      	movs	r0, r0
	...

080092d8 <_dtoa_r>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	ed2d 8b02 	vpush	{d8}
 80092e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092e2:	b091      	sub	sp, #68	; 0x44
 80092e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80092e8:	ec59 8b10 	vmov	r8, r9, d0
 80092ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80092ee:	9106      	str	r1, [sp, #24]
 80092f0:	4606      	mov	r6, r0
 80092f2:	9208      	str	r2, [sp, #32]
 80092f4:	930c      	str	r3, [sp, #48]	; 0x30
 80092f6:	b975      	cbnz	r5, 8009316 <_dtoa_r+0x3e>
 80092f8:	2010      	movs	r0, #16
 80092fa:	f7ff f9ef 	bl	80086dc <malloc>
 80092fe:	4602      	mov	r2, r0
 8009300:	6270      	str	r0, [r6, #36]	; 0x24
 8009302:	b920      	cbnz	r0, 800930e <_dtoa_r+0x36>
 8009304:	4baa      	ldr	r3, [pc, #680]	; (80095b0 <_dtoa_r+0x2d8>)
 8009306:	21ea      	movs	r1, #234	; 0xea
 8009308:	48aa      	ldr	r0, [pc, #680]	; (80095b4 <_dtoa_r+0x2dc>)
 800930a:	f001 fa87 	bl	800a81c <__assert_func>
 800930e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009312:	6005      	str	r5, [r0, #0]
 8009314:	60c5      	str	r5, [r0, #12]
 8009316:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009318:	6819      	ldr	r1, [r3, #0]
 800931a:	b151      	cbz	r1, 8009332 <_dtoa_r+0x5a>
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	604a      	str	r2, [r1, #4]
 8009320:	2301      	movs	r3, #1
 8009322:	4093      	lsls	r3, r2
 8009324:	608b      	str	r3, [r1, #8]
 8009326:	4630      	mov	r0, r6
 8009328:	f000 fd94 	bl	8009e54 <_Bfree>
 800932c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	f1b9 0300 	subs.w	r3, r9, #0
 8009336:	bfbb      	ittet	lt
 8009338:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800933c:	9303      	strlt	r3, [sp, #12]
 800933e:	2300      	movge	r3, #0
 8009340:	2201      	movlt	r2, #1
 8009342:	bfac      	ite	ge
 8009344:	6023      	strge	r3, [r4, #0]
 8009346:	6022      	strlt	r2, [r4, #0]
 8009348:	4b9b      	ldr	r3, [pc, #620]	; (80095b8 <_dtoa_r+0x2e0>)
 800934a:	9c03      	ldr	r4, [sp, #12]
 800934c:	43a3      	bics	r3, r4
 800934e:	d11c      	bne.n	800938a <_dtoa_r+0xb2>
 8009350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009352:	f242 730f 	movw	r3, #9999	; 0x270f
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800935c:	ea53 0308 	orrs.w	r3, r3, r8
 8009360:	f000 84fd 	beq.w	8009d5e <_dtoa_r+0xa86>
 8009364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009366:	b963      	cbnz	r3, 8009382 <_dtoa_r+0xaa>
 8009368:	4b94      	ldr	r3, [pc, #592]	; (80095bc <_dtoa_r+0x2e4>)
 800936a:	e01f      	b.n	80093ac <_dtoa_r+0xd4>
 800936c:	4b94      	ldr	r3, [pc, #592]	; (80095c0 <_dtoa_r+0x2e8>)
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	3308      	adds	r3, #8
 8009372:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009374:	6013      	str	r3, [r2, #0]
 8009376:	9801      	ldr	r0, [sp, #4]
 8009378:	b011      	add	sp, #68	; 0x44
 800937a:	ecbd 8b02 	vpop	{d8}
 800937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009382:	4b8e      	ldr	r3, [pc, #568]	; (80095bc <_dtoa_r+0x2e4>)
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	3303      	adds	r3, #3
 8009388:	e7f3      	b.n	8009372 <_dtoa_r+0x9a>
 800938a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800938e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009396:	d10b      	bne.n	80093b0 <_dtoa_r+0xd8>
 8009398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800939a:	2301      	movs	r3, #1
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 84d9 	beq.w	8009d58 <_dtoa_r+0xa80>
 80093a6:	4887      	ldr	r0, [pc, #540]	; (80095c4 <_dtoa_r+0x2ec>)
 80093a8:	6018      	str	r0, [r3, #0]
 80093aa:	1e43      	subs	r3, r0, #1
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	e7e2      	b.n	8009376 <_dtoa_r+0x9e>
 80093b0:	a90f      	add	r1, sp, #60	; 0x3c
 80093b2:	aa0e      	add	r2, sp, #56	; 0x38
 80093b4:	4630      	mov	r0, r6
 80093b6:	eeb0 0b48 	vmov.f64	d0, d8
 80093ba:	f001 f833 	bl	800a424 <__d2b>
 80093be:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80093c2:	4605      	mov	r5, r0
 80093c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80093c6:	2900      	cmp	r1, #0
 80093c8:	d046      	beq.n	8009458 <_dtoa_r+0x180>
 80093ca:	ee18 4a90 	vmov	r4, s17
 80093ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80093d2:	ec53 2b18 	vmov	r2, r3, d8
 80093d6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80093da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80093e2:	2400      	movs	r4, #0
 80093e4:	ec43 2b16 	vmov	d6, r2, r3
 80093e8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80093ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009598 <_dtoa_r+0x2c0>
 80093f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80093f4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80095a0 <_dtoa_r+0x2c8>
 80093f8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80093fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80095a8 <_dtoa_r+0x2d0>
 8009400:	ee07 1a90 	vmov	s15, r1
 8009404:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009408:	eeb0 7b46 	vmov.f64	d7, d6
 800940c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009410:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009414:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941c:	ee16 ba90 	vmov	fp, s13
 8009420:	940a      	str	r4, [sp, #40]	; 0x28
 8009422:	d508      	bpl.n	8009436 <_dtoa_r+0x15e>
 8009424:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009428:	eeb4 6b47 	vcmp.f64	d6, d7
 800942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009430:	bf18      	it	ne
 8009432:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009436:	f1bb 0f16 	cmp.w	fp, #22
 800943a:	d82f      	bhi.n	800949c <_dtoa_r+0x1c4>
 800943c:	4b62      	ldr	r3, [pc, #392]	; (80095c8 <_dtoa_r+0x2f0>)
 800943e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009442:	ed93 7b00 	vldr	d7, [r3]
 8009446:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800944a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944e:	d501      	bpl.n	8009454 <_dtoa_r+0x17c>
 8009450:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009454:	2300      	movs	r3, #0
 8009456:	e022      	b.n	800949e <_dtoa_r+0x1c6>
 8009458:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800945a:	4401      	add	r1, r0
 800945c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009460:	2b20      	cmp	r3, #32
 8009462:	bfc1      	itttt	gt
 8009464:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009468:	fa04 f303 	lslgt.w	r3, r4, r3
 800946c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009470:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009474:	bfd6      	itet	le
 8009476:	f1c3 0320 	rsble	r3, r3, #32
 800947a:	ea43 0808 	orrgt.w	r8, r3, r8
 800947e:	fa08 f803 	lslle.w	r8, r8, r3
 8009482:	ee07 8a90 	vmov	s15, r8
 8009486:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800948a:	3901      	subs	r1, #1
 800948c:	ee17 4a90 	vmov	r4, s15
 8009490:	ec53 2b17 	vmov	r2, r3, d7
 8009494:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009498:	2401      	movs	r4, #1
 800949a:	e7a3      	b.n	80093e4 <_dtoa_r+0x10c>
 800949c:	2301      	movs	r3, #1
 800949e:	930b      	str	r3, [sp, #44]	; 0x2c
 80094a0:	1a43      	subs	r3, r0, r1
 80094a2:	1e5a      	subs	r2, r3, #1
 80094a4:	bf45      	ittet	mi
 80094a6:	f1c3 0301 	rsbmi	r3, r3, #1
 80094aa:	9304      	strmi	r3, [sp, #16]
 80094ac:	2300      	movpl	r3, #0
 80094ae:	2300      	movmi	r3, #0
 80094b0:	9205      	str	r2, [sp, #20]
 80094b2:	bf54      	ite	pl
 80094b4:	9304      	strpl	r3, [sp, #16]
 80094b6:	9305      	strmi	r3, [sp, #20]
 80094b8:	f1bb 0f00 	cmp.w	fp, #0
 80094bc:	db18      	blt.n	80094f0 <_dtoa_r+0x218>
 80094be:	9b05      	ldr	r3, [sp, #20]
 80094c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80094c4:	445b      	add	r3, fp
 80094c6:	9305      	str	r3, [sp, #20]
 80094c8:	2300      	movs	r3, #0
 80094ca:	9a06      	ldr	r2, [sp, #24]
 80094cc:	2a09      	cmp	r2, #9
 80094ce:	d849      	bhi.n	8009564 <_dtoa_r+0x28c>
 80094d0:	2a05      	cmp	r2, #5
 80094d2:	bfc4      	itt	gt
 80094d4:	3a04      	subgt	r2, #4
 80094d6:	9206      	strgt	r2, [sp, #24]
 80094d8:	9a06      	ldr	r2, [sp, #24]
 80094da:	f1a2 0202 	sub.w	r2, r2, #2
 80094de:	bfcc      	ite	gt
 80094e0:	2400      	movgt	r4, #0
 80094e2:	2401      	movle	r4, #1
 80094e4:	2a03      	cmp	r2, #3
 80094e6:	d848      	bhi.n	800957a <_dtoa_r+0x2a2>
 80094e8:	e8df f002 	tbb	[pc, r2]
 80094ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80094f0:	9b04      	ldr	r3, [sp, #16]
 80094f2:	2200      	movs	r2, #0
 80094f4:	eba3 030b 	sub.w	r3, r3, fp
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	9209      	str	r2, [sp, #36]	; 0x24
 80094fc:	f1cb 0300 	rsb	r3, fp, #0
 8009500:	e7e3      	b.n	80094ca <_dtoa_r+0x1f2>
 8009502:	2200      	movs	r2, #0
 8009504:	9207      	str	r2, [sp, #28]
 8009506:	9a08      	ldr	r2, [sp, #32]
 8009508:	2a00      	cmp	r2, #0
 800950a:	dc39      	bgt.n	8009580 <_dtoa_r+0x2a8>
 800950c:	f04f 0a01 	mov.w	sl, #1
 8009510:	46d1      	mov	r9, sl
 8009512:	4652      	mov	r2, sl
 8009514:	f8cd a020 	str.w	sl, [sp, #32]
 8009518:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800951a:	2100      	movs	r1, #0
 800951c:	6079      	str	r1, [r7, #4]
 800951e:	2004      	movs	r0, #4
 8009520:	f100 0c14 	add.w	ip, r0, #20
 8009524:	4594      	cmp	ip, r2
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	d92f      	bls.n	800958a <_dtoa_r+0x2b2>
 800952a:	4630      	mov	r0, r6
 800952c:	930d      	str	r3, [sp, #52]	; 0x34
 800952e:	f000 fc51 	bl	8009dd4 <_Balloc>
 8009532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009534:	9001      	str	r0, [sp, #4]
 8009536:	4602      	mov	r2, r0
 8009538:	2800      	cmp	r0, #0
 800953a:	d149      	bne.n	80095d0 <_dtoa_r+0x2f8>
 800953c:	4b23      	ldr	r3, [pc, #140]	; (80095cc <_dtoa_r+0x2f4>)
 800953e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009542:	e6e1      	b.n	8009308 <_dtoa_r+0x30>
 8009544:	2201      	movs	r2, #1
 8009546:	e7dd      	b.n	8009504 <_dtoa_r+0x22c>
 8009548:	2200      	movs	r2, #0
 800954a:	9207      	str	r2, [sp, #28]
 800954c:	9a08      	ldr	r2, [sp, #32]
 800954e:	eb0b 0a02 	add.w	sl, fp, r2
 8009552:	f10a 0901 	add.w	r9, sl, #1
 8009556:	464a      	mov	r2, r9
 8009558:	2a01      	cmp	r2, #1
 800955a:	bfb8      	it	lt
 800955c:	2201      	movlt	r2, #1
 800955e:	e7db      	b.n	8009518 <_dtoa_r+0x240>
 8009560:	2201      	movs	r2, #1
 8009562:	e7f2      	b.n	800954a <_dtoa_r+0x272>
 8009564:	2401      	movs	r4, #1
 8009566:	2200      	movs	r2, #0
 8009568:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800956c:	f04f 3aff 	mov.w	sl, #4294967295
 8009570:	2100      	movs	r1, #0
 8009572:	46d1      	mov	r9, sl
 8009574:	2212      	movs	r2, #18
 8009576:	9108      	str	r1, [sp, #32]
 8009578:	e7ce      	b.n	8009518 <_dtoa_r+0x240>
 800957a:	2201      	movs	r2, #1
 800957c:	9207      	str	r2, [sp, #28]
 800957e:	e7f5      	b.n	800956c <_dtoa_r+0x294>
 8009580:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009584:	46d1      	mov	r9, sl
 8009586:	4652      	mov	r2, sl
 8009588:	e7c6      	b.n	8009518 <_dtoa_r+0x240>
 800958a:	3101      	adds	r1, #1
 800958c:	6079      	str	r1, [r7, #4]
 800958e:	0040      	lsls	r0, r0, #1
 8009590:	e7c6      	b.n	8009520 <_dtoa_r+0x248>
 8009592:	bf00      	nop
 8009594:	f3af 8000 	nop.w
 8009598:	636f4361 	.word	0x636f4361
 800959c:	3fd287a7 	.word	0x3fd287a7
 80095a0:	8b60c8b3 	.word	0x8b60c8b3
 80095a4:	3fc68a28 	.word	0x3fc68a28
 80095a8:	509f79fb 	.word	0x509f79fb
 80095ac:	3fd34413 	.word	0x3fd34413
 80095b0:	0800bacd 	.word	0x0800bacd
 80095b4:	0800bae4 	.word	0x0800bae4
 80095b8:	7ff00000 	.word	0x7ff00000
 80095bc:	0800bac9 	.word	0x0800bac9
 80095c0:	0800bac0 	.word	0x0800bac0
 80095c4:	0800ba9d 	.word	0x0800ba9d
 80095c8:	0800bbd8 	.word	0x0800bbd8
 80095cc:	0800bb3f 	.word	0x0800bb3f
 80095d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80095d2:	9901      	ldr	r1, [sp, #4]
 80095d4:	6011      	str	r1, [r2, #0]
 80095d6:	f1b9 0f0e 	cmp.w	r9, #14
 80095da:	d86c      	bhi.n	80096b6 <_dtoa_r+0x3de>
 80095dc:	2c00      	cmp	r4, #0
 80095de:	d06a      	beq.n	80096b6 <_dtoa_r+0x3de>
 80095e0:	f1bb 0f00 	cmp.w	fp, #0
 80095e4:	f340 80a0 	ble.w	8009728 <_dtoa_r+0x450>
 80095e8:	49c1      	ldr	r1, [pc, #772]	; (80098f0 <_dtoa_r+0x618>)
 80095ea:	f00b 020f 	and.w	r2, fp, #15
 80095ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80095f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80095f6:	ed92 7b00 	vldr	d7, [r2]
 80095fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80095fe:	f000 8087 	beq.w	8009710 <_dtoa_r+0x438>
 8009602:	4abc      	ldr	r2, [pc, #752]	; (80098f4 <_dtoa_r+0x61c>)
 8009604:	ed92 6b08 	vldr	d6, [r2, #32]
 8009608:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800960c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009610:	f001 010f 	and.w	r1, r1, #15
 8009614:	2203      	movs	r2, #3
 8009616:	48b7      	ldr	r0, [pc, #732]	; (80098f4 <_dtoa_r+0x61c>)
 8009618:	2900      	cmp	r1, #0
 800961a:	d17b      	bne.n	8009714 <_dtoa_r+0x43c>
 800961c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009620:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009624:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800962a:	2900      	cmp	r1, #0
 800962c:	f000 80a2 	beq.w	8009774 <_dtoa_r+0x49c>
 8009630:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009634:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009638:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009640:	f140 8098 	bpl.w	8009774 <_dtoa_r+0x49c>
 8009644:	f1b9 0f00 	cmp.w	r9, #0
 8009648:	f000 8094 	beq.w	8009774 <_dtoa_r+0x49c>
 800964c:	f1ba 0f00 	cmp.w	sl, #0
 8009650:	dd2f      	ble.n	80096b2 <_dtoa_r+0x3da>
 8009652:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009656:	ee27 7b06 	vmul.f64	d7, d7, d6
 800965a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800965e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009662:	3201      	adds	r2, #1
 8009664:	4650      	mov	r0, sl
 8009666:	ed9d 6b02 	vldr	d6, [sp, #8]
 800966a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800966e:	ee07 2a90 	vmov	s15, r2
 8009672:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009676:	eea7 5b06 	vfma.f64	d5, d7, d6
 800967a:	ee15 4a90 	vmov	r4, s11
 800967e:	ec52 1b15 	vmov	r1, r2, d5
 8009682:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009686:	2800      	cmp	r0, #0
 8009688:	d177      	bne.n	800977a <_dtoa_r+0x4a2>
 800968a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800968e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009692:	ec42 1b17 	vmov	d7, r1, r2
 8009696:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800969a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969e:	f300 8263 	bgt.w	8009b68 <_dtoa_r+0x890>
 80096a2:	eeb1 7b47 	vneg.f64	d7, d7
 80096a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ae:	f100 8258 	bmi.w	8009b62 <_dtoa_r+0x88a>
 80096b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80096b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	f2c0 811d 	blt.w	80098f8 <_dtoa_r+0x620>
 80096be:	f1bb 0f0e 	cmp.w	fp, #14
 80096c2:	f300 8119 	bgt.w	80098f8 <_dtoa_r+0x620>
 80096c6:	4b8a      	ldr	r3, [pc, #552]	; (80098f0 <_dtoa_r+0x618>)
 80096c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096cc:	ed93 6b00 	vldr	d6, [r3]
 80096d0:	9b08      	ldr	r3, [sp, #32]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f280 80b7 	bge.w	8009846 <_dtoa_r+0x56e>
 80096d8:	f1b9 0f00 	cmp.w	r9, #0
 80096dc:	f300 80b3 	bgt.w	8009846 <_dtoa_r+0x56e>
 80096e0:	f040 823f 	bne.w	8009b62 <_dtoa_r+0x88a>
 80096e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80096e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80096ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f8:	464c      	mov	r4, r9
 80096fa:	464f      	mov	r7, r9
 80096fc:	f280 8215 	bge.w	8009b2a <_dtoa_r+0x852>
 8009700:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009704:	2331      	movs	r3, #49	; 0x31
 8009706:	f808 3b01 	strb.w	r3, [r8], #1
 800970a:	f10b 0b01 	add.w	fp, fp, #1
 800970e:	e211      	b.n	8009b34 <_dtoa_r+0x85c>
 8009710:	2202      	movs	r2, #2
 8009712:	e780      	b.n	8009616 <_dtoa_r+0x33e>
 8009714:	07cc      	lsls	r4, r1, #31
 8009716:	d504      	bpl.n	8009722 <_dtoa_r+0x44a>
 8009718:	ed90 6b00 	vldr	d6, [r0]
 800971c:	3201      	adds	r2, #1
 800971e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009722:	1049      	asrs	r1, r1, #1
 8009724:	3008      	adds	r0, #8
 8009726:	e777      	b.n	8009618 <_dtoa_r+0x340>
 8009728:	d022      	beq.n	8009770 <_dtoa_r+0x498>
 800972a:	f1cb 0100 	rsb	r1, fp, #0
 800972e:	4a70      	ldr	r2, [pc, #448]	; (80098f0 <_dtoa_r+0x618>)
 8009730:	f001 000f 	and.w	r0, r1, #15
 8009734:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009738:	ed92 7b00 	vldr	d7, [r2]
 800973c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009740:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009744:	486b      	ldr	r0, [pc, #428]	; (80098f4 <_dtoa_r+0x61c>)
 8009746:	1109      	asrs	r1, r1, #4
 8009748:	2400      	movs	r4, #0
 800974a:	2202      	movs	r2, #2
 800974c:	b929      	cbnz	r1, 800975a <_dtoa_r+0x482>
 800974e:	2c00      	cmp	r4, #0
 8009750:	f43f af6a 	beq.w	8009628 <_dtoa_r+0x350>
 8009754:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009758:	e766      	b.n	8009628 <_dtoa_r+0x350>
 800975a:	07cf      	lsls	r7, r1, #31
 800975c:	d505      	bpl.n	800976a <_dtoa_r+0x492>
 800975e:	ed90 6b00 	vldr	d6, [r0]
 8009762:	3201      	adds	r2, #1
 8009764:	2401      	movs	r4, #1
 8009766:	ee27 7b06 	vmul.f64	d7, d7, d6
 800976a:	1049      	asrs	r1, r1, #1
 800976c:	3008      	adds	r0, #8
 800976e:	e7ed      	b.n	800974c <_dtoa_r+0x474>
 8009770:	2202      	movs	r2, #2
 8009772:	e759      	b.n	8009628 <_dtoa_r+0x350>
 8009774:	465f      	mov	r7, fp
 8009776:	4648      	mov	r0, r9
 8009778:	e775      	b.n	8009666 <_dtoa_r+0x38e>
 800977a:	ec42 1b17 	vmov	d7, r1, r2
 800977e:	4a5c      	ldr	r2, [pc, #368]	; (80098f0 <_dtoa_r+0x618>)
 8009780:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009784:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009788:	9a01      	ldr	r2, [sp, #4]
 800978a:	1814      	adds	r4, r2, r0
 800978c:	9a07      	ldr	r2, [sp, #28]
 800978e:	b352      	cbz	r2, 80097e6 <_dtoa_r+0x50e>
 8009790:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009794:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009798:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800979c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80097a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80097a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80097a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80097ac:	ee14 2a90 	vmov	r2, s9
 80097b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80097b4:	3230      	adds	r2, #48	; 0x30
 80097b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80097ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c2:	f808 2b01 	strb.w	r2, [r8], #1
 80097c6:	d439      	bmi.n	800983c <_dtoa_r+0x564>
 80097c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80097cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80097d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d4:	d472      	bmi.n	80098bc <_dtoa_r+0x5e4>
 80097d6:	45a0      	cmp	r8, r4
 80097d8:	f43f af6b 	beq.w	80096b2 <_dtoa_r+0x3da>
 80097dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80097e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80097e4:	e7e0      	b.n	80097a8 <_dtoa_r+0x4d0>
 80097e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80097ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80097ee:	4621      	mov	r1, r4
 80097f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80097f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80097f8:	ee14 2a90 	vmov	r2, s9
 80097fc:	3230      	adds	r2, #48	; 0x30
 80097fe:	f808 2b01 	strb.w	r2, [r8], #1
 8009802:	45a0      	cmp	r8, r4
 8009804:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009808:	ee36 6b45 	vsub.f64	d6, d6, d5
 800980c:	d118      	bne.n	8009840 <_dtoa_r+0x568>
 800980e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009812:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009816:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800981a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800981e:	dc4d      	bgt.n	80098bc <_dtoa_r+0x5e4>
 8009820:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009824:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982c:	f57f af41 	bpl.w	80096b2 <_dtoa_r+0x3da>
 8009830:	4688      	mov	r8, r1
 8009832:	3901      	subs	r1, #1
 8009834:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009838:	2b30      	cmp	r3, #48	; 0x30
 800983a:	d0f9      	beq.n	8009830 <_dtoa_r+0x558>
 800983c:	46bb      	mov	fp, r7
 800983e:	e02a      	b.n	8009896 <_dtoa_r+0x5be>
 8009840:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009844:	e7d6      	b.n	80097f4 <_dtoa_r+0x51c>
 8009846:	ed9d 7b02 	vldr	d7, [sp, #8]
 800984a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800984e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009852:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009856:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800985a:	ee15 3a10 	vmov	r3, s10
 800985e:	3330      	adds	r3, #48	; 0x30
 8009860:	f808 3b01 	strb.w	r3, [r8], #1
 8009864:	9b01      	ldr	r3, [sp, #4]
 8009866:	eba8 0303 	sub.w	r3, r8, r3
 800986a:	4599      	cmp	r9, r3
 800986c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009870:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009874:	d133      	bne.n	80098de <_dtoa_r+0x606>
 8009876:	ee37 7b07 	vadd.f64	d7, d7, d7
 800987a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800987e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009882:	dc1a      	bgt.n	80098ba <_dtoa_r+0x5e2>
 8009884:	eeb4 7b46 	vcmp.f64	d7, d6
 8009888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988c:	d103      	bne.n	8009896 <_dtoa_r+0x5be>
 800988e:	ee15 3a10 	vmov	r3, s10
 8009892:	07d9      	lsls	r1, r3, #31
 8009894:	d411      	bmi.n	80098ba <_dtoa_r+0x5e2>
 8009896:	4629      	mov	r1, r5
 8009898:	4630      	mov	r0, r6
 800989a:	f000 fadb 	bl	8009e54 <_Bfree>
 800989e:	2300      	movs	r3, #0
 80098a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098a2:	f888 3000 	strb.w	r3, [r8]
 80098a6:	f10b 0301 	add.w	r3, fp, #1
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f43f ad61 	beq.w	8009376 <_dtoa_r+0x9e>
 80098b4:	f8c3 8000 	str.w	r8, [r3]
 80098b8:	e55d      	b.n	8009376 <_dtoa_r+0x9e>
 80098ba:	465f      	mov	r7, fp
 80098bc:	4643      	mov	r3, r8
 80098be:	4698      	mov	r8, r3
 80098c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098c4:	2a39      	cmp	r2, #57	; 0x39
 80098c6:	d106      	bne.n	80098d6 <_dtoa_r+0x5fe>
 80098c8:	9a01      	ldr	r2, [sp, #4]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d1f7      	bne.n	80098be <_dtoa_r+0x5e6>
 80098ce:	9901      	ldr	r1, [sp, #4]
 80098d0:	2230      	movs	r2, #48	; 0x30
 80098d2:	3701      	adds	r7, #1
 80098d4:	700a      	strb	r2, [r1, #0]
 80098d6:	781a      	ldrb	r2, [r3, #0]
 80098d8:	3201      	adds	r2, #1
 80098da:	701a      	strb	r2, [r3, #0]
 80098dc:	e7ae      	b.n	800983c <_dtoa_r+0x564>
 80098de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80098e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ea:	d1b2      	bne.n	8009852 <_dtoa_r+0x57a>
 80098ec:	e7d3      	b.n	8009896 <_dtoa_r+0x5be>
 80098ee:	bf00      	nop
 80098f0:	0800bbd8 	.word	0x0800bbd8
 80098f4:	0800bbb0 	.word	0x0800bbb0
 80098f8:	9907      	ldr	r1, [sp, #28]
 80098fa:	2900      	cmp	r1, #0
 80098fc:	f000 80d0 	beq.w	8009aa0 <_dtoa_r+0x7c8>
 8009900:	9906      	ldr	r1, [sp, #24]
 8009902:	2901      	cmp	r1, #1
 8009904:	f300 80b4 	bgt.w	8009a70 <_dtoa_r+0x798>
 8009908:	990a      	ldr	r1, [sp, #40]	; 0x28
 800990a:	2900      	cmp	r1, #0
 800990c:	f000 80ac 	beq.w	8009a68 <_dtoa_r+0x790>
 8009910:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009914:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009918:	461c      	mov	r4, r3
 800991a:	930a      	str	r3, [sp, #40]	; 0x28
 800991c:	9b04      	ldr	r3, [sp, #16]
 800991e:	4413      	add	r3, r2
 8009920:	9304      	str	r3, [sp, #16]
 8009922:	9b05      	ldr	r3, [sp, #20]
 8009924:	2101      	movs	r1, #1
 8009926:	4413      	add	r3, r2
 8009928:	4630      	mov	r0, r6
 800992a:	9305      	str	r3, [sp, #20]
 800992c:	f000 fb4a 	bl	8009fc4 <__i2b>
 8009930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009932:	4607      	mov	r7, r0
 8009934:	f1b8 0f00 	cmp.w	r8, #0
 8009938:	dd0d      	ble.n	8009956 <_dtoa_r+0x67e>
 800993a:	9a05      	ldr	r2, [sp, #20]
 800993c:	2a00      	cmp	r2, #0
 800993e:	dd0a      	ble.n	8009956 <_dtoa_r+0x67e>
 8009940:	4542      	cmp	r2, r8
 8009942:	9904      	ldr	r1, [sp, #16]
 8009944:	bfa8      	it	ge
 8009946:	4642      	movge	r2, r8
 8009948:	1a89      	subs	r1, r1, r2
 800994a:	9104      	str	r1, [sp, #16]
 800994c:	9905      	ldr	r1, [sp, #20]
 800994e:	eba8 0802 	sub.w	r8, r8, r2
 8009952:	1a8a      	subs	r2, r1, r2
 8009954:	9205      	str	r2, [sp, #20]
 8009956:	b303      	cbz	r3, 800999a <_dtoa_r+0x6c2>
 8009958:	9a07      	ldr	r2, [sp, #28]
 800995a:	2a00      	cmp	r2, #0
 800995c:	f000 80a5 	beq.w	8009aaa <_dtoa_r+0x7d2>
 8009960:	2c00      	cmp	r4, #0
 8009962:	dd13      	ble.n	800998c <_dtoa_r+0x6b4>
 8009964:	4639      	mov	r1, r7
 8009966:	4622      	mov	r2, r4
 8009968:	4630      	mov	r0, r6
 800996a:	930d      	str	r3, [sp, #52]	; 0x34
 800996c:	f000 fbea 	bl	800a144 <__pow5mult>
 8009970:	462a      	mov	r2, r5
 8009972:	4601      	mov	r1, r0
 8009974:	4607      	mov	r7, r0
 8009976:	4630      	mov	r0, r6
 8009978:	f000 fb3a 	bl	8009ff0 <__multiply>
 800997c:	4629      	mov	r1, r5
 800997e:	900a      	str	r0, [sp, #40]	; 0x28
 8009980:	4630      	mov	r0, r6
 8009982:	f000 fa67 	bl	8009e54 <_Bfree>
 8009986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800998a:	4615      	mov	r5, r2
 800998c:	1b1a      	subs	r2, r3, r4
 800998e:	d004      	beq.n	800999a <_dtoa_r+0x6c2>
 8009990:	4629      	mov	r1, r5
 8009992:	4630      	mov	r0, r6
 8009994:	f000 fbd6 	bl	800a144 <__pow5mult>
 8009998:	4605      	mov	r5, r0
 800999a:	2101      	movs	r1, #1
 800999c:	4630      	mov	r0, r6
 800999e:	f000 fb11 	bl	8009fc4 <__i2b>
 80099a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	f340 8081 	ble.w	8009aae <_dtoa_r+0x7d6>
 80099ac:	461a      	mov	r2, r3
 80099ae:	4601      	mov	r1, r0
 80099b0:	4630      	mov	r0, r6
 80099b2:	f000 fbc7 	bl	800a144 <__pow5mult>
 80099b6:	9b06      	ldr	r3, [sp, #24]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	4604      	mov	r4, r0
 80099bc:	dd7a      	ble.n	8009ab4 <_dtoa_r+0x7dc>
 80099be:	2300      	movs	r3, #0
 80099c0:	930a      	str	r3, [sp, #40]	; 0x28
 80099c2:	6922      	ldr	r2, [r4, #16]
 80099c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80099c8:	6910      	ldr	r0, [r2, #16]
 80099ca:	f000 faab 	bl	8009f24 <__hi0bits>
 80099ce:	f1c0 0020 	rsb	r0, r0, #32
 80099d2:	9b05      	ldr	r3, [sp, #20]
 80099d4:	4418      	add	r0, r3
 80099d6:	f010 001f 	ands.w	r0, r0, #31
 80099da:	f000 808c 	beq.w	8009af6 <_dtoa_r+0x81e>
 80099de:	f1c0 0220 	rsb	r2, r0, #32
 80099e2:	2a04      	cmp	r2, #4
 80099e4:	f340 8085 	ble.w	8009af2 <_dtoa_r+0x81a>
 80099e8:	f1c0 001c 	rsb	r0, r0, #28
 80099ec:	9b04      	ldr	r3, [sp, #16]
 80099ee:	4403      	add	r3, r0
 80099f0:	9304      	str	r3, [sp, #16]
 80099f2:	9b05      	ldr	r3, [sp, #20]
 80099f4:	4403      	add	r3, r0
 80099f6:	4480      	add	r8, r0
 80099f8:	9305      	str	r3, [sp, #20]
 80099fa:	9b04      	ldr	r3, [sp, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	dd05      	ble.n	8009a0c <_dtoa_r+0x734>
 8009a00:	4629      	mov	r1, r5
 8009a02:	461a      	mov	r2, r3
 8009a04:	4630      	mov	r0, r6
 8009a06:	f000 fbf7 	bl	800a1f8 <__lshift>
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	9b05      	ldr	r3, [sp, #20]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	dd05      	ble.n	8009a1e <_dtoa_r+0x746>
 8009a12:	4621      	mov	r1, r4
 8009a14:	461a      	mov	r2, r3
 8009a16:	4630      	mov	r0, r6
 8009a18:	f000 fbee 	bl	800a1f8 <__lshift>
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d06a      	beq.n	8009afa <_dtoa_r+0x822>
 8009a24:	4621      	mov	r1, r4
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 fc56 	bl	800a2d8 <__mcmp>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	da64      	bge.n	8009afa <_dtoa_r+0x822>
 8009a30:	2300      	movs	r3, #0
 8009a32:	4629      	mov	r1, r5
 8009a34:	220a      	movs	r2, #10
 8009a36:	4630      	mov	r0, r6
 8009a38:	f000 fa2e 	bl	8009e98 <__multadd>
 8009a3c:	9b07      	ldr	r3, [sp, #28]
 8009a3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a42:	4605      	mov	r5, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 8191 	beq.w	8009d6c <_dtoa_r+0xa94>
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	220a      	movs	r2, #10
 8009a50:	4630      	mov	r0, r6
 8009a52:	f000 fa21 	bl	8009e98 <__multadd>
 8009a56:	f1ba 0f00 	cmp.w	sl, #0
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	f300 808d 	bgt.w	8009b7a <_dtoa_r+0x8a2>
 8009a60:	9b06      	ldr	r3, [sp, #24]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	dc50      	bgt.n	8009b08 <_dtoa_r+0x830>
 8009a66:	e088      	b.n	8009b7a <_dtoa_r+0x8a2>
 8009a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a6e:	e751      	b.n	8009914 <_dtoa_r+0x63c>
 8009a70:	f109 34ff 	add.w	r4, r9, #4294967295
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	bfbf      	itttt	lt
 8009a78:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009a7a:	1ae3      	sublt	r3, r4, r3
 8009a7c:	18d2      	addlt	r2, r2, r3
 8009a7e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009a80:	bfb6      	itet	lt
 8009a82:	4623      	movlt	r3, r4
 8009a84:	1b1c      	subge	r4, r3, r4
 8009a86:	2400      	movlt	r4, #0
 8009a88:	f1b9 0f00 	cmp.w	r9, #0
 8009a8c:	bfb5      	itete	lt
 8009a8e:	9a04      	ldrlt	r2, [sp, #16]
 8009a90:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009a94:	eba2 0809 	sublt.w	r8, r2, r9
 8009a98:	464a      	movge	r2, r9
 8009a9a:	bfb8      	it	lt
 8009a9c:	2200      	movlt	r2, #0
 8009a9e:	e73c      	b.n	800991a <_dtoa_r+0x642>
 8009aa0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009aa4:	9f07      	ldr	r7, [sp, #28]
 8009aa6:	461c      	mov	r4, r3
 8009aa8:	e744      	b.n	8009934 <_dtoa_r+0x65c>
 8009aaa:	461a      	mov	r2, r3
 8009aac:	e770      	b.n	8009990 <_dtoa_r+0x6b8>
 8009aae:	9b06      	ldr	r3, [sp, #24]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	dc18      	bgt.n	8009ae6 <_dtoa_r+0x80e>
 8009ab4:	9b02      	ldr	r3, [sp, #8]
 8009ab6:	b9b3      	cbnz	r3, 8009ae6 <_dtoa_r+0x80e>
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009abe:	b9a2      	cbnz	r2, 8009aea <_dtoa_r+0x812>
 8009ac0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ac4:	0d12      	lsrs	r2, r2, #20
 8009ac6:	0512      	lsls	r2, r2, #20
 8009ac8:	b18a      	cbz	r2, 8009aee <_dtoa_r+0x816>
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	3301      	adds	r3, #1
 8009ace:	9304      	str	r3, [sp, #16]
 8009ad0:	9b05      	ldr	r3, [sp, #20]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	9305      	str	r3, [sp, #20]
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8009ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f47f af70 	bne.w	80099c2 <_dtoa_r+0x6ea>
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	e775      	b.n	80099d2 <_dtoa_r+0x6fa>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e7f6      	b.n	8009ad8 <_dtoa_r+0x800>
 8009aea:	9b02      	ldr	r3, [sp, #8]
 8009aec:	e7f4      	b.n	8009ad8 <_dtoa_r+0x800>
 8009aee:	920a      	str	r2, [sp, #40]	; 0x28
 8009af0:	e7f3      	b.n	8009ada <_dtoa_r+0x802>
 8009af2:	d082      	beq.n	80099fa <_dtoa_r+0x722>
 8009af4:	4610      	mov	r0, r2
 8009af6:	301c      	adds	r0, #28
 8009af8:	e778      	b.n	80099ec <_dtoa_r+0x714>
 8009afa:	f1b9 0f00 	cmp.w	r9, #0
 8009afe:	dc37      	bgt.n	8009b70 <_dtoa_r+0x898>
 8009b00:	9b06      	ldr	r3, [sp, #24]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	dd34      	ble.n	8009b70 <_dtoa_r+0x898>
 8009b06:	46ca      	mov	sl, r9
 8009b08:	f1ba 0f00 	cmp.w	sl, #0
 8009b0c:	d10d      	bne.n	8009b2a <_dtoa_r+0x852>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4653      	mov	r3, sl
 8009b12:	2205      	movs	r2, #5
 8009b14:	4630      	mov	r0, r6
 8009b16:	f000 f9bf 	bl	8009e98 <__multadd>
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f000 fbda 	bl	800a2d8 <__mcmp>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	f73f adeb 	bgt.w	8009700 <_dtoa_r+0x428>
 8009b2a:	9b08      	ldr	r3, [sp, #32]
 8009b2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b30:	ea6f 0b03 	mvn.w	fp, r3
 8009b34:	f04f 0900 	mov.w	r9, #0
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f000 f98a 	bl	8009e54 <_Bfree>
 8009b40:	2f00      	cmp	r7, #0
 8009b42:	f43f aea8 	beq.w	8009896 <_dtoa_r+0x5be>
 8009b46:	f1b9 0f00 	cmp.w	r9, #0
 8009b4a:	d005      	beq.n	8009b58 <_dtoa_r+0x880>
 8009b4c:	45b9      	cmp	r9, r7
 8009b4e:	d003      	beq.n	8009b58 <_dtoa_r+0x880>
 8009b50:	4649      	mov	r1, r9
 8009b52:	4630      	mov	r0, r6
 8009b54:	f000 f97e 	bl	8009e54 <_Bfree>
 8009b58:	4639      	mov	r1, r7
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f000 f97a 	bl	8009e54 <_Bfree>
 8009b60:	e699      	b.n	8009896 <_dtoa_r+0x5be>
 8009b62:	2400      	movs	r4, #0
 8009b64:	4627      	mov	r7, r4
 8009b66:	e7e0      	b.n	8009b2a <_dtoa_r+0x852>
 8009b68:	46bb      	mov	fp, r7
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	e5c7      	b.n	8009700 <_dtoa_r+0x428>
 8009b70:	9b07      	ldr	r3, [sp, #28]
 8009b72:	46ca      	mov	sl, r9
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 8100 	beq.w	8009d7a <_dtoa_r+0xaa2>
 8009b7a:	f1b8 0f00 	cmp.w	r8, #0
 8009b7e:	dd05      	ble.n	8009b8c <_dtoa_r+0x8b4>
 8009b80:	4639      	mov	r1, r7
 8009b82:	4642      	mov	r2, r8
 8009b84:	4630      	mov	r0, r6
 8009b86:	f000 fb37 	bl	800a1f8 <__lshift>
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d05d      	beq.n	8009c4e <_dtoa_r+0x976>
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	4630      	mov	r0, r6
 8009b96:	f000 f91d 	bl	8009dd4 <_Balloc>
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	b928      	cbnz	r0, 8009baa <_dtoa_r+0x8d2>
 8009b9e:	4b82      	ldr	r3, [pc, #520]	; (8009da8 <_dtoa_r+0xad0>)
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ba6:	f7ff bbaf 	b.w	8009308 <_dtoa_r+0x30>
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	3202      	adds	r2, #2
 8009bae:	0092      	lsls	r2, r2, #2
 8009bb0:	f107 010c 	add.w	r1, r7, #12
 8009bb4:	300c      	adds	r0, #12
 8009bb6:	f7fe fd99 	bl	80086ec <memcpy>
 8009bba:	2201      	movs	r2, #1
 8009bbc:	4641      	mov	r1, r8
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f000 fb1a 	bl	800a1f8 <__lshift>
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	9304      	str	r3, [sp, #16]
 8009bca:	9b01      	ldr	r3, [sp, #4]
 8009bcc:	4453      	add	r3, sl
 8009bce:	9308      	str	r3, [sp, #32]
 8009bd0:	9b02      	ldr	r3, [sp, #8]
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	46b9      	mov	r9, r7
 8009bd8:	9307      	str	r3, [sp, #28]
 8009bda:	4607      	mov	r7, r0
 8009bdc:	9b04      	ldr	r3, [sp, #16]
 8009bde:	4621      	mov	r1, r4
 8009be0:	3b01      	subs	r3, #1
 8009be2:	4628      	mov	r0, r5
 8009be4:	9302      	str	r3, [sp, #8]
 8009be6:	f7ff fae9 	bl	80091bc <quorem>
 8009bea:	4603      	mov	r3, r0
 8009bec:	3330      	adds	r3, #48	; 0x30
 8009bee:	9005      	str	r0, [sp, #20]
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf6:	f000 fb6f 	bl	800a2d8 <__mcmp>
 8009bfa:	463a      	mov	r2, r7
 8009bfc:	4682      	mov	sl, r0
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4630      	mov	r0, r6
 8009c02:	f000 fb85 	bl	800a310 <__mdiff>
 8009c06:	68c2      	ldr	r2, [r0, #12]
 8009c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c0a:	4680      	mov	r8, r0
 8009c0c:	bb0a      	cbnz	r2, 8009c52 <_dtoa_r+0x97a>
 8009c0e:	4601      	mov	r1, r0
 8009c10:	4628      	mov	r0, r5
 8009c12:	f000 fb61 	bl	800a2d8 <__mcmp>
 8009c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c18:	4602      	mov	r2, r0
 8009c1a:	4641      	mov	r1, r8
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009c22:	f000 f917 	bl	8009e54 <_Bfree>
 8009c26:	9b06      	ldr	r3, [sp, #24]
 8009c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c2a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c2e:	ea43 0102 	orr.w	r1, r3, r2
 8009c32:	9b07      	ldr	r3, [sp, #28]
 8009c34:	430b      	orrs	r3, r1
 8009c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c38:	d10d      	bne.n	8009c56 <_dtoa_r+0x97e>
 8009c3a:	2b39      	cmp	r3, #57	; 0x39
 8009c3c:	d029      	beq.n	8009c92 <_dtoa_r+0x9ba>
 8009c3e:	f1ba 0f00 	cmp.w	sl, #0
 8009c42:	dd01      	ble.n	8009c48 <_dtoa_r+0x970>
 8009c44:	9b05      	ldr	r3, [sp, #20]
 8009c46:	3331      	adds	r3, #49	; 0x31
 8009c48:	9a02      	ldr	r2, [sp, #8]
 8009c4a:	7013      	strb	r3, [r2, #0]
 8009c4c:	e774      	b.n	8009b38 <_dtoa_r+0x860>
 8009c4e:	4638      	mov	r0, r7
 8009c50:	e7b8      	b.n	8009bc4 <_dtoa_r+0x8ec>
 8009c52:	2201      	movs	r2, #1
 8009c54:	e7e1      	b.n	8009c1a <_dtoa_r+0x942>
 8009c56:	f1ba 0f00 	cmp.w	sl, #0
 8009c5a:	db06      	blt.n	8009c6a <_dtoa_r+0x992>
 8009c5c:	9906      	ldr	r1, [sp, #24]
 8009c5e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009c62:	9907      	ldr	r1, [sp, #28]
 8009c64:	ea5a 0101 	orrs.w	r1, sl, r1
 8009c68:	d120      	bne.n	8009cac <_dtoa_r+0x9d4>
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	ddec      	ble.n	8009c48 <_dtoa_r+0x970>
 8009c6e:	4629      	mov	r1, r5
 8009c70:	2201      	movs	r2, #1
 8009c72:	4630      	mov	r0, r6
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	f000 fabf 	bl	800a1f8 <__lshift>
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	f000 fb2b 	bl	800a2d8 <__mcmp>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	dc02      	bgt.n	8009c8e <_dtoa_r+0x9b6>
 8009c88:	d1de      	bne.n	8009c48 <_dtoa_r+0x970>
 8009c8a:	07da      	lsls	r2, r3, #31
 8009c8c:	d5dc      	bpl.n	8009c48 <_dtoa_r+0x970>
 8009c8e:	2b39      	cmp	r3, #57	; 0x39
 8009c90:	d1d8      	bne.n	8009c44 <_dtoa_r+0x96c>
 8009c92:	9a02      	ldr	r2, [sp, #8]
 8009c94:	2339      	movs	r3, #57	; 0x39
 8009c96:	7013      	strb	r3, [r2, #0]
 8009c98:	4643      	mov	r3, r8
 8009c9a:	4698      	mov	r8, r3
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009ca2:	2a39      	cmp	r2, #57	; 0x39
 8009ca4:	d051      	beq.n	8009d4a <_dtoa_r+0xa72>
 8009ca6:	3201      	adds	r2, #1
 8009ca8:	701a      	strb	r2, [r3, #0]
 8009caa:	e745      	b.n	8009b38 <_dtoa_r+0x860>
 8009cac:	2a00      	cmp	r2, #0
 8009cae:	dd03      	ble.n	8009cb8 <_dtoa_r+0x9e0>
 8009cb0:	2b39      	cmp	r3, #57	; 0x39
 8009cb2:	d0ee      	beq.n	8009c92 <_dtoa_r+0x9ba>
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	e7c7      	b.n	8009c48 <_dtoa_r+0x970>
 8009cb8:	9a04      	ldr	r2, [sp, #16]
 8009cba:	9908      	ldr	r1, [sp, #32]
 8009cbc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009cc0:	428a      	cmp	r2, r1
 8009cc2:	d02b      	beq.n	8009d1c <_dtoa_r+0xa44>
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	220a      	movs	r2, #10
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f000 f8e4 	bl	8009e98 <__multadd>
 8009cd0:	45b9      	cmp	r9, r7
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	f04f 0300 	mov.w	r3, #0
 8009cd8:	f04f 020a 	mov.w	r2, #10
 8009cdc:	4649      	mov	r1, r9
 8009cde:	4630      	mov	r0, r6
 8009ce0:	d107      	bne.n	8009cf2 <_dtoa_r+0xa1a>
 8009ce2:	f000 f8d9 	bl	8009e98 <__multadd>
 8009ce6:	4681      	mov	r9, r0
 8009ce8:	4607      	mov	r7, r0
 8009cea:	9b04      	ldr	r3, [sp, #16]
 8009cec:	3301      	adds	r3, #1
 8009cee:	9304      	str	r3, [sp, #16]
 8009cf0:	e774      	b.n	8009bdc <_dtoa_r+0x904>
 8009cf2:	f000 f8d1 	bl	8009e98 <__multadd>
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	4681      	mov	r9, r0
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	220a      	movs	r2, #10
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f000 f8ca 	bl	8009e98 <__multadd>
 8009d04:	4607      	mov	r7, r0
 8009d06:	e7f0      	b.n	8009cea <_dtoa_r+0xa12>
 8009d08:	f1ba 0f00 	cmp.w	sl, #0
 8009d0c:	9a01      	ldr	r2, [sp, #4]
 8009d0e:	bfcc      	ite	gt
 8009d10:	46d0      	movgt	r8, sl
 8009d12:	f04f 0801 	movle.w	r8, #1
 8009d16:	4490      	add	r8, r2
 8009d18:	f04f 0900 	mov.w	r9, #0
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	2201      	movs	r2, #1
 8009d20:	4630      	mov	r0, r6
 8009d22:	9302      	str	r3, [sp, #8]
 8009d24:	f000 fa68 	bl	800a1f8 <__lshift>
 8009d28:	4621      	mov	r1, r4
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	f000 fad4 	bl	800a2d8 <__mcmp>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	dcb1      	bgt.n	8009c98 <_dtoa_r+0x9c0>
 8009d34:	d102      	bne.n	8009d3c <_dtoa_r+0xa64>
 8009d36:	9b02      	ldr	r3, [sp, #8]
 8009d38:	07db      	lsls	r3, r3, #31
 8009d3a:	d4ad      	bmi.n	8009c98 <_dtoa_r+0x9c0>
 8009d3c:	4643      	mov	r3, r8
 8009d3e:	4698      	mov	r8, r3
 8009d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d44:	2a30      	cmp	r2, #48	; 0x30
 8009d46:	d0fa      	beq.n	8009d3e <_dtoa_r+0xa66>
 8009d48:	e6f6      	b.n	8009b38 <_dtoa_r+0x860>
 8009d4a:	9a01      	ldr	r2, [sp, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d1a4      	bne.n	8009c9a <_dtoa_r+0x9c2>
 8009d50:	f10b 0b01 	add.w	fp, fp, #1
 8009d54:	2331      	movs	r3, #49	; 0x31
 8009d56:	e778      	b.n	8009c4a <_dtoa_r+0x972>
 8009d58:	4b14      	ldr	r3, [pc, #80]	; (8009dac <_dtoa_r+0xad4>)
 8009d5a:	f7ff bb27 	b.w	80093ac <_dtoa_r+0xd4>
 8009d5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f47f ab03 	bne.w	800936c <_dtoa_r+0x94>
 8009d66:	4b12      	ldr	r3, [pc, #72]	; (8009db0 <_dtoa_r+0xad8>)
 8009d68:	f7ff bb20 	b.w	80093ac <_dtoa_r+0xd4>
 8009d6c:	f1ba 0f00 	cmp.w	sl, #0
 8009d70:	dc03      	bgt.n	8009d7a <_dtoa_r+0xaa2>
 8009d72:	9b06      	ldr	r3, [sp, #24]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	f73f aec7 	bgt.w	8009b08 <_dtoa_r+0x830>
 8009d7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4628      	mov	r0, r5
 8009d82:	f7ff fa1b 	bl	80091bc <quorem>
 8009d86:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009d8a:	f808 3b01 	strb.w	r3, [r8], #1
 8009d8e:	9a01      	ldr	r2, [sp, #4]
 8009d90:	eba8 0202 	sub.w	r2, r8, r2
 8009d94:	4592      	cmp	sl, r2
 8009d96:	ddb7      	ble.n	8009d08 <_dtoa_r+0xa30>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	220a      	movs	r2, #10
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f000 f87a 	bl	8009e98 <__multadd>
 8009da4:	4605      	mov	r5, r0
 8009da6:	e7ea      	b.n	8009d7e <_dtoa_r+0xaa6>
 8009da8:	0800bb3f 	.word	0x0800bb3f
 8009dac:	0800ba9c 	.word	0x0800ba9c
 8009db0:	0800bac0 	.word	0x0800bac0

08009db4 <_localeconv_r>:
 8009db4:	4800      	ldr	r0, [pc, #0]	; (8009db8 <_localeconv_r+0x4>)
 8009db6:	4770      	bx	lr
 8009db8:	240007f8 	.word	0x240007f8

08009dbc <__malloc_lock>:
 8009dbc:	4801      	ldr	r0, [pc, #4]	; (8009dc4 <__malloc_lock+0x8>)
 8009dbe:	f000 bd5e 	b.w	800a87e <__retarget_lock_acquire_recursive>
 8009dc2:	bf00      	nop
 8009dc4:	24000a80 	.word	0x24000a80

08009dc8 <__malloc_unlock>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	; (8009dd0 <__malloc_unlock+0x8>)
 8009dca:	f000 bd59 	b.w	800a880 <__retarget_lock_release_recursive>
 8009dce:	bf00      	nop
 8009dd0:	24000a80 	.word	0x24000a80

08009dd4 <_Balloc>:
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009dd8:	4604      	mov	r4, r0
 8009dda:	460d      	mov	r5, r1
 8009ddc:	b976      	cbnz	r6, 8009dfc <_Balloc+0x28>
 8009dde:	2010      	movs	r0, #16
 8009de0:	f7fe fc7c 	bl	80086dc <malloc>
 8009de4:	4602      	mov	r2, r0
 8009de6:	6260      	str	r0, [r4, #36]	; 0x24
 8009de8:	b920      	cbnz	r0, 8009df4 <_Balloc+0x20>
 8009dea:	4b18      	ldr	r3, [pc, #96]	; (8009e4c <_Balloc+0x78>)
 8009dec:	4818      	ldr	r0, [pc, #96]	; (8009e50 <_Balloc+0x7c>)
 8009dee:	2166      	movs	r1, #102	; 0x66
 8009df0:	f000 fd14 	bl	800a81c <__assert_func>
 8009df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009df8:	6006      	str	r6, [r0, #0]
 8009dfa:	60c6      	str	r6, [r0, #12]
 8009dfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009dfe:	68f3      	ldr	r3, [r6, #12]
 8009e00:	b183      	cbz	r3, 8009e24 <_Balloc+0x50>
 8009e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e0a:	b9b8      	cbnz	r0, 8009e3c <_Balloc+0x68>
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	fa01 f605 	lsl.w	r6, r1, r5
 8009e12:	1d72      	adds	r2, r6, #5
 8009e14:	0092      	lsls	r2, r2, #2
 8009e16:	4620      	mov	r0, r4
 8009e18:	f000 fb60 	bl	800a4dc <_calloc_r>
 8009e1c:	b160      	cbz	r0, 8009e38 <_Balloc+0x64>
 8009e1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e22:	e00e      	b.n	8009e42 <_Balloc+0x6e>
 8009e24:	2221      	movs	r2, #33	; 0x21
 8009e26:	2104      	movs	r1, #4
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 fb57 	bl	800a4dc <_calloc_r>
 8009e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e30:	60f0      	str	r0, [r6, #12]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e4      	bne.n	8009e02 <_Balloc+0x2e>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	6802      	ldr	r2, [r0, #0]
 8009e3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e42:	2300      	movs	r3, #0
 8009e44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e48:	e7f7      	b.n	8009e3a <_Balloc+0x66>
 8009e4a:	bf00      	nop
 8009e4c:	0800bacd 	.word	0x0800bacd
 8009e50:	0800bb50 	.word	0x0800bb50

08009e54 <_Bfree>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e58:	4605      	mov	r5, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	b976      	cbnz	r6, 8009e7c <_Bfree+0x28>
 8009e5e:	2010      	movs	r0, #16
 8009e60:	f7fe fc3c 	bl	80086dc <malloc>
 8009e64:	4602      	mov	r2, r0
 8009e66:	6268      	str	r0, [r5, #36]	; 0x24
 8009e68:	b920      	cbnz	r0, 8009e74 <_Bfree+0x20>
 8009e6a:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <_Bfree+0x3c>)
 8009e6c:	4809      	ldr	r0, [pc, #36]	; (8009e94 <_Bfree+0x40>)
 8009e6e:	218a      	movs	r1, #138	; 0x8a
 8009e70:	f000 fcd4 	bl	800a81c <__assert_func>
 8009e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e78:	6006      	str	r6, [r0, #0]
 8009e7a:	60c6      	str	r6, [r0, #12]
 8009e7c:	b13c      	cbz	r4, 8009e8e <_Bfree+0x3a>
 8009e7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e80:	6862      	ldr	r2, [r4, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e88:	6021      	str	r1, [r4, #0]
 8009e8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	0800bacd 	.word	0x0800bacd
 8009e94:	0800bb50 	.word	0x0800bb50

08009e98 <__multadd>:
 8009e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9c:	690d      	ldr	r5, [r1, #16]
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	461e      	mov	r6, r3
 8009ea4:	f101 0c14 	add.w	ip, r1, #20
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f8dc 3000 	ldr.w	r3, [ip]
 8009eae:	b299      	uxth	r1, r3
 8009eb0:	fb02 6101 	mla	r1, r2, r1, r6
 8009eb4:	0c1e      	lsrs	r6, r3, #16
 8009eb6:	0c0b      	lsrs	r3, r1, #16
 8009eb8:	fb02 3306 	mla	r3, r2, r6, r3
 8009ebc:	b289      	uxth	r1, r1
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ec4:	4285      	cmp	r5, r0
 8009ec6:	f84c 1b04 	str.w	r1, [ip], #4
 8009eca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ece:	dcec      	bgt.n	8009eaa <__multadd+0x12>
 8009ed0:	b30e      	cbz	r6, 8009f16 <__multadd+0x7e>
 8009ed2:	68a3      	ldr	r3, [r4, #8]
 8009ed4:	42ab      	cmp	r3, r5
 8009ed6:	dc19      	bgt.n	8009f0c <__multadd+0x74>
 8009ed8:	6861      	ldr	r1, [r4, #4]
 8009eda:	4638      	mov	r0, r7
 8009edc:	3101      	adds	r1, #1
 8009ede:	f7ff ff79 	bl	8009dd4 <_Balloc>
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	b928      	cbnz	r0, 8009ef2 <__multadd+0x5a>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <__multadd+0x84>)
 8009eea:	480d      	ldr	r0, [pc, #52]	; (8009f20 <__multadd+0x88>)
 8009eec:	21b5      	movs	r1, #181	; 0xb5
 8009eee:	f000 fc95 	bl	800a81c <__assert_func>
 8009ef2:	6922      	ldr	r2, [r4, #16]
 8009ef4:	3202      	adds	r2, #2
 8009ef6:	f104 010c 	add.w	r1, r4, #12
 8009efa:	0092      	lsls	r2, r2, #2
 8009efc:	300c      	adds	r0, #12
 8009efe:	f7fe fbf5 	bl	80086ec <memcpy>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4638      	mov	r0, r7
 8009f06:	f7ff ffa5 	bl	8009e54 <_Bfree>
 8009f0a:	4644      	mov	r4, r8
 8009f0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f10:	3501      	adds	r5, #1
 8009f12:	615e      	str	r6, [r3, #20]
 8009f14:	6125      	str	r5, [r4, #16]
 8009f16:	4620      	mov	r0, r4
 8009f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f1c:	0800bb3f 	.word	0x0800bb3f
 8009f20:	0800bb50 	.word	0x0800bb50

08009f24 <__hi0bits>:
 8009f24:	0c03      	lsrs	r3, r0, #16
 8009f26:	041b      	lsls	r3, r3, #16
 8009f28:	b9d3      	cbnz	r3, 8009f60 <__hi0bits+0x3c>
 8009f2a:	0400      	lsls	r0, r0, #16
 8009f2c:	2310      	movs	r3, #16
 8009f2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f32:	bf04      	itt	eq
 8009f34:	0200      	lsleq	r0, r0, #8
 8009f36:	3308      	addeq	r3, #8
 8009f38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f3c:	bf04      	itt	eq
 8009f3e:	0100      	lsleq	r0, r0, #4
 8009f40:	3304      	addeq	r3, #4
 8009f42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f46:	bf04      	itt	eq
 8009f48:	0080      	lsleq	r0, r0, #2
 8009f4a:	3302      	addeq	r3, #2
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	db05      	blt.n	8009f5c <__hi0bits+0x38>
 8009f50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f54:	f103 0301 	add.w	r3, r3, #1
 8009f58:	bf08      	it	eq
 8009f5a:	2320      	moveq	r3, #32
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	4770      	bx	lr
 8009f60:	2300      	movs	r3, #0
 8009f62:	e7e4      	b.n	8009f2e <__hi0bits+0xa>

08009f64 <__lo0bits>:
 8009f64:	6803      	ldr	r3, [r0, #0]
 8009f66:	f013 0207 	ands.w	r2, r3, #7
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	d00b      	beq.n	8009f86 <__lo0bits+0x22>
 8009f6e:	07da      	lsls	r2, r3, #31
 8009f70:	d423      	bmi.n	8009fba <__lo0bits+0x56>
 8009f72:	0798      	lsls	r0, r3, #30
 8009f74:	bf49      	itett	mi
 8009f76:	085b      	lsrmi	r3, r3, #1
 8009f78:	089b      	lsrpl	r3, r3, #2
 8009f7a:	2001      	movmi	r0, #1
 8009f7c:	600b      	strmi	r3, [r1, #0]
 8009f7e:	bf5c      	itt	pl
 8009f80:	600b      	strpl	r3, [r1, #0]
 8009f82:	2002      	movpl	r0, #2
 8009f84:	4770      	bx	lr
 8009f86:	b298      	uxth	r0, r3
 8009f88:	b9a8      	cbnz	r0, 8009fb6 <__lo0bits+0x52>
 8009f8a:	0c1b      	lsrs	r3, r3, #16
 8009f8c:	2010      	movs	r0, #16
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	b90a      	cbnz	r2, 8009f96 <__lo0bits+0x32>
 8009f92:	3008      	adds	r0, #8
 8009f94:	0a1b      	lsrs	r3, r3, #8
 8009f96:	071a      	lsls	r2, r3, #28
 8009f98:	bf04      	itt	eq
 8009f9a:	091b      	lsreq	r3, r3, #4
 8009f9c:	3004      	addeq	r0, #4
 8009f9e:	079a      	lsls	r2, r3, #30
 8009fa0:	bf04      	itt	eq
 8009fa2:	089b      	lsreq	r3, r3, #2
 8009fa4:	3002      	addeq	r0, #2
 8009fa6:	07da      	lsls	r2, r3, #31
 8009fa8:	d403      	bmi.n	8009fb2 <__lo0bits+0x4e>
 8009faa:	085b      	lsrs	r3, r3, #1
 8009fac:	f100 0001 	add.w	r0, r0, #1
 8009fb0:	d005      	beq.n	8009fbe <__lo0bits+0x5a>
 8009fb2:	600b      	str	r3, [r1, #0]
 8009fb4:	4770      	bx	lr
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	e7e9      	b.n	8009f8e <__lo0bits+0x2a>
 8009fba:	2000      	movs	r0, #0
 8009fbc:	4770      	bx	lr
 8009fbe:	2020      	movs	r0, #32
 8009fc0:	4770      	bx	lr
	...

08009fc4 <__i2b>:
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	2101      	movs	r1, #1
 8009fca:	f7ff ff03 	bl	8009dd4 <_Balloc>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	b928      	cbnz	r0, 8009fde <__i2b+0x1a>
 8009fd2:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <__i2b+0x24>)
 8009fd4:	4805      	ldr	r0, [pc, #20]	; (8009fec <__i2b+0x28>)
 8009fd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009fda:	f000 fc1f 	bl	800a81c <__assert_func>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	6144      	str	r4, [r0, #20]
 8009fe2:	6103      	str	r3, [r0, #16]
 8009fe4:	bd10      	pop	{r4, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0800bb3f 	.word	0x0800bb3f
 8009fec:	0800bb50 	.word	0x0800bb50

08009ff0 <__multiply>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	4691      	mov	r9, r2
 8009ff6:	690a      	ldr	r2, [r1, #16]
 8009ff8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	bfb8      	it	lt
 800a000:	460b      	movlt	r3, r1
 800a002:	460c      	mov	r4, r1
 800a004:	bfbc      	itt	lt
 800a006:	464c      	movlt	r4, r9
 800a008:	4699      	movlt	r9, r3
 800a00a:	6927      	ldr	r7, [r4, #16]
 800a00c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a010:	68a3      	ldr	r3, [r4, #8]
 800a012:	6861      	ldr	r1, [r4, #4]
 800a014:	eb07 060a 	add.w	r6, r7, sl
 800a018:	42b3      	cmp	r3, r6
 800a01a:	b085      	sub	sp, #20
 800a01c:	bfb8      	it	lt
 800a01e:	3101      	addlt	r1, #1
 800a020:	f7ff fed8 	bl	8009dd4 <_Balloc>
 800a024:	b930      	cbnz	r0, 800a034 <__multiply+0x44>
 800a026:	4602      	mov	r2, r0
 800a028:	4b44      	ldr	r3, [pc, #272]	; (800a13c <__multiply+0x14c>)
 800a02a:	4845      	ldr	r0, [pc, #276]	; (800a140 <__multiply+0x150>)
 800a02c:	f240 115d 	movw	r1, #349	; 0x15d
 800a030:	f000 fbf4 	bl	800a81c <__assert_func>
 800a034:	f100 0514 	add.w	r5, r0, #20
 800a038:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a03c:	462b      	mov	r3, r5
 800a03e:	2200      	movs	r2, #0
 800a040:	4543      	cmp	r3, r8
 800a042:	d321      	bcc.n	800a088 <__multiply+0x98>
 800a044:	f104 0314 	add.w	r3, r4, #20
 800a048:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a04c:	f109 0314 	add.w	r3, r9, #20
 800a050:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a054:	9202      	str	r2, [sp, #8]
 800a056:	1b3a      	subs	r2, r7, r4
 800a058:	3a15      	subs	r2, #21
 800a05a:	f022 0203 	bic.w	r2, r2, #3
 800a05e:	3204      	adds	r2, #4
 800a060:	f104 0115 	add.w	r1, r4, #21
 800a064:	428f      	cmp	r7, r1
 800a066:	bf38      	it	cc
 800a068:	2204      	movcc	r2, #4
 800a06a:	9201      	str	r2, [sp, #4]
 800a06c:	9a02      	ldr	r2, [sp, #8]
 800a06e:	9303      	str	r3, [sp, #12]
 800a070:	429a      	cmp	r2, r3
 800a072:	d80c      	bhi.n	800a08e <__multiply+0x9e>
 800a074:	2e00      	cmp	r6, #0
 800a076:	dd03      	ble.n	800a080 <__multiply+0x90>
 800a078:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d05a      	beq.n	800a136 <__multiply+0x146>
 800a080:	6106      	str	r6, [r0, #16]
 800a082:	b005      	add	sp, #20
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	f843 2b04 	str.w	r2, [r3], #4
 800a08c:	e7d8      	b.n	800a040 <__multiply+0x50>
 800a08e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a092:	f1ba 0f00 	cmp.w	sl, #0
 800a096:	d024      	beq.n	800a0e2 <__multiply+0xf2>
 800a098:	f104 0e14 	add.w	lr, r4, #20
 800a09c:	46a9      	mov	r9, r5
 800a09e:	f04f 0c00 	mov.w	ip, #0
 800a0a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a0a6:	f8d9 1000 	ldr.w	r1, [r9]
 800a0aa:	fa1f fb82 	uxth.w	fp, r2
 800a0ae:	b289      	uxth	r1, r1
 800a0b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a0b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a0b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a0bc:	4461      	add	r1, ip
 800a0be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a0c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0ca:	b289      	uxth	r1, r1
 800a0cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0d0:	4577      	cmp	r7, lr
 800a0d2:	f849 1b04 	str.w	r1, [r9], #4
 800a0d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0da:	d8e2      	bhi.n	800a0a2 <__multiply+0xb2>
 800a0dc:	9a01      	ldr	r2, [sp, #4]
 800a0de:	f845 c002 	str.w	ip, [r5, r2]
 800a0e2:	9a03      	ldr	r2, [sp, #12]
 800a0e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	f1b9 0f00 	cmp.w	r9, #0
 800a0ee:	d020      	beq.n	800a132 <__multiply+0x142>
 800a0f0:	6829      	ldr	r1, [r5, #0]
 800a0f2:	f104 0c14 	add.w	ip, r4, #20
 800a0f6:	46ae      	mov	lr, r5
 800a0f8:	f04f 0a00 	mov.w	sl, #0
 800a0fc:	f8bc b000 	ldrh.w	fp, [ip]
 800a100:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a104:	fb09 220b 	mla	r2, r9, fp, r2
 800a108:	4492      	add	sl, r2
 800a10a:	b289      	uxth	r1, r1
 800a10c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a110:	f84e 1b04 	str.w	r1, [lr], #4
 800a114:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a118:	f8be 1000 	ldrh.w	r1, [lr]
 800a11c:	0c12      	lsrs	r2, r2, #16
 800a11e:	fb09 1102 	mla	r1, r9, r2, r1
 800a122:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a126:	4567      	cmp	r7, ip
 800a128:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a12c:	d8e6      	bhi.n	800a0fc <__multiply+0x10c>
 800a12e:	9a01      	ldr	r2, [sp, #4]
 800a130:	50a9      	str	r1, [r5, r2]
 800a132:	3504      	adds	r5, #4
 800a134:	e79a      	b.n	800a06c <__multiply+0x7c>
 800a136:	3e01      	subs	r6, #1
 800a138:	e79c      	b.n	800a074 <__multiply+0x84>
 800a13a:	bf00      	nop
 800a13c:	0800bb3f 	.word	0x0800bb3f
 800a140:	0800bb50 	.word	0x0800bb50

0800a144 <__pow5mult>:
 800a144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a148:	4615      	mov	r5, r2
 800a14a:	f012 0203 	ands.w	r2, r2, #3
 800a14e:	4606      	mov	r6, r0
 800a150:	460f      	mov	r7, r1
 800a152:	d007      	beq.n	800a164 <__pow5mult+0x20>
 800a154:	4c25      	ldr	r4, [pc, #148]	; (800a1ec <__pow5mult+0xa8>)
 800a156:	3a01      	subs	r2, #1
 800a158:	2300      	movs	r3, #0
 800a15a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a15e:	f7ff fe9b 	bl	8009e98 <__multadd>
 800a162:	4607      	mov	r7, r0
 800a164:	10ad      	asrs	r5, r5, #2
 800a166:	d03d      	beq.n	800a1e4 <__pow5mult+0xa0>
 800a168:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a16a:	b97c      	cbnz	r4, 800a18c <__pow5mult+0x48>
 800a16c:	2010      	movs	r0, #16
 800a16e:	f7fe fab5 	bl	80086dc <malloc>
 800a172:	4602      	mov	r2, r0
 800a174:	6270      	str	r0, [r6, #36]	; 0x24
 800a176:	b928      	cbnz	r0, 800a184 <__pow5mult+0x40>
 800a178:	4b1d      	ldr	r3, [pc, #116]	; (800a1f0 <__pow5mult+0xac>)
 800a17a:	481e      	ldr	r0, [pc, #120]	; (800a1f4 <__pow5mult+0xb0>)
 800a17c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a180:	f000 fb4c 	bl	800a81c <__assert_func>
 800a184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a188:	6004      	str	r4, [r0, #0]
 800a18a:	60c4      	str	r4, [r0, #12]
 800a18c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a194:	b94c      	cbnz	r4, 800a1aa <__pow5mult+0x66>
 800a196:	f240 2171 	movw	r1, #625	; 0x271
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff ff12 	bl	8009fc4 <__i2b>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	f04f 0900 	mov.w	r9, #0
 800a1ae:	07eb      	lsls	r3, r5, #31
 800a1b0:	d50a      	bpl.n	800a1c8 <__pow5mult+0x84>
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7ff ff1a 	bl	8009ff0 <__multiply>
 800a1bc:	4639      	mov	r1, r7
 800a1be:	4680      	mov	r8, r0
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff fe47 	bl	8009e54 <_Bfree>
 800a1c6:	4647      	mov	r7, r8
 800a1c8:	106d      	asrs	r5, r5, #1
 800a1ca:	d00b      	beq.n	800a1e4 <__pow5mult+0xa0>
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	b938      	cbnz	r0, 800a1e0 <__pow5mult+0x9c>
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f7ff ff0b 	bl	8009ff0 <__multiply>
 800a1da:	6020      	str	r0, [r4, #0]
 800a1dc:	f8c0 9000 	str.w	r9, [r0]
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	e7e4      	b.n	800a1ae <__pow5mult+0x6a>
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ea:	bf00      	nop
 800a1ec:	0800bca0 	.word	0x0800bca0
 800a1f0:	0800bacd 	.word	0x0800bacd
 800a1f4:	0800bb50 	.word	0x0800bb50

0800a1f8 <__lshift>:
 800a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	6849      	ldr	r1, [r1, #4]
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a206:	68a3      	ldr	r3, [r4, #8]
 800a208:	4607      	mov	r7, r0
 800a20a:	4691      	mov	r9, r2
 800a20c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a210:	f108 0601 	add.w	r6, r8, #1
 800a214:	42b3      	cmp	r3, r6
 800a216:	db0b      	blt.n	800a230 <__lshift+0x38>
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff fddb 	bl	8009dd4 <_Balloc>
 800a21e:	4605      	mov	r5, r0
 800a220:	b948      	cbnz	r0, 800a236 <__lshift+0x3e>
 800a222:	4602      	mov	r2, r0
 800a224:	4b2a      	ldr	r3, [pc, #168]	; (800a2d0 <__lshift+0xd8>)
 800a226:	482b      	ldr	r0, [pc, #172]	; (800a2d4 <__lshift+0xdc>)
 800a228:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a22c:	f000 faf6 	bl	800a81c <__assert_func>
 800a230:	3101      	adds	r1, #1
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	e7ee      	b.n	800a214 <__lshift+0x1c>
 800a236:	2300      	movs	r3, #0
 800a238:	f100 0114 	add.w	r1, r0, #20
 800a23c:	f100 0210 	add.w	r2, r0, #16
 800a240:	4618      	mov	r0, r3
 800a242:	4553      	cmp	r3, sl
 800a244:	db37      	blt.n	800a2b6 <__lshift+0xbe>
 800a246:	6920      	ldr	r0, [r4, #16]
 800a248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a24c:	f104 0314 	add.w	r3, r4, #20
 800a250:	f019 091f 	ands.w	r9, r9, #31
 800a254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a258:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a25c:	d02f      	beq.n	800a2be <__lshift+0xc6>
 800a25e:	f1c9 0e20 	rsb	lr, r9, #32
 800a262:	468a      	mov	sl, r1
 800a264:	f04f 0c00 	mov.w	ip, #0
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	fa02 f209 	lsl.w	r2, r2, r9
 800a26e:	ea42 020c 	orr.w	r2, r2, ip
 800a272:	f84a 2b04 	str.w	r2, [sl], #4
 800a276:	f853 2b04 	ldr.w	r2, [r3], #4
 800a27a:	4298      	cmp	r0, r3
 800a27c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a280:	d8f2      	bhi.n	800a268 <__lshift+0x70>
 800a282:	1b03      	subs	r3, r0, r4
 800a284:	3b15      	subs	r3, #21
 800a286:	f023 0303 	bic.w	r3, r3, #3
 800a28a:	3304      	adds	r3, #4
 800a28c:	f104 0215 	add.w	r2, r4, #21
 800a290:	4290      	cmp	r0, r2
 800a292:	bf38      	it	cc
 800a294:	2304      	movcc	r3, #4
 800a296:	f841 c003 	str.w	ip, [r1, r3]
 800a29a:	f1bc 0f00 	cmp.w	ip, #0
 800a29e:	d001      	beq.n	800a2a4 <__lshift+0xac>
 800a2a0:	f108 0602 	add.w	r6, r8, #2
 800a2a4:	3e01      	subs	r6, #1
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	612e      	str	r6, [r5, #16]
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	f7ff fdd2 	bl	8009e54 <_Bfree>
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	e7c1      	b.n	800a242 <__lshift+0x4a>
 800a2be:	3904      	subs	r1, #4
 800a2c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2c8:	4298      	cmp	r0, r3
 800a2ca:	d8f9      	bhi.n	800a2c0 <__lshift+0xc8>
 800a2cc:	e7ea      	b.n	800a2a4 <__lshift+0xac>
 800a2ce:	bf00      	nop
 800a2d0:	0800bb3f 	.word	0x0800bb3f
 800a2d4:	0800bb50 	.word	0x0800bb50

0800a2d8 <__mcmp>:
 800a2d8:	b530      	push	{r4, r5, lr}
 800a2da:	6902      	ldr	r2, [r0, #16]
 800a2dc:	690c      	ldr	r4, [r1, #16]
 800a2de:	1b12      	subs	r2, r2, r4
 800a2e0:	d10e      	bne.n	800a300 <__mcmp+0x28>
 800a2e2:	f100 0314 	add.w	r3, r0, #20
 800a2e6:	3114      	adds	r1, #20
 800a2e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a2ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a2f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a2f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2f8:	42a5      	cmp	r5, r4
 800a2fa:	d003      	beq.n	800a304 <__mcmp+0x2c>
 800a2fc:	d305      	bcc.n	800a30a <__mcmp+0x32>
 800a2fe:	2201      	movs	r2, #1
 800a300:	4610      	mov	r0, r2
 800a302:	bd30      	pop	{r4, r5, pc}
 800a304:	4283      	cmp	r3, r0
 800a306:	d3f3      	bcc.n	800a2f0 <__mcmp+0x18>
 800a308:	e7fa      	b.n	800a300 <__mcmp+0x28>
 800a30a:	f04f 32ff 	mov.w	r2, #4294967295
 800a30e:	e7f7      	b.n	800a300 <__mcmp+0x28>

0800a310 <__mdiff>:
 800a310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	460c      	mov	r4, r1
 800a316:	4606      	mov	r6, r0
 800a318:	4611      	mov	r1, r2
 800a31a:	4620      	mov	r0, r4
 800a31c:	4690      	mov	r8, r2
 800a31e:	f7ff ffdb 	bl	800a2d8 <__mcmp>
 800a322:	1e05      	subs	r5, r0, #0
 800a324:	d110      	bne.n	800a348 <__mdiff+0x38>
 800a326:	4629      	mov	r1, r5
 800a328:	4630      	mov	r0, r6
 800a32a:	f7ff fd53 	bl	8009dd4 <_Balloc>
 800a32e:	b930      	cbnz	r0, 800a33e <__mdiff+0x2e>
 800a330:	4b3a      	ldr	r3, [pc, #232]	; (800a41c <__mdiff+0x10c>)
 800a332:	4602      	mov	r2, r0
 800a334:	f240 2132 	movw	r1, #562	; 0x232
 800a338:	4839      	ldr	r0, [pc, #228]	; (800a420 <__mdiff+0x110>)
 800a33a:	f000 fa6f 	bl	800a81c <__assert_func>
 800a33e:	2301      	movs	r3, #1
 800a340:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a348:	bfa4      	itt	ge
 800a34a:	4643      	movge	r3, r8
 800a34c:	46a0      	movge	r8, r4
 800a34e:	4630      	mov	r0, r6
 800a350:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a354:	bfa6      	itte	ge
 800a356:	461c      	movge	r4, r3
 800a358:	2500      	movge	r5, #0
 800a35a:	2501      	movlt	r5, #1
 800a35c:	f7ff fd3a 	bl	8009dd4 <_Balloc>
 800a360:	b920      	cbnz	r0, 800a36c <__mdiff+0x5c>
 800a362:	4b2e      	ldr	r3, [pc, #184]	; (800a41c <__mdiff+0x10c>)
 800a364:	4602      	mov	r2, r0
 800a366:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a36a:	e7e5      	b.n	800a338 <__mdiff+0x28>
 800a36c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a370:	6926      	ldr	r6, [r4, #16]
 800a372:	60c5      	str	r5, [r0, #12]
 800a374:	f104 0914 	add.w	r9, r4, #20
 800a378:	f108 0514 	add.w	r5, r8, #20
 800a37c:	f100 0e14 	add.w	lr, r0, #20
 800a380:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a384:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a388:	f108 0210 	add.w	r2, r8, #16
 800a38c:	46f2      	mov	sl, lr
 800a38e:	2100      	movs	r1, #0
 800a390:	f859 3b04 	ldr.w	r3, [r9], #4
 800a394:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a398:	fa1f f883 	uxth.w	r8, r3
 800a39c:	fa11 f18b 	uxtah	r1, r1, fp
 800a3a0:	0c1b      	lsrs	r3, r3, #16
 800a3a2:	eba1 0808 	sub.w	r8, r1, r8
 800a3a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a3ae:	fa1f f888 	uxth.w	r8, r8
 800a3b2:	1419      	asrs	r1, r3, #16
 800a3b4:	454e      	cmp	r6, r9
 800a3b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a3ba:	f84a 3b04 	str.w	r3, [sl], #4
 800a3be:	d8e7      	bhi.n	800a390 <__mdiff+0x80>
 800a3c0:	1b33      	subs	r3, r6, r4
 800a3c2:	3b15      	subs	r3, #21
 800a3c4:	f023 0303 	bic.w	r3, r3, #3
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	3415      	adds	r4, #21
 800a3cc:	42a6      	cmp	r6, r4
 800a3ce:	bf38      	it	cc
 800a3d0:	2304      	movcc	r3, #4
 800a3d2:	441d      	add	r5, r3
 800a3d4:	4473      	add	r3, lr
 800a3d6:	469e      	mov	lr, r3
 800a3d8:	462e      	mov	r6, r5
 800a3da:	4566      	cmp	r6, ip
 800a3dc:	d30e      	bcc.n	800a3fc <__mdiff+0xec>
 800a3de:	f10c 0203 	add.w	r2, ip, #3
 800a3e2:	1b52      	subs	r2, r2, r5
 800a3e4:	f022 0203 	bic.w	r2, r2, #3
 800a3e8:	3d03      	subs	r5, #3
 800a3ea:	45ac      	cmp	ip, r5
 800a3ec:	bf38      	it	cc
 800a3ee:	2200      	movcc	r2, #0
 800a3f0:	441a      	add	r2, r3
 800a3f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a3f6:	b17b      	cbz	r3, 800a418 <__mdiff+0x108>
 800a3f8:	6107      	str	r7, [r0, #16]
 800a3fa:	e7a3      	b.n	800a344 <__mdiff+0x34>
 800a3fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a400:	fa11 f288 	uxtah	r2, r1, r8
 800a404:	1414      	asrs	r4, r2, #16
 800a406:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a40a:	b292      	uxth	r2, r2
 800a40c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a410:	f84e 2b04 	str.w	r2, [lr], #4
 800a414:	1421      	asrs	r1, r4, #16
 800a416:	e7e0      	b.n	800a3da <__mdiff+0xca>
 800a418:	3f01      	subs	r7, #1
 800a41a:	e7ea      	b.n	800a3f2 <__mdiff+0xe2>
 800a41c:	0800bb3f 	.word	0x0800bb3f
 800a420:	0800bb50 	.word	0x0800bb50

0800a424 <__d2b>:
 800a424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a428:	4689      	mov	r9, r1
 800a42a:	2101      	movs	r1, #1
 800a42c:	ec57 6b10 	vmov	r6, r7, d0
 800a430:	4690      	mov	r8, r2
 800a432:	f7ff fccf 	bl	8009dd4 <_Balloc>
 800a436:	4604      	mov	r4, r0
 800a438:	b930      	cbnz	r0, 800a448 <__d2b+0x24>
 800a43a:	4602      	mov	r2, r0
 800a43c:	4b25      	ldr	r3, [pc, #148]	; (800a4d4 <__d2b+0xb0>)
 800a43e:	4826      	ldr	r0, [pc, #152]	; (800a4d8 <__d2b+0xb4>)
 800a440:	f240 310a 	movw	r1, #778	; 0x30a
 800a444:	f000 f9ea 	bl	800a81c <__assert_func>
 800a448:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a44c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a450:	bb35      	cbnz	r5, 800a4a0 <__d2b+0x7c>
 800a452:	2e00      	cmp	r6, #0
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	d028      	beq.n	800a4aa <__d2b+0x86>
 800a458:	4668      	mov	r0, sp
 800a45a:	9600      	str	r6, [sp, #0]
 800a45c:	f7ff fd82 	bl	8009f64 <__lo0bits>
 800a460:	9900      	ldr	r1, [sp, #0]
 800a462:	b300      	cbz	r0, 800a4a6 <__d2b+0x82>
 800a464:	9a01      	ldr	r2, [sp, #4]
 800a466:	f1c0 0320 	rsb	r3, r0, #32
 800a46a:	fa02 f303 	lsl.w	r3, r2, r3
 800a46e:	430b      	orrs	r3, r1
 800a470:	40c2      	lsrs	r2, r0
 800a472:	6163      	str	r3, [r4, #20]
 800a474:	9201      	str	r2, [sp, #4]
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	61a3      	str	r3, [r4, #24]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	bf14      	ite	ne
 800a47e:	2202      	movne	r2, #2
 800a480:	2201      	moveq	r2, #1
 800a482:	6122      	str	r2, [r4, #16]
 800a484:	b1d5      	cbz	r5, 800a4bc <__d2b+0x98>
 800a486:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a48a:	4405      	add	r5, r0
 800a48c:	f8c9 5000 	str.w	r5, [r9]
 800a490:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a494:	f8c8 0000 	str.w	r0, [r8]
 800a498:	4620      	mov	r0, r4
 800a49a:	b003      	add	sp, #12
 800a49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4a4:	e7d5      	b.n	800a452 <__d2b+0x2e>
 800a4a6:	6161      	str	r1, [r4, #20]
 800a4a8:	e7e5      	b.n	800a476 <__d2b+0x52>
 800a4aa:	a801      	add	r0, sp, #4
 800a4ac:	f7ff fd5a 	bl	8009f64 <__lo0bits>
 800a4b0:	9b01      	ldr	r3, [sp, #4]
 800a4b2:	6163      	str	r3, [r4, #20]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	6122      	str	r2, [r4, #16]
 800a4b8:	3020      	adds	r0, #32
 800a4ba:	e7e3      	b.n	800a484 <__d2b+0x60>
 800a4bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a4c4:	f8c9 0000 	str.w	r0, [r9]
 800a4c8:	6918      	ldr	r0, [r3, #16]
 800a4ca:	f7ff fd2b 	bl	8009f24 <__hi0bits>
 800a4ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4d2:	e7df      	b.n	800a494 <__d2b+0x70>
 800a4d4:	0800bb3f 	.word	0x0800bb3f
 800a4d8:	0800bb50 	.word	0x0800bb50

0800a4dc <_calloc_r>:
 800a4dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4de:	fba1 2402 	umull	r2, r4, r1, r2
 800a4e2:	b94c      	cbnz	r4, 800a4f8 <_calloc_r+0x1c>
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	9201      	str	r2, [sp, #4]
 800a4e8:	f7fe f982 	bl	80087f0 <_malloc_r>
 800a4ec:	9a01      	ldr	r2, [sp, #4]
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	b930      	cbnz	r0, 800a500 <_calloc_r+0x24>
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	b003      	add	sp, #12
 800a4f6:	bd30      	pop	{r4, r5, pc}
 800a4f8:	220c      	movs	r2, #12
 800a4fa:	6002      	str	r2, [r0, #0]
 800a4fc:	2500      	movs	r5, #0
 800a4fe:	e7f8      	b.n	800a4f2 <_calloc_r+0x16>
 800a500:	4621      	mov	r1, r4
 800a502:	f7fe f901 	bl	8008708 <memset>
 800a506:	e7f4      	b.n	800a4f2 <_calloc_r+0x16>

0800a508 <_realloc_r>:
 800a508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50c:	4680      	mov	r8, r0
 800a50e:	4614      	mov	r4, r2
 800a510:	460e      	mov	r6, r1
 800a512:	b921      	cbnz	r1, 800a51e <_realloc_r+0x16>
 800a514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a518:	4611      	mov	r1, r2
 800a51a:	f7fe b969 	b.w	80087f0 <_malloc_r>
 800a51e:	b92a      	cbnz	r2, 800a52c <_realloc_r+0x24>
 800a520:	f7fe f8fa 	bl	8008718 <_free_r>
 800a524:	4625      	mov	r5, r4
 800a526:	4628      	mov	r0, r5
 800a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a52c:	f000 f9d5 	bl	800a8da <_malloc_usable_size_r>
 800a530:	4284      	cmp	r4, r0
 800a532:	4607      	mov	r7, r0
 800a534:	d802      	bhi.n	800a53c <_realloc_r+0x34>
 800a536:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a53a:	d812      	bhi.n	800a562 <_realloc_r+0x5a>
 800a53c:	4621      	mov	r1, r4
 800a53e:	4640      	mov	r0, r8
 800a540:	f7fe f956 	bl	80087f0 <_malloc_r>
 800a544:	4605      	mov	r5, r0
 800a546:	2800      	cmp	r0, #0
 800a548:	d0ed      	beq.n	800a526 <_realloc_r+0x1e>
 800a54a:	42bc      	cmp	r4, r7
 800a54c:	4622      	mov	r2, r4
 800a54e:	4631      	mov	r1, r6
 800a550:	bf28      	it	cs
 800a552:	463a      	movcs	r2, r7
 800a554:	f7fe f8ca 	bl	80086ec <memcpy>
 800a558:	4631      	mov	r1, r6
 800a55a:	4640      	mov	r0, r8
 800a55c:	f7fe f8dc 	bl	8008718 <_free_r>
 800a560:	e7e1      	b.n	800a526 <_realloc_r+0x1e>
 800a562:	4635      	mov	r5, r6
 800a564:	e7df      	b.n	800a526 <_realloc_r+0x1e>

0800a566 <__ssputs_r>:
 800a566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a56a:	688e      	ldr	r6, [r1, #8]
 800a56c:	429e      	cmp	r6, r3
 800a56e:	4682      	mov	sl, r0
 800a570:	460c      	mov	r4, r1
 800a572:	4690      	mov	r8, r2
 800a574:	461f      	mov	r7, r3
 800a576:	d838      	bhi.n	800a5ea <__ssputs_r+0x84>
 800a578:	898a      	ldrh	r2, [r1, #12]
 800a57a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a57e:	d032      	beq.n	800a5e6 <__ssputs_r+0x80>
 800a580:	6825      	ldr	r5, [r4, #0]
 800a582:	6909      	ldr	r1, [r1, #16]
 800a584:	eba5 0901 	sub.w	r9, r5, r1
 800a588:	6965      	ldr	r5, [r4, #20]
 800a58a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a58e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a592:	3301      	adds	r3, #1
 800a594:	444b      	add	r3, r9
 800a596:	106d      	asrs	r5, r5, #1
 800a598:	429d      	cmp	r5, r3
 800a59a:	bf38      	it	cc
 800a59c:	461d      	movcc	r5, r3
 800a59e:	0553      	lsls	r3, r2, #21
 800a5a0:	d531      	bpl.n	800a606 <__ssputs_r+0xa0>
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	f7fe f924 	bl	80087f0 <_malloc_r>
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	b950      	cbnz	r0, 800a5c2 <__ssputs_r+0x5c>
 800a5ac:	230c      	movs	r3, #12
 800a5ae:	f8ca 3000 	str.w	r3, [sl]
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5b8:	81a3      	strh	r3, [r4, #12]
 800a5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c2:	6921      	ldr	r1, [r4, #16]
 800a5c4:	464a      	mov	r2, r9
 800a5c6:	f7fe f891 	bl	80086ec <memcpy>
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d4:	81a3      	strh	r3, [r4, #12]
 800a5d6:	6126      	str	r6, [r4, #16]
 800a5d8:	6165      	str	r5, [r4, #20]
 800a5da:	444e      	add	r6, r9
 800a5dc:	eba5 0509 	sub.w	r5, r5, r9
 800a5e0:	6026      	str	r6, [r4, #0]
 800a5e2:	60a5      	str	r5, [r4, #8]
 800a5e4:	463e      	mov	r6, r7
 800a5e6:	42be      	cmp	r6, r7
 800a5e8:	d900      	bls.n	800a5ec <__ssputs_r+0x86>
 800a5ea:	463e      	mov	r6, r7
 800a5ec:	6820      	ldr	r0, [r4, #0]
 800a5ee:	4632      	mov	r2, r6
 800a5f0:	4641      	mov	r1, r8
 800a5f2:	f000 f958 	bl	800a8a6 <memmove>
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	1b9b      	subs	r3, r3, r6
 800a5fa:	60a3      	str	r3, [r4, #8]
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	4433      	add	r3, r6
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	2000      	movs	r0, #0
 800a604:	e7db      	b.n	800a5be <__ssputs_r+0x58>
 800a606:	462a      	mov	r2, r5
 800a608:	f7ff ff7e 	bl	800a508 <_realloc_r>
 800a60c:	4606      	mov	r6, r0
 800a60e:	2800      	cmp	r0, #0
 800a610:	d1e1      	bne.n	800a5d6 <__ssputs_r+0x70>
 800a612:	6921      	ldr	r1, [r4, #16]
 800a614:	4650      	mov	r0, sl
 800a616:	f7fe f87f 	bl	8008718 <_free_r>
 800a61a:	e7c7      	b.n	800a5ac <__ssputs_r+0x46>

0800a61c <_svfiprintf_r>:
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	4698      	mov	r8, r3
 800a622:	898b      	ldrh	r3, [r1, #12]
 800a624:	061b      	lsls	r3, r3, #24
 800a626:	b09d      	sub	sp, #116	; 0x74
 800a628:	4607      	mov	r7, r0
 800a62a:	460d      	mov	r5, r1
 800a62c:	4614      	mov	r4, r2
 800a62e:	d50e      	bpl.n	800a64e <_svfiprintf_r+0x32>
 800a630:	690b      	ldr	r3, [r1, #16]
 800a632:	b963      	cbnz	r3, 800a64e <_svfiprintf_r+0x32>
 800a634:	2140      	movs	r1, #64	; 0x40
 800a636:	f7fe f8db 	bl	80087f0 <_malloc_r>
 800a63a:	6028      	str	r0, [r5, #0]
 800a63c:	6128      	str	r0, [r5, #16]
 800a63e:	b920      	cbnz	r0, 800a64a <_svfiprintf_r+0x2e>
 800a640:	230c      	movs	r3, #12
 800a642:	603b      	str	r3, [r7, #0]
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	e0d1      	b.n	800a7ee <_svfiprintf_r+0x1d2>
 800a64a:	2340      	movs	r3, #64	; 0x40
 800a64c:	616b      	str	r3, [r5, #20]
 800a64e:	2300      	movs	r3, #0
 800a650:	9309      	str	r3, [sp, #36]	; 0x24
 800a652:	2320      	movs	r3, #32
 800a654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a658:	f8cd 800c 	str.w	r8, [sp, #12]
 800a65c:	2330      	movs	r3, #48	; 0x30
 800a65e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a808 <_svfiprintf_r+0x1ec>
 800a662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a666:	f04f 0901 	mov.w	r9, #1
 800a66a:	4623      	mov	r3, r4
 800a66c:	469a      	mov	sl, r3
 800a66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a672:	b10a      	cbz	r2, 800a678 <_svfiprintf_r+0x5c>
 800a674:	2a25      	cmp	r2, #37	; 0x25
 800a676:	d1f9      	bne.n	800a66c <_svfiprintf_r+0x50>
 800a678:	ebba 0b04 	subs.w	fp, sl, r4
 800a67c:	d00b      	beq.n	800a696 <_svfiprintf_r+0x7a>
 800a67e:	465b      	mov	r3, fp
 800a680:	4622      	mov	r2, r4
 800a682:	4629      	mov	r1, r5
 800a684:	4638      	mov	r0, r7
 800a686:	f7ff ff6e 	bl	800a566 <__ssputs_r>
 800a68a:	3001      	adds	r0, #1
 800a68c:	f000 80aa 	beq.w	800a7e4 <_svfiprintf_r+0x1c8>
 800a690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a692:	445a      	add	r2, fp
 800a694:	9209      	str	r2, [sp, #36]	; 0x24
 800a696:	f89a 3000 	ldrb.w	r3, [sl]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 80a2 	beq.w	800a7e4 <_svfiprintf_r+0x1c8>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6aa:	f10a 0a01 	add.w	sl, sl, #1
 800a6ae:	9304      	str	r3, [sp, #16]
 800a6b0:	9307      	str	r3, [sp, #28]
 800a6b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a6b8:	4654      	mov	r4, sl
 800a6ba:	2205      	movs	r2, #5
 800a6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c0:	4851      	ldr	r0, [pc, #324]	; (800a808 <_svfiprintf_r+0x1ec>)
 800a6c2:	f7f5 fe15 	bl	80002f0 <memchr>
 800a6c6:	9a04      	ldr	r2, [sp, #16]
 800a6c8:	b9d8      	cbnz	r0, 800a702 <_svfiprintf_r+0xe6>
 800a6ca:	06d0      	lsls	r0, r2, #27
 800a6cc:	bf44      	itt	mi
 800a6ce:	2320      	movmi	r3, #32
 800a6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6d4:	0711      	lsls	r1, r2, #28
 800a6d6:	bf44      	itt	mi
 800a6d8:	232b      	movmi	r3, #43	; 0x2b
 800a6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6de:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e4:	d015      	beq.n	800a712 <_svfiprintf_r+0xf6>
 800a6e6:	9a07      	ldr	r2, [sp, #28]
 800a6e8:	4654      	mov	r4, sl
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f04f 0c0a 	mov.w	ip, #10
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6f6:	3b30      	subs	r3, #48	; 0x30
 800a6f8:	2b09      	cmp	r3, #9
 800a6fa:	d94e      	bls.n	800a79a <_svfiprintf_r+0x17e>
 800a6fc:	b1b0      	cbz	r0, 800a72c <_svfiprintf_r+0x110>
 800a6fe:	9207      	str	r2, [sp, #28]
 800a700:	e014      	b.n	800a72c <_svfiprintf_r+0x110>
 800a702:	eba0 0308 	sub.w	r3, r0, r8
 800a706:	fa09 f303 	lsl.w	r3, r9, r3
 800a70a:	4313      	orrs	r3, r2
 800a70c:	9304      	str	r3, [sp, #16]
 800a70e:	46a2      	mov	sl, r4
 800a710:	e7d2      	b.n	800a6b8 <_svfiprintf_r+0x9c>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	1d19      	adds	r1, r3, #4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	9103      	str	r1, [sp, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfbb      	ittet	lt
 800a71e:	425b      	neglt	r3, r3
 800a720:	f042 0202 	orrlt.w	r2, r2, #2
 800a724:	9307      	strge	r3, [sp, #28]
 800a726:	9307      	strlt	r3, [sp, #28]
 800a728:	bfb8      	it	lt
 800a72a:	9204      	strlt	r2, [sp, #16]
 800a72c:	7823      	ldrb	r3, [r4, #0]
 800a72e:	2b2e      	cmp	r3, #46	; 0x2e
 800a730:	d10c      	bne.n	800a74c <_svfiprintf_r+0x130>
 800a732:	7863      	ldrb	r3, [r4, #1]
 800a734:	2b2a      	cmp	r3, #42	; 0x2a
 800a736:	d135      	bne.n	800a7a4 <_svfiprintf_r+0x188>
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	1d1a      	adds	r2, r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	9203      	str	r2, [sp, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	bfb8      	it	lt
 800a744:	f04f 33ff 	movlt.w	r3, #4294967295
 800a748:	3402      	adds	r4, #2
 800a74a:	9305      	str	r3, [sp, #20]
 800a74c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a818 <_svfiprintf_r+0x1fc>
 800a750:	7821      	ldrb	r1, [r4, #0]
 800a752:	2203      	movs	r2, #3
 800a754:	4650      	mov	r0, sl
 800a756:	f7f5 fdcb 	bl	80002f0 <memchr>
 800a75a:	b140      	cbz	r0, 800a76e <_svfiprintf_r+0x152>
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	eba0 000a 	sub.w	r0, r0, sl
 800a762:	fa03 f000 	lsl.w	r0, r3, r0
 800a766:	9b04      	ldr	r3, [sp, #16]
 800a768:	4303      	orrs	r3, r0
 800a76a:	3401      	adds	r4, #1
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a772:	4826      	ldr	r0, [pc, #152]	; (800a80c <_svfiprintf_r+0x1f0>)
 800a774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a778:	2206      	movs	r2, #6
 800a77a:	f7f5 fdb9 	bl	80002f0 <memchr>
 800a77e:	2800      	cmp	r0, #0
 800a780:	d038      	beq.n	800a7f4 <_svfiprintf_r+0x1d8>
 800a782:	4b23      	ldr	r3, [pc, #140]	; (800a810 <_svfiprintf_r+0x1f4>)
 800a784:	bb1b      	cbnz	r3, 800a7ce <_svfiprintf_r+0x1b2>
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	3307      	adds	r3, #7
 800a78a:	f023 0307 	bic.w	r3, r3, #7
 800a78e:	3308      	adds	r3, #8
 800a790:	9303      	str	r3, [sp, #12]
 800a792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a794:	4433      	add	r3, r6
 800a796:	9309      	str	r3, [sp, #36]	; 0x24
 800a798:	e767      	b.n	800a66a <_svfiprintf_r+0x4e>
 800a79a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a79e:	460c      	mov	r4, r1
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	e7a5      	b.n	800a6f0 <_svfiprintf_r+0xd4>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	3401      	adds	r4, #1
 800a7a8:	9305      	str	r3, [sp, #20]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	f04f 0c0a 	mov.w	ip, #10
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7b6:	3a30      	subs	r2, #48	; 0x30
 800a7b8:	2a09      	cmp	r2, #9
 800a7ba:	d903      	bls.n	800a7c4 <_svfiprintf_r+0x1a8>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0c5      	beq.n	800a74c <_svfiprintf_r+0x130>
 800a7c0:	9105      	str	r1, [sp, #20]
 800a7c2:	e7c3      	b.n	800a74c <_svfiprintf_r+0x130>
 800a7c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e7f0      	b.n	800a7b0 <_svfiprintf_r+0x194>
 800a7ce:	ab03      	add	r3, sp, #12
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	462a      	mov	r2, r5
 800a7d4:	4b0f      	ldr	r3, [pc, #60]	; (800a814 <_svfiprintf_r+0x1f8>)
 800a7d6:	a904      	add	r1, sp, #16
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7fe f90d 	bl	80089f8 <_printf_float>
 800a7de:	1c42      	adds	r2, r0, #1
 800a7e0:	4606      	mov	r6, r0
 800a7e2:	d1d6      	bne.n	800a792 <_svfiprintf_r+0x176>
 800a7e4:	89ab      	ldrh	r3, [r5, #12]
 800a7e6:	065b      	lsls	r3, r3, #25
 800a7e8:	f53f af2c 	bmi.w	800a644 <_svfiprintf_r+0x28>
 800a7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ee:	b01d      	add	sp, #116	; 0x74
 800a7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f4:	ab03      	add	r3, sp, #12
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4b06      	ldr	r3, [pc, #24]	; (800a814 <_svfiprintf_r+0x1f8>)
 800a7fc:	a904      	add	r1, sp, #16
 800a7fe:	4638      	mov	r0, r7
 800a800:	f7fe fb86 	bl	8008f10 <_printf_i>
 800a804:	e7eb      	b.n	800a7de <_svfiprintf_r+0x1c2>
 800a806:	bf00      	nop
 800a808:	0800bcac 	.word	0x0800bcac
 800a80c:	0800bcb6 	.word	0x0800bcb6
 800a810:	080089f9 	.word	0x080089f9
 800a814:	0800a567 	.word	0x0800a567
 800a818:	0800bcb2 	.word	0x0800bcb2

0800a81c <__assert_func>:
 800a81c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a81e:	4614      	mov	r4, r2
 800a820:	461a      	mov	r2, r3
 800a822:	4b09      	ldr	r3, [pc, #36]	; (800a848 <__assert_func+0x2c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4605      	mov	r5, r0
 800a828:	68d8      	ldr	r0, [r3, #12]
 800a82a:	b14c      	cbz	r4, 800a840 <__assert_func+0x24>
 800a82c:	4b07      	ldr	r3, [pc, #28]	; (800a84c <__assert_func+0x30>)
 800a82e:	9100      	str	r1, [sp, #0]
 800a830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a834:	4906      	ldr	r1, [pc, #24]	; (800a850 <__assert_func+0x34>)
 800a836:	462b      	mov	r3, r5
 800a838:	f000 f80e 	bl	800a858 <fiprintf>
 800a83c:	f000 fa7c 	bl	800ad38 <abort>
 800a840:	4b04      	ldr	r3, [pc, #16]	; (800a854 <__assert_func+0x38>)
 800a842:	461c      	mov	r4, r3
 800a844:	e7f3      	b.n	800a82e <__assert_func+0x12>
 800a846:	bf00      	nop
 800a848:	240006a4 	.word	0x240006a4
 800a84c:	0800bcbd 	.word	0x0800bcbd
 800a850:	0800bcca 	.word	0x0800bcca
 800a854:	0800bcf8 	.word	0x0800bcf8

0800a858 <fiprintf>:
 800a858:	b40e      	push	{r1, r2, r3}
 800a85a:	b503      	push	{r0, r1, lr}
 800a85c:	4601      	mov	r1, r0
 800a85e:	ab03      	add	r3, sp, #12
 800a860:	4805      	ldr	r0, [pc, #20]	; (800a878 <fiprintf+0x20>)
 800a862:	f853 2b04 	ldr.w	r2, [r3], #4
 800a866:	6800      	ldr	r0, [r0, #0]
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	f000 f867 	bl	800a93c <_vfiprintf_r>
 800a86e:	b002      	add	sp, #8
 800a870:	f85d eb04 	ldr.w	lr, [sp], #4
 800a874:	b003      	add	sp, #12
 800a876:	4770      	bx	lr
 800a878:	240006a4 	.word	0x240006a4

0800a87c <__retarget_lock_init_recursive>:
 800a87c:	4770      	bx	lr

0800a87e <__retarget_lock_acquire_recursive>:
 800a87e:	4770      	bx	lr

0800a880 <__retarget_lock_release_recursive>:
 800a880:	4770      	bx	lr

0800a882 <__ascii_mbtowc>:
 800a882:	b082      	sub	sp, #8
 800a884:	b901      	cbnz	r1, 800a888 <__ascii_mbtowc+0x6>
 800a886:	a901      	add	r1, sp, #4
 800a888:	b142      	cbz	r2, 800a89c <__ascii_mbtowc+0x1a>
 800a88a:	b14b      	cbz	r3, 800a8a0 <__ascii_mbtowc+0x1e>
 800a88c:	7813      	ldrb	r3, [r2, #0]
 800a88e:	600b      	str	r3, [r1, #0]
 800a890:	7812      	ldrb	r2, [r2, #0]
 800a892:	1e10      	subs	r0, r2, #0
 800a894:	bf18      	it	ne
 800a896:	2001      	movne	r0, #1
 800a898:	b002      	add	sp, #8
 800a89a:	4770      	bx	lr
 800a89c:	4610      	mov	r0, r2
 800a89e:	e7fb      	b.n	800a898 <__ascii_mbtowc+0x16>
 800a8a0:	f06f 0001 	mvn.w	r0, #1
 800a8a4:	e7f8      	b.n	800a898 <__ascii_mbtowc+0x16>

0800a8a6 <memmove>:
 800a8a6:	4288      	cmp	r0, r1
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	eb01 0402 	add.w	r4, r1, r2
 800a8ae:	d902      	bls.n	800a8b6 <memmove+0x10>
 800a8b0:	4284      	cmp	r4, r0
 800a8b2:	4623      	mov	r3, r4
 800a8b4:	d807      	bhi.n	800a8c6 <memmove+0x20>
 800a8b6:	1e43      	subs	r3, r0, #1
 800a8b8:	42a1      	cmp	r1, r4
 800a8ba:	d008      	beq.n	800a8ce <memmove+0x28>
 800a8bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8c4:	e7f8      	b.n	800a8b8 <memmove+0x12>
 800a8c6:	4402      	add	r2, r0
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	428a      	cmp	r2, r1
 800a8cc:	d100      	bne.n	800a8d0 <memmove+0x2a>
 800a8ce:	bd10      	pop	{r4, pc}
 800a8d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8d8:	e7f7      	b.n	800a8ca <memmove+0x24>

0800a8da <_malloc_usable_size_r>:
 800a8da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8de:	1f18      	subs	r0, r3, #4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bfbc      	itt	lt
 800a8e4:	580b      	ldrlt	r3, [r1, r0]
 800a8e6:	18c0      	addlt	r0, r0, r3
 800a8e8:	4770      	bx	lr

0800a8ea <__sfputc_r>:
 800a8ea:	6893      	ldr	r3, [r2, #8]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	b410      	push	{r4}
 800a8f2:	6093      	str	r3, [r2, #8]
 800a8f4:	da08      	bge.n	800a908 <__sfputc_r+0x1e>
 800a8f6:	6994      	ldr	r4, [r2, #24]
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	db01      	blt.n	800a900 <__sfputc_r+0x16>
 800a8fc:	290a      	cmp	r1, #10
 800a8fe:	d103      	bne.n	800a908 <__sfputc_r+0x1e>
 800a900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a904:	f000 b94a 	b.w	800ab9c <__swbuf_r>
 800a908:	6813      	ldr	r3, [r2, #0]
 800a90a:	1c58      	adds	r0, r3, #1
 800a90c:	6010      	str	r0, [r2, #0]
 800a90e:	7019      	strb	r1, [r3, #0]
 800a910:	4608      	mov	r0, r1
 800a912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <__sfputs_r>:
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91a:	4606      	mov	r6, r0
 800a91c:	460f      	mov	r7, r1
 800a91e:	4614      	mov	r4, r2
 800a920:	18d5      	adds	r5, r2, r3
 800a922:	42ac      	cmp	r4, r5
 800a924:	d101      	bne.n	800a92a <__sfputs_r+0x12>
 800a926:	2000      	movs	r0, #0
 800a928:	e007      	b.n	800a93a <__sfputs_r+0x22>
 800a92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92e:	463a      	mov	r2, r7
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff ffda 	bl	800a8ea <__sfputc_r>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	d1f3      	bne.n	800a922 <__sfputs_r+0xa>
 800a93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a93c <_vfiprintf_r>:
 800a93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a940:	460d      	mov	r5, r1
 800a942:	b09d      	sub	sp, #116	; 0x74
 800a944:	4614      	mov	r4, r2
 800a946:	4698      	mov	r8, r3
 800a948:	4606      	mov	r6, r0
 800a94a:	b118      	cbz	r0, 800a954 <_vfiprintf_r+0x18>
 800a94c:	6983      	ldr	r3, [r0, #24]
 800a94e:	b90b      	cbnz	r3, 800a954 <_vfiprintf_r+0x18>
 800a950:	f000 fb14 	bl	800af7c <__sinit>
 800a954:	4b89      	ldr	r3, [pc, #548]	; (800ab7c <_vfiprintf_r+0x240>)
 800a956:	429d      	cmp	r5, r3
 800a958:	d11b      	bne.n	800a992 <_vfiprintf_r+0x56>
 800a95a:	6875      	ldr	r5, [r6, #4]
 800a95c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a95e:	07d9      	lsls	r1, r3, #31
 800a960:	d405      	bmi.n	800a96e <_vfiprintf_r+0x32>
 800a962:	89ab      	ldrh	r3, [r5, #12]
 800a964:	059a      	lsls	r2, r3, #22
 800a966:	d402      	bmi.n	800a96e <_vfiprintf_r+0x32>
 800a968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a96a:	f7ff ff88 	bl	800a87e <__retarget_lock_acquire_recursive>
 800a96e:	89ab      	ldrh	r3, [r5, #12]
 800a970:	071b      	lsls	r3, r3, #28
 800a972:	d501      	bpl.n	800a978 <_vfiprintf_r+0x3c>
 800a974:	692b      	ldr	r3, [r5, #16]
 800a976:	b9eb      	cbnz	r3, 800a9b4 <_vfiprintf_r+0x78>
 800a978:	4629      	mov	r1, r5
 800a97a:	4630      	mov	r0, r6
 800a97c:	f000 f96e 	bl	800ac5c <__swsetup_r>
 800a980:	b1c0      	cbz	r0, 800a9b4 <_vfiprintf_r+0x78>
 800a982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a984:	07dc      	lsls	r4, r3, #31
 800a986:	d50e      	bpl.n	800a9a6 <_vfiprintf_r+0x6a>
 800a988:	f04f 30ff 	mov.w	r0, #4294967295
 800a98c:	b01d      	add	sp, #116	; 0x74
 800a98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a992:	4b7b      	ldr	r3, [pc, #492]	; (800ab80 <_vfiprintf_r+0x244>)
 800a994:	429d      	cmp	r5, r3
 800a996:	d101      	bne.n	800a99c <_vfiprintf_r+0x60>
 800a998:	68b5      	ldr	r5, [r6, #8]
 800a99a:	e7df      	b.n	800a95c <_vfiprintf_r+0x20>
 800a99c:	4b79      	ldr	r3, [pc, #484]	; (800ab84 <_vfiprintf_r+0x248>)
 800a99e:	429d      	cmp	r5, r3
 800a9a0:	bf08      	it	eq
 800a9a2:	68f5      	ldreq	r5, [r6, #12]
 800a9a4:	e7da      	b.n	800a95c <_vfiprintf_r+0x20>
 800a9a6:	89ab      	ldrh	r3, [r5, #12]
 800a9a8:	0598      	lsls	r0, r3, #22
 800a9aa:	d4ed      	bmi.n	800a988 <_vfiprintf_r+0x4c>
 800a9ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ae:	f7ff ff67 	bl	800a880 <__retarget_lock_release_recursive>
 800a9b2:	e7e9      	b.n	800a988 <_vfiprintf_r+0x4c>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b8:	2320      	movs	r3, #32
 800a9ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9be:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9c2:	2330      	movs	r3, #48	; 0x30
 800a9c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab88 <_vfiprintf_r+0x24c>
 800a9c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9cc:	f04f 0901 	mov.w	r9, #1
 800a9d0:	4623      	mov	r3, r4
 800a9d2:	469a      	mov	sl, r3
 800a9d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9d8:	b10a      	cbz	r2, 800a9de <_vfiprintf_r+0xa2>
 800a9da:	2a25      	cmp	r2, #37	; 0x25
 800a9dc:	d1f9      	bne.n	800a9d2 <_vfiprintf_r+0x96>
 800a9de:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e2:	d00b      	beq.n	800a9fc <_vfiprintf_r+0xc0>
 800a9e4:	465b      	mov	r3, fp
 800a9e6:	4622      	mov	r2, r4
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f7ff ff94 	bl	800a918 <__sfputs_r>
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	f000 80aa 	beq.w	800ab4a <_vfiprintf_r+0x20e>
 800a9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9f8:	445a      	add	r2, fp
 800a9fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 80a2 	beq.w	800ab4a <_vfiprintf_r+0x20e>
 800aa06:	2300      	movs	r3, #0
 800aa08:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa10:	f10a 0a01 	add.w	sl, sl, #1
 800aa14:	9304      	str	r3, [sp, #16]
 800aa16:	9307      	str	r3, [sp, #28]
 800aa18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa1c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa1e:	4654      	mov	r4, sl
 800aa20:	2205      	movs	r2, #5
 800aa22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa26:	4858      	ldr	r0, [pc, #352]	; (800ab88 <_vfiprintf_r+0x24c>)
 800aa28:	f7f5 fc62 	bl	80002f0 <memchr>
 800aa2c:	9a04      	ldr	r2, [sp, #16]
 800aa2e:	b9d8      	cbnz	r0, 800aa68 <_vfiprintf_r+0x12c>
 800aa30:	06d1      	lsls	r1, r2, #27
 800aa32:	bf44      	itt	mi
 800aa34:	2320      	movmi	r3, #32
 800aa36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa3a:	0713      	lsls	r3, r2, #28
 800aa3c:	bf44      	itt	mi
 800aa3e:	232b      	movmi	r3, #43	; 0x2b
 800aa40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa44:	f89a 3000 	ldrb.w	r3, [sl]
 800aa48:	2b2a      	cmp	r3, #42	; 0x2a
 800aa4a:	d015      	beq.n	800aa78 <_vfiprintf_r+0x13c>
 800aa4c:	9a07      	ldr	r2, [sp, #28]
 800aa4e:	4654      	mov	r4, sl
 800aa50:	2000      	movs	r0, #0
 800aa52:	f04f 0c0a 	mov.w	ip, #10
 800aa56:	4621      	mov	r1, r4
 800aa58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa5c:	3b30      	subs	r3, #48	; 0x30
 800aa5e:	2b09      	cmp	r3, #9
 800aa60:	d94e      	bls.n	800ab00 <_vfiprintf_r+0x1c4>
 800aa62:	b1b0      	cbz	r0, 800aa92 <_vfiprintf_r+0x156>
 800aa64:	9207      	str	r2, [sp, #28]
 800aa66:	e014      	b.n	800aa92 <_vfiprintf_r+0x156>
 800aa68:	eba0 0308 	sub.w	r3, r0, r8
 800aa6c:	fa09 f303 	lsl.w	r3, r9, r3
 800aa70:	4313      	orrs	r3, r2
 800aa72:	9304      	str	r3, [sp, #16]
 800aa74:	46a2      	mov	sl, r4
 800aa76:	e7d2      	b.n	800aa1e <_vfiprintf_r+0xe2>
 800aa78:	9b03      	ldr	r3, [sp, #12]
 800aa7a:	1d19      	adds	r1, r3, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	9103      	str	r1, [sp, #12]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	bfbb      	ittet	lt
 800aa84:	425b      	neglt	r3, r3
 800aa86:	f042 0202 	orrlt.w	r2, r2, #2
 800aa8a:	9307      	strge	r3, [sp, #28]
 800aa8c:	9307      	strlt	r3, [sp, #28]
 800aa8e:	bfb8      	it	lt
 800aa90:	9204      	strlt	r2, [sp, #16]
 800aa92:	7823      	ldrb	r3, [r4, #0]
 800aa94:	2b2e      	cmp	r3, #46	; 0x2e
 800aa96:	d10c      	bne.n	800aab2 <_vfiprintf_r+0x176>
 800aa98:	7863      	ldrb	r3, [r4, #1]
 800aa9a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa9c:	d135      	bne.n	800ab0a <_vfiprintf_r+0x1ce>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	1d1a      	adds	r2, r3, #4
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	9203      	str	r2, [sp, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfb8      	it	lt
 800aaaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaae:	3402      	adds	r4, #2
 800aab0:	9305      	str	r3, [sp, #20]
 800aab2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab98 <_vfiprintf_r+0x25c>
 800aab6:	7821      	ldrb	r1, [r4, #0]
 800aab8:	2203      	movs	r2, #3
 800aaba:	4650      	mov	r0, sl
 800aabc:	f7f5 fc18 	bl	80002f0 <memchr>
 800aac0:	b140      	cbz	r0, 800aad4 <_vfiprintf_r+0x198>
 800aac2:	2340      	movs	r3, #64	; 0x40
 800aac4:	eba0 000a 	sub.w	r0, r0, sl
 800aac8:	fa03 f000 	lsl.w	r0, r3, r0
 800aacc:	9b04      	ldr	r3, [sp, #16]
 800aace:	4303      	orrs	r3, r0
 800aad0:	3401      	adds	r4, #1
 800aad2:	9304      	str	r3, [sp, #16]
 800aad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad8:	482c      	ldr	r0, [pc, #176]	; (800ab8c <_vfiprintf_r+0x250>)
 800aada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aade:	2206      	movs	r2, #6
 800aae0:	f7f5 fc06 	bl	80002f0 <memchr>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d03f      	beq.n	800ab68 <_vfiprintf_r+0x22c>
 800aae8:	4b29      	ldr	r3, [pc, #164]	; (800ab90 <_vfiprintf_r+0x254>)
 800aaea:	bb1b      	cbnz	r3, 800ab34 <_vfiprintf_r+0x1f8>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	3307      	adds	r3, #7
 800aaf0:	f023 0307 	bic.w	r3, r3, #7
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	9303      	str	r3, [sp, #12]
 800aaf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafa:	443b      	add	r3, r7
 800aafc:	9309      	str	r3, [sp, #36]	; 0x24
 800aafe:	e767      	b.n	800a9d0 <_vfiprintf_r+0x94>
 800ab00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab04:	460c      	mov	r4, r1
 800ab06:	2001      	movs	r0, #1
 800ab08:	e7a5      	b.n	800aa56 <_vfiprintf_r+0x11a>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	3401      	adds	r4, #1
 800ab0e:	9305      	str	r3, [sp, #20]
 800ab10:	4619      	mov	r1, r3
 800ab12:	f04f 0c0a 	mov.w	ip, #10
 800ab16:	4620      	mov	r0, r4
 800ab18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab1c:	3a30      	subs	r2, #48	; 0x30
 800ab1e:	2a09      	cmp	r2, #9
 800ab20:	d903      	bls.n	800ab2a <_vfiprintf_r+0x1ee>
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0c5      	beq.n	800aab2 <_vfiprintf_r+0x176>
 800ab26:	9105      	str	r1, [sp, #20]
 800ab28:	e7c3      	b.n	800aab2 <_vfiprintf_r+0x176>
 800ab2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab2e:	4604      	mov	r4, r0
 800ab30:	2301      	movs	r3, #1
 800ab32:	e7f0      	b.n	800ab16 <_vfiprintf_r+0x1da>
 800ab34:	ab03      	add	r3, sp, #12
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	462a      	mov	r2, r5
 800ab3a:	4b16      	ldr	r3, [pc, #88]	; (800ab94 <_vfiprintf_r+0x258>)
 800ab3c:	a904      	add	r1, sp, #16
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f7fd ff5a 	bl	80089f8 <_printf_float>
 800ab44:	4607      	mov	r7, r0
 800ab46:	1c78      	adds	r0, r7, #1
 800ab48:	d1d6      	bne.n	800aaf8 <_vfiprintf_r+0x1bc>
 800ab4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab4c:	07d9      	lsls	r1, r3, #31
 800ab4e:	d405      	bmi.n	800ab5c <_vfiprintf_r+0x220>
 800ab50:	89ab      	ldrh	r3, [r5, #12]
 800ab52:	059a      	lsls	r2, r3, #22
 800ab54:	d402      	bmi.n	800ab5c <_vfiprintf_r+0x220>
 800ab56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab58:	f7ff fe92 	bl	800a880 <__retarget_lock_release_recursive>
 800ab5c:	89ab      	ldrh	r3, [r5, #12]
 800ab5e:	065b      	lsls	r3, r3, #25
 800ab60:	f53f af12 	bmi.w	800a988 <_vfiprintf_r+0x4c>
 800ab64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab66:	e711      	b.n	800a98c <_vfiprintf_r+0x50>
 800ab68:	ab03      	add	r3, sp, #12
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	462a      	mov	r2, r5
 800ab6e:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <_vfiprintf_r+0x258>)
 800ab70:	a904      	add	r1, sp, #16
 800ab72:	4630      	mov	r0, r6
 800ab74:	f7fe f9cc 	bl	8008f10 <_printf_i>
 800ab78:	e7e4      	b.n	800ab44 <_vfiprintf_r+0x208>
 800ab7a:	bf00      	nop
 800ab7c:	0800be24 	.word	0x0800be24
 800ab80:	0800be44 	.word	0x0800be44
 800ab84:	0800be04 	.word	0x0800be04
 800ab88:	0800bcac 	.word	0x0800bcac
 800ab8c:	0800bcb6 	.word	0x0800bcb6
 800ab90:	080089f9 	.word	0x080089f9
 800ab94:	0800a919 	.word	0x0800a919
 800ab98:	0800bcb2 	.word	0x0800bcb2

0800ab9c <__swbuf_r>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	460e      	mov	r6, r1
 800aba0:	4614      	mov	r4, r2
 800aba2:	4605      	mov	r5, r0
 800aba4:	b118      	cbz	r0, 800abae <__swbuf_r+0x12>
 800aba6:	6983      	ldr	r3, [r0, #24]
 800aba8:	b90b      	cbnz	r3, 800abae <__swbuf_r+0x12>
 800abaa:	f000 f9e7 	bl	800af7c <__sinit>
 800abae:	4b21      	ldr	r3, [pc, #132]	; (800ac34 <__swbuf_r+0x98>)
 800abb0:	429c      	cmp	r4, r3
 800abb2:	d12b      	bne.n	800ac0c <__swbuf_r+0x70>
 800abb4:	686c      	ldr	r4, [r5, #4]
 800abb6:	69a3      	ldr	r3, [r4, #24]
 800abb8:	60a3      	str	r3, [r4, #8]
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	071a      	lsls	r2, r3, #28
 800abbe:	d52f      	bpl.n	800ac20 <__swbuf_r+0x84>
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	b36b      	cbz	r3, 800ac20 <__swbuf_r+0x84>
 800abc4:	6923      	ldr	r3, [r4, #16]
 800abc6:	6820      	ldr	r0, [r4, #0]
 800abc8:	1ac0      	subs	r0, r0, r3
 800abca:	6963      	ldr	r3, [r4, #20]
 800abcc:	b2f6      	uxtb	r6, r6
 800abce:	4283      	cmp	r3, r0
 800abd0:	4637      	mov	r7, r6
 800abd2:	dc04      	bgt.n	800abde <__swbuf_r+0x42>
 800abd4:	4621      	mov	r1, r4
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 f93c 	bl	800ae54 <_fflush_r>
 800abdc:	bb30      	cbnz	r0, 800ac2c <__swbuf_r+0x90>
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	3b01      	subs	r3, #1
 800abe2:	60a3      	str	r3, [r4, #8]
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	6022      	str	r2, [r4, #0]
 800abea:	701e      	strb	r6, [r3, #0]
 800abec:	6963      	ldr	r3, [r4, #20]
 800abee:	3001      	adds	r0, #1
 800abf0:	4283      	cmp	r3, r0
 800abf2:	d004      	beq.n	800abfe <__swbuf_r+0x62>
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	07db      	lsls	r3, r3, #31
 800abf8:	d506      	bpl.n	800ac08 <__swbuf_r+0x6c>
 800abfa:	2e0a      	cmp	r6, #10
 800abfc:	d104      	bne.n	800ac08 <__swbuf_r+0x6c>
 800abfe:	4621      	mov	r1, r4
 800ac00:	4628      	mov	r0, r5
 800ac02:	f000 f927 	bl	800ae54 <_fflush_r>
 800ac06:	b988      	cbnz	r0, 800ac2c <__swbuf_r+0x90>
 800ac08:	4638      	mov	r0, r7
 800ac0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <__swbuf_r+0x9c>)
 800ac0e:	429c      	cmp	r4, r3
 800ac10:	d101      	bne.n	800ac16 <__swbuf_r+0x7a>
 800ac12:	68ac      	ldr	r4, [r5, #8]
 800ac14:	e7cf      	b.n	800abb6 <__swbuf_r+0x1a>
 800ac16:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <__swbuf_r+0xa0>)
 800ac18:	429c      	cmp	r4, r3
 800ac1a:	bf08      	it	eq
 800ac1c:	68ec      	ldreq	r4, [r5, #12]
 800ac1e:	e7ca      	b.n	800abb6 <__swbuf_r+0x1a>
 800ac20:	4621      	mov	r1, r4
 800ac22:	4628      	mov	r0, r5
 800ac24:	f000 f81a 	bl	800ac5c <__swsetup_r>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d0cb      	beq.n	800abc4 <__swbuf_r+0x28>
 800ac2c:	f04f 37ff 	mov.w	r7, #4294967295
 800ac30:	e7ea      	b.n	800ac08 <__swbuf_r+0x6c>
 800ac32:	bf00      	nop
 800ac34:	0800be24 	.word	0x0800be24
 800ac38:	0800be44 	.word	0x0800be44
 800ac3c:	0800be04 	.word	0x0800be04

0800ac40 <__ascii_wctomb>:
 800ac40:	b149      	cbz	r1, 800ac56 <__ascii_wctomb+0x16>
 800ac42:	2aff      	cmp	r2, #255	; 0xff
 800ac44:	bf85      	ittet	hi
 800ac46:	238a      	movhi	r3, #138	; 0x8a
 800ac48:	6003      	strhi	r3, [r0, #0]
 800ac4a:	700a      	strbls	r2, [r1, #0]
 800ac4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac50:	bf98      	it	ls
 800ac52:	2001      	movls	r0, #1
 800ac54:	4770      	bx	lr
 800ac56:	4608      	mov	r0, r1
 800ac58:	4770      	bx	lr
	...

0800ac5c <__swsetup_r>:
 800ac5c:	4b32      	ldr	r3, [pc, #200]	; (800ad28 <__swsetup_r+0xcc>)
 800ac5e:	b570      	push	{r4, r5, r6, lr}
 800ac60:	681d      	ldr	r5, [r3, #0]
 800ac62:	4606      	mov	r6, r0
 800ac64:	460c      	mov	r4, r1
 800ac66:	b125      	cbz	r5, 800ac72 <__swsetup_r+0x16>
 800ac68:	69ab      	ldr	r3, [r5, #24]
 800ac6a:	b913      	cbnz	r3, 800ac72 <__swsetup_r+0x16>
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f000 f985 	bl	800af7c <__sinit>
 800ac72:	4b2e      	ldr	r3, [pc, #184]	; (800ad2c <__swsetup_r+0xd0>)
 800ac74:	429c      	cmp	r4, r3
 800ac76:	d10f      	bne.n	800ac98 <__swsetup_r+0x3c>
 800ac78:	686c      	ldr	r4, [r5, #4]
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac80:	0719      	lsls	r1, r3, #28
 800ac82:	d42c      	bmi.n	800acde <__swsetup_r+0x82>
 800ac84:	06dd      	lsls	r5, r3, #27
 800ac86:	d411      	bmi.n	800acac <__swsetup_r+0x50>
 800ac88:	2309      	movs	r3, #9
 800ac8a:	6033      	str	r3, [r6, #0]
 800ac8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	f04f 30ff 	mov.w	r0, #4294967295
 800ac96:	e03e      	b.n	800ad16 <__swsetup_r+0xba>
 800ac98:	4b25      	ldr	r3, [pc, #148]	; (800ad30 <__swsetup_r+0xd4>)
 800ac9a:	429c      	cmp	r4, r3
 800ac9c:	d101      	bne.n	800aca2 <__swsetup_r+0x46>
 800ac9e:	68ac      	ldr	r4, [r5, #8]
 800aca0:	e7eb      	b.n	800ac7a <__swsetup_r+0x1e>
 800aca2:	4b24      	ldr	r3, [pc, #144]	; (800ad34 <__swsetup_r+0xd8>)
 800aca4:	429c      	cmp	r4, r3
 800aca6:	bf08      	it	eq
 800aca8:	68ec      	ldreq	r4, [r5, #12]
 800acaa:	e7e6      	b.n	800ac7a <__swsetup_r+0x1e>
 800acac:	0758      	lsls	r0, r3, #29
 800acae:	d512      	bpl.n	800acd6 <__swsetup_r+0x7a>
 800acb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acb2:	b141      	cbz	r1, 800acc6 <__swsetup_r+0x6a>
 800acb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acb8:	4299      	cmp	r1, r3
 800acba:	d002      	beq.n	800acc2 <__swsetup_r+0x66>
 800acbc:	4630      	mov	r0, r6
 800acbe:	f7fd fd2b 	bl	8008718 <_free_r>
 800acc2:	2300      	movs	r3, #0
 800acc4:	6363      	str	r3, [r4, #52]	; 0x34
 800acc6:	89a3      	ldrh	r3, [r4, #12]
 800acc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800accc:	81a3      	strh	r3, [r4, #12]
 800acce:	2300      	movs	r3, #0
 800acd0:	6063      	str	r3, [r4, #4]
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	f043 0308 	orr.w	r3, r3, #8
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	6923      	ldr	r3, [r4, #16]
 800ace0:	b94b      	cbnz	r3, 800acf6 <__swsetup_r+0x9a>
 800ace2:	89a3      	ldrh	r3, [r4, #12]
 800ace4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ace8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acec:	d003      	beq.n	800acf6 <__swsetup_r+0x9a>
 800acee:	4621      	mov	r1, r4
 800acf0:	4630      	mov	r0, r6
 800acf2:	f000 fa05 	bl	800b100 <__smakebuf_r>
 800acf6:	89a0      	ldrh	r0, [r4, #12]
 800acf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acfc:	f010 0301 	ands.w	r3, r0, #1
 800ad00:	d00a      	beq.n	800ad18 <__swsetup_r+0xbc>
 800ad02:	2300      	movs	r3, #0
 800ad04:	60a3      	str	r3, [r4, #8]
 800ad06:	6963      	ldr	r3, [r4, #20]
 800ad08:	425b      	negs	r3, r3
 800ad0a:	61a3      	str	r3, [r4, #24]
 800ad0c:	6923      	ldr	r3, [r4, #16]
 800ad0e:	b943      	cbnz	r3, 800ad22 <__swsetup_r+0xc6>
 800ad10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad14:	d1ba      	bne.n	800ac8c <__swsetup_r+0x30>
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
 800ad18:	0781      	lsls	r1, r0, #30
 800ad1a:	bf58      	it	pl
 800ad1c:	6963      	ldrpl	r3, [r4, #20]
 800ad1e:	60a3      	str	r3, [r4, #8]
 800ad20:	e7f4      	b.n	800ad0c <__swsetup_r+0xb0>
 800ad22:	2000      	movs	r0, #0
 800ad24:	e7f7      	b.n	800ad16 <__swsetup_r+0xba>
 800ad26:	bf00      	nop
 800ad28:	240006a4 	.word	0x240006a4
 800ad2c:	0800be24 	.word	0x0800be24
 800ad30:	0800be44 	.word	0x0800be44
 800ad34:	0800be04 	.word	0x0800be04

0800ad38 <abort>:
 800ad38:	b508      	push	{r3, lr}
 800ad3a:	2006      	movs	r0, #6
 800ad3c:	f000 fa48 	bl	800b1d0 <raise>
 800ad40:	2001      	movs	r0, #1
 800ad42:	f000 fb4d 	bl	800b3e0 <_exit>
	...

0800ad48 <__sflush_r>:
 800ad48:	898a      	ldrh	r2, [r1, #12]
 800ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4e:	4605      	mov	r5, r0
 800ad50:	0710      	lsls	r0, r2, #28
 800ad52:	460c      	mov	r4, r1
 800ad54:	d458      	bmi.n	800ae08 <__sflush_r+0xc0>
 800ad56:	684b      	ldr	r3, [r1, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dc05      	bgt.n	800ad68 <__sflush_r+0x20>
 800ad5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	dc02      	bgt.n	800ad68 <__sflush_r+0x20>
 800ad62:	2000      	movs	r0, #0
 800ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad6a:	2e00      	cmp	r6, #0
 800ad6c:	d0f9      	beq.n	800ad62 <__sflush_r+0x1a>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad74:	682f      	ldr	r7, [r5, #0]
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	d032      	beq.n	800ade0 <__sflush_r+0x98>
 800ad7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	075a      	lsls	r2, r3, #29
 800ad80:	d505      	bpl.n	800ad8e <__sflush_r+0x46>
 800ad82:	6863      	ldr	r3, [r4, #4]
 800ad84:	1ac0      	subs	r0, r0, r3
 800ad86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad88:	b10b      	cbz	r3, 800ad8e <__sflush_r+0x46>
 800ad8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad8c:	1ac0      	subs	r0, r0, r3
 800ad8e:	2300      	movs	r3, #0
 800ad90:	4602      	mov	r2, r0
 800ad92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad94:	6a21      	ldr	r1, [r4, #32]
 800ad96:	4628      	mov	r0, r5
 800ad98:	47b0      	blx	r6
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	d106      	bne.n	800adae <__sflush_r+0x66>
 800ada0:	6829      	ldr	r1, [r5, #0]
 800ada2:	291d      	cmp	r1, #29
 800ada4:	d82c      	bhi.n	800ae00 <__sflush_r+0xb8>
 800ada6:	4a2a      	ldr	r2, [pc, #168]	; (800ae50 <__sflush_r+0x108>)
 800ada8:	40ca      	lsrs	r2, r1
 800adaa:	07d6      	lsls	r6, r2, #31
 800adac:	d528      	bpl.n	800ae00 <__sflush_r+0xb8>
 800adae:	2200      	movs	r2, #0
 800adb0:	6062      	str	r2, [r4, #4]
 800adb2:	04d9      	lsls	r1, r3, #19
 800adb4:	6922      	ldr	r2, [r4, #16]
 800adb6:	6022      	str	r2, [r4, #0]
 800adb8:	d504      	bpl.n	800adc4 <__sflush_r+0x7c>
 800adba:	1c42      	adds	r2, r0, #1
 800adbc:	d101      	bne.n	800adc2 <__sflush_r+0x7a>
 800adbe:	682b      	ldr	r3, [r5, #0]
 800adc0:	b903      	cbnz	r3, 800adc4 <__sflush_r+0x7c>
 800adc2:	6560      	str	r0, [r4, #84]	; 0x54
 800adc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adc6:	602f      	str	r7, [r5, #0]
 800adc8:	2900      	cmp	r1, #0
 800adca:	d0ca      	beq.n	800ad62 <__sflush_r+0x1a>
 800adcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800add0:	4299      	cmp	r1, r3
 800add2:	d002      	beq.n	800adda <__sflush_r+0x92>
 800add4:	4628      	mov	r0, r5
 800add6:	f7fd fc9f 	bl	8008718 <_free_r>
 800adda:	2000      	movs	r0, #0
 800addc:	6360      	str	r0, [r4, #52]	; 0x34
 800adde:	e7c1      	b.n	800ad64 <__sflush_r+0x1c>
 800ade0:	6a21      	ldr	r1, [r4, #32]
 800ade2:	2301      	movs	r3, #1
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b0      	blx	r6
 800ade8:	1c41      	adds	r1, r0, #1
 800adea:	d1c7      	bne.n	800ad7c <__sflush_r+0x34>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0c4      	beq.n	800ad7c <__sflush_r+0x34>
 800adf2:	2b1d      	cmp	r3, #29
 800adf4:	d001      	beq.n	800adfa <__sflush_r+0xb2>
 800adf6:	2b16      	cmp	r3, #22
 800adf8:	d101      	bne.n	800adfe <__sflush_r+0xb6>
 800adfa:	602f      	str	r7, [r5, #0]
 800adfc:	e7b1      	b.n	800ad62 <__sflush_r+0x1a>
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae04:	81a3      	strh	r3, [r4, #12]
 800ae06:	e7ad      	b.n	800ad64 <__sflush_r+0x1c>
 800ae08:	690f      	ldr	r7, [r1, #16]
 800ae0a:	2f00      	cmp	r7, #0
 800ae0c:	d0a9      	beq.n	800ad62 <__sflush_r+0x1a>
 800ae0e:	0793      	lsls	r3, r2, #30
 800ae10:	680e      	ldr	r6, [r1, #0]
 800ae12:	bf08      	it	eq
 800ae14:	694b      	ldreq	r3, [r1, #20]
 800ae16:	600f      	str	r7, [r1, #0]
 800ae18:	bf18      	it	ne
 800ae1a:	2300      	movne	r3, #0
 800ae1c:	eba6 0807 	sub.w	r8, r6, r7
 800ae20:	608b      	str	r3, [r1, #8]
 800ae22:	f1b8 0f00 	cmp.w	r8, #0
 800ae26:	dd9c      	ble.n	800ad62 <__sflush_r+0x1a>
 800ae28:	6a21      	ldr	r1, [r4, #32]
 800ae2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae2c:	4643      	mov	r3, r8
 800ae2e:	463a      	mov	r2, r7
 800ae30:	4628      	mov	r0, r5
 800ae32:	47b0      	blx	r6
 800ae34:	2800      	cmp	r0, #0
 800ae36:	dc06      	bgt.n	800ae46 <__sflush_r+0xfe>
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295
 800ae44:	e78e      	b.n	800ad64 <__sflush_r+0x1c>
 800ae46:	4407      	add	r7, r0
 800ae48:	eba8 0800 	sub.w	r8, r8, r0
 800ae4c:	e7e9      	b.n	800ae22 <__sflush_r+0xda>
 800ae4e:	bf00      	nop
 800ae50:	20400001 	.word	0x20400001

0800ae54 <_fflush_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	690b      	ldr	r3, [r1, #16]
 800ae58:	4605      	mov	r5, r0
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	b913      	cbnz	r3, 800ae64 <_fflush_r+0x10>
 800ae5e:	2500      	movs	r5, #0
 800ae60:	4628      	mov	r0, r5
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	b118      	cbz	r0, 800ae6e <_fflush_r+0x1a>
 800ae66:	6983      	ldr	r3, [r0, #24]
 800ae68:	b90b      	cbnz	r3, 800ae6e <_fflush_r+0x1a>
 800ae6a:	f000 f887 	bl	800af7c <__sinit>
 800ae6e:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <_fflush_r+0x6c>)
 800ae70:	429c      	cmp	r4, r3
 800ae72:	d11b      	bne.n	800aeac <_fflush_r+0x58>
 800ae74:	686c      	ldr	r4, [r5, #4]
 800ae76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0ef      	beq.n	800ae5e <_fflush_r+0xa>
 800ae7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae80:	07d0      	lsls	r0, r2, #31
 800ae82:	d404      	bmi.n	800ae8e <_fflush_r+0x3a>
 800ae84:	0599      	lsls	r1, r3, #22
 800ae86:	d402      	bmi.n	800ae8e <_fflush_r+0x3a>
 800ae88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae8a:	f7ff fcf8 	bl	800a87e <__retarget_lock_acquire_recursive>
 800ae8e:	4628      	mov	r0, r5
 800ae90:	4621      	mov	r1, r4
 800ae92:	f7ff ff59 	bl	800ad48 <__sflush_r>
 800ae96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae98:	07da      	lsls	r2, r3, #31
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	d4e0      	bmi.n	800ae60 <_fflush_r+0xc>
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	059b      	lsls	r3, r3, #22
 800aea2:	d4dd      	bmi.n	800ae60 <_fflush_r+0xc>
 800aea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aea6:	f7ff fceb 	bl	800a880 <__retarget_lock_release_recursive>
 800aeaa:	e7d9      	b.n	800ae60 <_fflush_r+0xc>
 800aeac:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <_fflush_r+0x70>)
 800aeae:	429c      	cmp	r4, r3
 800aeb0:	d101      	bne.n	800aeb6 <_fflush_r+0x62>
 800aeb2:	68ac      	ldr	r4, [r5, #8]
 800aeb4:	e7df      	b.n	800ae76 <_fflush_r+0x22>
 800aeb6:	4b04      	ldr	r3, [pc, #16]	; (800aec8 <_fflush_r+0x74>)
 800aeb8:	429c      	cmp	r4, r3
 800aeba:	bf08      	it	eq
 800aebc:	68ec      	ldreq	r4, [r5, #12]
 800aebe:	e7da      	b.n	800ae76 <_fflush_r+0x22>
 800aec0:	0800be24 	.word	0x0800be24
 800aec4:	0800be44 	.word	0x0800be44
 800aec8:	0800be04 	.word	0x0800be04

0800aecc <std>:
 800aecc:	2300      	movs	r3, #0
 800aece:	b510      	push	{r4, lr}
 800aed0:	4604      	mov	r4, r0
 800aed2:	e9c0 3300 	strd	r3, r3, [r0]
 800aed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeda:	6083      	str	r3, [r0, #8]
 800aedc:	8181      	strh	r1, [r0, #12]
 800aede:	6643      	str	r3, [r0, #100]	; 0x64
 800aee0:	81c2      	strh	r2, [r0, #14]
 800aee2:	6183      	str	r3, [r0, #24]
 800aee4:	4619      	mov	r1, r3
 800aee6:	2208      	movs	r2, #8
 800aee8:	305c      	adds	r0, #92	; 0x5c
 800aeea:	f7fd fc0d 	bl	8008708 <memset>
 800aeee:	4b05      	ldr	r3, [pc, #20]	; (800af04 <std+0x38>)
 800aef0:	6263      	str	r3, [r4, #36]	; 0x24
 800aef2:	4b05      	ldr	r3, [pc, #20]	; (800af08 <std+0x3c>)
 800aef4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aef6:	4b05      	ldr	r3, [pc, #20]	; (800af0c <std+0x40>)
 800aef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aefa:	4b05      	ldr	r3, [pc, #20]	; (800af10 <std+0x44>)
 800aefc:	6224      	str	r4, [r4, #32]
 800aefe:	6323      	str	r3, [r4, #48]	; 0x30
 800af00:	bd10      	pop	{r4, pc}
 800af02:	bf00      	nop
 800af04:	0800b209 	.word	0x0800b209
 800af08:	0800b22b 	.word	0x0800b22b
 800af0c:	0800b263 	.word	0x0800b263
 800af10:	0800b287 	.word	0x0800b287

0800af14 <_cleanup_r>:
 800af14:	4901      	ldr	r1, [pc, #4]	; (800af1c <_cleanup_r+0x8>)
 800af16:	f000 b8af 	b.w	800b078 <_fwalk_reent>
 800af1a:	bf00      	nop
 800af1c:	0800ae55 	.word	0x0800ae55

0800af20 <__sfmoreglue>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	2268      	movs	r2, #104	; 0x68
 800af24:	1e4d      	subs	r5, r1, #1
 800af26:	4355      	muls	r5, r2
 800af28:	460e      	mov	r6, r1
 800af2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af2e:	f7fd fc5f 	bl	80087f0 <_malloc_r>
 800af32:	4604      	mov	r4, r0
 800af34:	b140      	cbz	r0, 800af48 <__sfmoreglue+0x28>
 800af36:	2100      	movs	r1, #0
 800af38:	e9c0 1600 	strd	r1, r6, [r0]
 800af3c:	300c      	adds	r0, #12
 800af3e:	60a0      	str	r0, [r4, #8]
 800af40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af44:	f7fd fbe0 	bl	8008708 <memset>
 800af48:	4620      	mov	r0, r4
 800af4a:	bd70      	pop	{r4, r5, r6, pc}

0800af4c <__sfp_lock_acquire>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__sfp_lock_acquire+0x8>)
 800af4e:	f7ff bc96 	b.w	800a87e <__retarget_lock_acquire_recursive>
 800af52:	bf00      	nop
 800af54:	24000a81 	.word	0x24000a81

0800af58 <__sfp_lock_release>:
 800af58:	4801      	ldr	r0, [pc, #4]	; (800af60 <__sfp_lock_release+0x8>)
 800af5a:	f7ff bc91 	b.w	800a880 <__retarget_lock_release_recursive>
 800af5e:	bf00      	nop
 800af60:	24000a81 	.word	0x24000a81

0800af64 <__sinit_lock_acquire>:
 800af64:	4801      	ldr	r0, [pc, #4]	; (800af6c <__sinit_lock_acquire+0x8>)
 800af66:	f7ff bc8a 	b.w	800a87e <__retarget_lock_acquire_recursive>
 800af6a:	bf00      	nop
 800af6c:	24000a82 	.word	0x24000a82

0800af70 <__sinit_lock_release>:
 800af70:	4801      	ldr	r0, [pc, #4]	; (800af78 <__sinit_lock_release+0x8>)
 800af72:	f7ff bc85 	b.w	800a880 <__retarget_lock_release_recursive>
 800af76:	bf00      	nop
 800af78:	24000a82 	.word	0x24000a82

0800af7c <__sinit>:
 800af7c:	b510      	push	{r4, lr}
 800af7e:	4604      	mov	r4, r0
 800af80:	f7ff fff0 	bl	800af64 <__sinit_lock_acquire>
 800af84:	69a3      	ldr	r3, [r4, #24]
 800af86:	b11b      	cbz	r3, 800af90 <__sinit+0x14>
 800af88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af8c:	f7ff bff0 	b.w	800af70 <__sinit_lock_release>
 800af90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af94:	6523      	str	r3, [r4, #80]	; 0x50
 800af96:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <__sinit+0x68>)
 800af98:	4a13      	ldr	r2, [pc, #76]	; (800afe8 <__sinit+0x6c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800af9e:	42a3      	cmp	r3, r4
 800afa0:	bf04      	itt	eq
 800afa2:	2301      	moveq	r3, #1
 800afa4:	61a3      	streq	r3, [r4, #24]
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f820 	bl	800afec <__sfp>
 800afac:	6060      	str	r0, [r4, #4]
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 f81c 	bl	800afec <__sfp>
 800afb4:	60a0      	str	r0, [r4, #8]
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 f818 	bl	800afec <__sfp>
 800afbc:	2200      	movs	r2, #0
 800afbe:	60e0      	str	r0, [r4, #12]
 800afc0:	2104      	movs	r1, #4
 800afc2:	6860      	ldr	r0, [r4, #4]
 800afc4:	f7ff ff82 	bl	800aecc <std>
 800afc8:	68a0      	ldr	r0, [r4, #8]
 800afca:	2201      	movs	r2, #1
 800afcc:	2109      	movs	r1, #9
 800afce:	f7ff ff7d 	bl	800aecc <std>
 800afd2:	68e0      	ldr	r0, [r4, #12]
 800afd4:	2202      	movs	r2, #2
 800afd6:	2112      	movs	r1, #18
 800afd8:	f7ff ff78 	bl	800aecc <std>
 800afdc:	2301      	movs	r3, #1
 800afde:	61a3      	str	r3, [r4, #24]
 800afe0:	e7d2      	b.n	800af88 <__sinit+0xc>
 800afe2:	bf00      	nop
 800afe4:	0800ba88 	.word	0x0800ba88
 800afe8:	0800af15 	.word	0x0800af15

0800afec <__sfp>:
 800afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afee:	4607      	mov	r7, r0
 800aff0:	f7ff ffac 	bl	800af4c <__sfp_lock_acquire>
 800aff4:	4b1e      	ldr	r3, [pc, #120]	; (800b070 <__sfp+0x84>)
 800aff6:	681e      	ldr	r6, [r3, #0]
 800aff8:	69b3      	ldr	r3, [r6, #24]
 800affa:	b913      	cbnz	r3, 800b002 <__sfp+0x16>
 800affc:	4630      	mov	r0, r6
 800affe:	f7ff ffbd 	bl	800af7c <__sinit>
 800b002:	3648      	adds	r6, #72	; 0x48
 800b004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b008:	3b01      	subs	r3, #1
 800b00a:	d503      	bpl.n	800b014 <__sfp+0x28>
 800b00c:	6833      	ldr	r3, [r6, #0]
 800b00e:	b30b      	cbz	r3, 800b054 <__sfp+0x68>
 800b010:	6836      	ldr	r6, [r6, #0]
 800b012:	e7f7      	b.n	800b004 <__sfp+0x18>
 800b014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b018:	b9d5      	cbnz	r5, 800b050 <__sfp+0x64>
 800b01a:	4b16      	ldr	r3, [pc, #88]	; (800b074 <__sfp+0x88>)
 800b01c:	60e3      	str	r3, [r4, #12]
 800b01e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b022:	6665      	str	r5, [r4, #100]	; 0x64
 800b024:	f7ff fc2a 	bl	800a87c <__retarget_lock_init_recursive>
 800b028:	f7ff ff96 	bl	800af58 <__sfp_lock_release>
 800b02c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b034:	6025      	str	r5, [r4, #0]
 800b036:	61a5      	str	r5, [r4, #24]
 800b038:	2208      	movs	r2, #8
 800b03a:	4629      	mov	r1, r5
 800b03c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b040:	f7fd fb62 	bl	8008708 <memset>
 800b044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b04c:	4620      	mov	r0, r4
 800b04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b050:	3468      	adds	r4, #104	; 0x68
 800b052:	e7d9      	b.n	800b008 <__sfp+0x1c>
 800b054:	2104      	movs	r1, #4
 800b056:	4638      	mov	r0, r7
 800b058:	f7ff ff62 	bl	800af20 <__sfmoreglue>
 800b05c:	4604      	mov	r4, r0
 800b05e:	6030      	str	r0, [r6, #0]
 800b060:	2800      	cmp	r0, #0
 800b062:	d1d5      	bne.n	800b010 <__sfp+0x24>
 800b064:	f7ff ff78 	bl	800af58 <__sfp_lock_release>
 800b068:	230c      	movs	r3, #12
 800b06a:	603b      	str	r3, [r7, #0]
 800b06c:	e7ee      	b.n	800b04c <__sfp+0x60>
 800b06e:	bf00      	nop
 800b070:	0800ba88 	.word	0x0800ba88
 800b074:	ffff0001 	.word	0xffff0001

0800b078 <_fwalk_reent>:
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	4606      	mov	r6, r0
 800b07e:	4688      	mov	r8, r1
 800b080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b084:	2700      	movs	r7, #0
 800b086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b08a:	f1b9 0901 	subs.w	r9, r9, #1
 800b08e:	d505      	bpl.n	800b09c <_fwalk_reent+0x24>
 800b090:	6824      	ldr	r4, [r4, #0]
 800b092:	2c00      	cmp	r4, #0
 800b094:	d1f7      	bne.n	800b086 <_fwalk_reent+0xe>
 800b096:	4638      	mov	r0, r7
 800b098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b09c:	89ab      	ldrh	r3, [r5, #12]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d907      	bls.n	800b0b2 <_fwalk_reent+0x3a>
 800b0a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	d003      	beq.n	800b0b2 <_fwalk_reent+0x3a>
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	47c0      	blx	r8
 800b0b0:	4307      	orrs	r7, r0
 800b0b2:	3568      	adds	r5, #104	; 0x68
 800b0b4:	e7e9      	b.n	800b08a <_fwalk_reent+0x12>

0800b0b6 <__swhatbuf_r>:
 800b0b6:	b570      	push	{r4, r5, r6, lr}
 800b0b8:	460e      	mov	r6, r1
 800b0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0be:	2900      	cmp	r1, #0
 800b0c0:	b096      	sub	sp, #88	; 0x58
 800b0c2:	4614      	mov	r4, r2
 800b0c4:	461d      	mov	r5, r3
 800b0c6:	da08      	bge.n	800b0da <__swhatbuf_r+0x24>
 800b0c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	602a      	str	r2, [r5, #0]
 800b0d0:	061a      	lsls	r2, r3, #24
 800b0d2:	d410      	bmi.n	800b0f6 <__swhatbuf_r+0x40>
 800b0d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0d8:	e00e      	b.n	800b0f8 <__swhatbuf_r+0x42>
 800b0da:	466a      	mov	r2, sp
 800b0dc:	f000 f8fa 	bl	800b2d4 <_fstat_r>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	dbf1      	blt.n	800b0c8 <__swhatbuf_r+0x12>
 800b0e4:	9a01      	ldr	r2, [sp, #4]
 800b0e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0ee:	425a      	negs	r2, r3
 800b0f0:	415a      	adcs	r2, r3
 800b0f2:	602a      	str	r2, [r5, #0]
 800b0f4:	e7ee      	b.n	800b0d4 <__swhatbuf_r+0x1e>
 800b0f6:	2340      	movs	r3, #64	; 0x40
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	b016      	add	sp, #88	; 0x58
 800b0fe:	bd70      	pop	{r4, r5, r6, pc}

0800b100 <__smakebuf_r>:
 800b100:	898b      	ldrh	r3, [r1, #12]
 800b102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b104:	079d      	lsls	r5, r3, #30
 800b106:	4606      	mov	r6, r0
 800b108:	460c      	mov	r4, r1
 800b10a:	d507      	bpl.n	800b11c <__smakebuf_r+0x1c>
 800b10c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	6123      	str	r3, [r4, #16]
 800b114:	2301      	movs	r3, #1
 800b116:	6163      	str	r3, [r4, #20]
 800b118:	b002      	add	sp, #8
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	ab01      	add	r3, sp, #4
 800b11e:	466a      	mov	r2, sp
 800b120:	f7ff ffc9 	bl	800b0b6 <__swhatbuf_r>
 800b124:	9900      	ldr	r1, [sp, #0]
 800b126:	4605      	mov	r5, r0
 800b128:	4630      	mov	r0, r6
 800b12a:	f7fd fb61 	bl	80087f0 <_malloc_r>
 800b12e:	b948      	cbnz	r0, 800b144 <__smakebuf_r+0x44>
 800b130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b134:	059a      	lsls	r2, r3, #22
 800b136:	d4ef      	bmi.n	800b118 <__smakebuf_r+0x18>
 800b138:	f023 0303 	bic.w	r3, r3, #3
 800b13c:	f043 0302 	orr.w	r3, r3, #2
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	e7e3      	b.n	800b10c <__smakebuf_r+0xc>
 800b144:	4b0d      	ldr	r3, [pc, #52]	; (800b17c <__smakebuf_r+0x7c>)
 800b146:	62b3      	str	r3, [r6, #40]	; 0x28
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	6020      	str	r0, [r4, #0]
 800b14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	9b00      	ldr	r3, [sp, #0]
 800b154:	6163      	str	r3, [r4, #20]
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	6120      	str	r0, [r4, #16]
 800b15a:	b15b      	cbz	r3, 800b174 <__smakebuf_r+0x74>
 800b15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b160:	4630      	mov	r0, r6
 800b162:	f000 f8c9 	bl	800b2f8 <_isatty_r>
 800b166:	b128      	cbz	r0, 800b174 <__smakebuf_r+0x74>
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	f023 0303 	bic.w	r3, r3, #3
 800b16e:	f043 0301 	orr.w	r3, r3, #1
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	89a0      	ldrh	r0, [r4, #12]
 800b176:	4305      	orrs	r5, r0
 800b178:	81a5      	strh	r5, [r4, #12]
 800b17a:	e7cd      	b.n	800b118 <__smakebuf_r+0x18>
 800b17c:	0800af15 	.word	0x0800af15

0800b180 <_raise_r>:
 800b180:	291f      	cmp	r1, #31
 800b182:	b538      	push	{r3, r4, r5, lr}
 800b184:	4604      	mov	r4, r0
 800b186:	460d      	mov	r5, r1
 800b188:	d904      	bls.n	800b194 <_raise_r+0x14>
 800b18a:	2316      	movs	r3, #22
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	f04f 30ff 	mov.w	r0, #4294967295
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b196:	b112      	cbz	r2, 800b19e <_raise_r+0x1e>
 800b198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b19c:	b94b      	cbnz	r3, 800b1b2 <_raise_r+0x32>
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 f830 	bl	800b204 <_getpid_r>
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ae:	f000 b817 	b.w	800b1e0 <_kill_r>
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d00a      	beq.n	800b1cc <_raise_r+0x4c>
 800b1b6:	1c59      	adds	r1, r3, #1
 800b1b8:	d103      	bne.n	800b1c2 <_raise_r+0x42>
 800b1ba:	2316      	movs	r3, #22
 800b1bc:	6003      	str	r3, [r0, #0]
 800b1be:	2001      	movs	r0, #1
 800b1c0:	e7e7      	b.n	800b192 <_raise_r+0x12>
 800b1c2:	2400      	movs	r4, #0
 800b1c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	4798      	blx	r3
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e7e0      	b.n	800b192 <_raise_r+0x12>

0800b1d0 <raise>:
 800b1d0:	4b02      	ldr	r3, [pc, #8]	; (800b1dc <raise+0xc>)
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	f7ff bfd3 	b.w	800b180 <_raise_r>
 800b1da:	bf00      	nop
 800b1dc:	240006a4 	.word	0x240006a4

0800b1e0 <_kill_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d07      	ldr	r5, [pc, #28]	; (800b200 <_kill_r+0x20>)
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	f000 f8d7 	bl	800b3a0 <_kill>
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	d102      	bne.n	800b1fc <_kill_r+0x1c>
 800b1f6:	682b      	ldr	r3, [r5, #0]
 800b1f8:	b103      	cbz	r3, 800b1fc <_kill_r+0x1c>
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	24000a7c 	.word	0x24000a7c

0800b204 <_getpid_r>:
 800b204:	f000 b8bc 	b.w	800b380 <_getpid>

0800b208 <__sread>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	460c      	mov	r4, r1
 800b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b210:	f000 f894 	bl	800b33c <_read_r>
 800b214:	2800      	cmp	r0, #0
 800b216:	bfab      	itete	ge
 800b218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b21a:	89a3      	ldrhlt	r3, [r4, #12]
 800b21c:	181b      	addge	r3, r3, r0
 800b21e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b222:	bfac      	ite	ge
 800b224:	6563      	strge	r3, [r4, #84]	; 0x54
 800b226:	81a3      	strhlt	r3, [r4, #12]
 800b228:	bd10      	pop	{r4, pc}

0800b22a <__swrite>:
 800b22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b22e:	461f      	mov	r7, r3
 800b230:	898b      	ldrh	r3, [r1, #12]
 800b232:	05db      	lsls	r3, r3, #23
 800b234:	4605      	mov	r5, r0
 800b236:	460c      	mov	r4, r1
 800b238:	4616      	mov	r6, r2
 800b23a:	d505      	bpl.n	800b248 <__swrite+0x1e>
 800b23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b240:	2302      	movs	r3, #2
 800b242:	2200      	movs	r2, #0
 800b244:	f000 f868 	bl	800b318 <_lseek_r>
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b24e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b252:	81a3      	strh	r3, [r4, #12]
 800b254:	4632      	mov	r2, r6
 800b256:	463b      	mov	r3, r7
 800b258:	4628      	mov	r0, r5
 800b25a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b25e:	f000 b817 	b.w	800b290 <_write_r>

0800b262 <__sseek>:
 800b262:	b510      	push	{r4, lr}
 800b264:	460c      	mov	r4, r1
 800b266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b26a:	f000 f855 	bl	800b318 <_lseek_r>
 800b26e:	1c43      	adds	r3, r0, #1
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	bf15      	itete	ne
 800b274:	6560      	strne	r0, [r4, #84]	; 0x54
 800b276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b27a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b27e:	81a3      	strheq	r3, [r4, #12]
 800b280:	bf18      	it	ne
 800b282:	81a3      	strhne	r3, [r4, #12]
 800b284:	bd10      	pop	{r4, pc}

0800b286 <__sclose>:
 800b286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b28a:	f000 b813 	b.w	800b2b4 <_close_r>
	...

0800b290 <_write_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4d07      	ldr	r5, [pc, #28]	; (800b2b0 <_write_r+0x20>)
 800b294:	4604      	mov	r4, r0
 800b296:	4608      	mov	r0, r1
 800b298:	4611      	mov	r1, r2
 800b29a:	2200      	movs	r2, #0
 800b29c:	602a      	str	r2, [r5, #0]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f000 f896 	bl	800b3d0 <_write>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_write_r+0x1e>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_write_r+0x1e>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	24000a7c 	.word	0x24000a7c

0800b2b4 <_close_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4d06      	ldr	r5, [pc, #24]	; (800b2d0 <_close_r+0x1c>)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	4608      	mov	r0, r1
 800b2be:	602b      	str	r3, [r5, #0]
 800b2c0:	f000 f84e 	bl	800b360 <_close>
 800b2c4:	1c43      	adds	r3, r0, #1
 800b2c6:	d102      	bne.n	800b2ce <_close_r+0x1a>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	b103      	cbz	r3, 800b2ce <_close_r+0x1a>
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	24000a7c 	.word	0x24000a7c

0800b2d4 <_fstat_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4d07      	ldr	r5, [pc, #28]	; (800b2f4 <_fstat_r+0x20>)
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4604      	mov	r4, r0
 800b2dc:	4608      	mov	r0, r1
 800b2de:	4611      	mov	r1, r2
 800b2e0:	602b      	str	r3, [r5, #0]
 800b2e2:	f000 f845 	bl	800b370 <_fstat>
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	d102      	bne.n	800b2f0 <_fstat_r+0x1c>
 800b2ea:	682b      	ldr	r3, [r5, #0]
 800b2ec:	b103      	cbz	r3, 800b2f0 <_fstat_r+0x1c>
 800b2ee:	6023      	str	r3, [r4, #0]
 800b2f0:	bd38      	pop	{r3, r4, r5, pc}
 800b2f2:	bf00      	nop
 800b2f4:	24000a7c 	.word	0x24000a7c

0800b2f8 <_isatty_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d06      	ldr	r5, [pc, #24]	; (800b314 <_isatty_r+0x1c>)
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	4604      	mov	r4, r0
 800b300:	4608      	mov	r0, r1
 800b302:	602b      	str	r3, [r5, #0]
 800b304:	f000 f844 	bl	800b390 <_isatty>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d102      	bne.n	800b312 <_isatty_r+0x1a>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	b103      	cbz	r3, 800b312 <_isatty_r+0x1a>
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	24000a7c 	.word	0x24000a7c

0800b318 <_lseek_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4d07      	ldr	r5, [pc, #28]	; (800b338 <_lseek_r+0x20>)
 800b31c:	4604      	mov	r4, r0
 800b31e:	4608      	mov	r0, r1
 800b320:	4611      	mov	r1, r2
 800b322:	2200      	movs	r2, #0
 800b324:	602a      	str	r2, [r5, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	f000 f842 	bl	800b3b0 <_lseek>
 800b32c:	1c43      	adds	r3, r0, #1
 800b32e:	d102      	bne.n	800b336 <_lseek_r+0x1e>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	b103      	cbz	r3, 800b336 <_lseek_r+0x1e>
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	bd38      	pop	{r3, r4, r5, pc}
 800b338:	24000a7c 	.word	0x24000a7c

0800b33c <_read_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4d07      	ldr	r5, [pc, #28]	; (800b35c <_read_r+0x20>)
 800b340:	4604      	mov	r4, r0
 800b342:	4608      	mov	r0, r1
 800b344:	4611      	mov	r1, r2
 800b346:	2200      	movs	r2, #0
 800b348:	602a      	str	r2, [r5, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	f000 f838 	bl	800b3c0 <_read>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	d102      	bne.n	800b35a <_read_r+0x1e>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	b103      	cbz	r3, 800b35a <_read_r+0x1e>
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	24000a7c 	.word	0x24000a7c

0800b360 <_close>:
 800b360:	4b02      	ldr	r3, [pc, #8]	; (800b36c <_close+0xc>)
 800b362:	2258      	movs	r2, #88	; 0x58
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	f04f 30ff 	mov.w	r0, #4294967295
 800b36a:	4770      	bx	lr
 800b36c:	24000a7c 	.word	0x24000a7c

0800b370 <_fstat>:
 800b370:	4b02      	ldr	r3, [pc, #8]	; (800b37c <_fstat+0xc>)
 800b372:	2258      	movs	r2, #88	; 0x58
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	f04f 30ff 	mov.w	r0, #4294967295
 800b37a:	4770      	bx	lr
 800b37c:	24000a7c 	.word	0x24000a7c

0800b380 <_getpid>:
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <_getpid+0xc>)
 800b382:	2258      	movs	r2, #88	; 0x58
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	f04f 30ff 	mov.w	r0, #4294967295
 800b38a:	4770      	bx	lr
 800b38c:	24000a7c 	.word	0x24000a7c

0800b390 <_isatty>:
 800b390:	4b02      	ldr	r3, [pc, #8]	; (800b39c <_isatty+0xc>)
 800b392:	2258      	movs	r2, #88	; 0x58
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	2000      	movs	r0, #0
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	24000a7c 	.word	0x24000a7c

0800b3a0 <_kill>:
 800b3a0:	4b02      	ldr	r3, [pc, #8]	; (800b3ac <_kill+0xc>)
 800b3a2:	2258      	movs	r2, #88	; 0x58
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3aa:	4770      	bx	lr
 800b3ac:	24000a7c 	.word	0x24000a7c

0800b3b0 <_lseek>:
 800b3b0:	4b02      	ldr	r3, [pc, #8]	; (800b3bc <_lseek+0xc>)
 800b3b2:	2258      	movs	r2, #88	; 0x58
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ba:	4770      	bx	lr
 800b3bc:	24000a7c 	.word	0x24000a7c

0800b3c0 <_read>:
 800b3c0:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <_read+0xc>)
 800b3c2:	2258      	movs	r2, #88	; 0x58
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ca:	4770      	bx	lr
 800b3cc:	24000a7c 	.word	0x24000a7c

0800b3d0 <_write>:
 800b3d0:	4b02      	ldr	r3, [pc, #8]	; (800b3dc <_write+0xc>)
 800b3d2:	2258      	movs	r2, #88	; 0x58
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3da:	4770      	bx	lr
 800b3dc:	24000a7c 	.word	0x24000a7c

0800b3e0 <_exit>:
 800b3e0:	e7fe      	b.n	800b3e0 <_exit>
	...

0800b3e4 <_init>:
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e6:	bf00      	nop
 800b3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ea:	bc08      	pop	{r3}
 800b3ec:	469e      	mov	lr, r3
 800b3ee:	4770      	bx	lr

0800b3f0 <_fini>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	bf00      	nop
 800b3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f6:	bc08      	pop	{r3}
 800b3f8:	469e      	mov	lr, r3
 800b3fa:	4770      	bx	lr
